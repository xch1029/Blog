{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/affix.js","path":"js/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/exturl.js","path":"js/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/js.cookie.js","path":"js/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/post-details.js","path":"js/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/scroll-cookie.js","path":"js/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/scrollspy.js","path":"js/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.all-contributorsrc","hash":"43eb0149c78e464c695f0dd758bb8c59353182b3","modified":1582125654195},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1582125654196},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1582125654197},{"_id":"themes/next/.eslintrc.json","hash":"d3c11de434171d55d70daadd3914bc33544b74b8","modified":1582125654198},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1582125654198},{"_id":"themes/next/.gitignore","hash":"69e702b833c6aa9646ad24c45dd9cf00ab5ce6b9","modified":1582125654199},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1582125654200},{"_id":"themes/next/.travis.yml","hash":"fb9ac54e875f6ea16d5c83db497f6bd70ae83198","modified":1582125654201},{"_id":"themes/next/LICENSE.md","hash":"0a9c7399f102b4eb0a6950dd31264be421557c7d","modified":1582125654201},{"_id":"themes/next/README.md","hash":"3f72e5a5051ca2bdaccdda684c46dc4fdb4413a6","modified":1582125654202},{"_id":"themes/next/_config.yml","hash":"13205328d8fad405c9f606b53b5de3fa56627c3c","modified":1582125654204},{"_id":"themes/next/bower.json","hash":"3c1c82d1644f5690534e71feed8df82e563748e0","modified":1582125654204},{"_id":"themes/next/crowdin.yml","hash":"4a53f5985e545c635cb56b2a57ed290cb8cf8942","modified":1582125654206},{"_id":"themes/next/gulpfile.coffee","hash":"6407d9063bd88ede299ff7c2a59cf2c82e079476","modified":1582125654229},{"_id":"themes/next/package.json","hash":"23449a55881f7316766c0fcf3ce4c93adbc6076b","modified":1582125654337},{"_id":"source/_posts/JSON-stringify.md","hash":"aee00716a2a90945b66039287f3d96efc02ba00f","modified":1582125654091},{"_id":"source/_posts/VS-Code-tips.md","hash":"48afc46a3b76e3902c0bd8e8c3a0506356051309","modified":1582125654092},{"_id":"source/_posts/ant-design-pro-tips.md","hash":"4698cb88e95ebd0da9000cdc0dfd5f7264e689a7","modified":1582125654092},{"_id":"source/_posts/console.md","hash":"fb4861c71ace00d59964af1219b0efe2ff6be246","modified":1584094486211},{"_id":"source/_posts/extensions-for-chrome.md","hash":"1d71c73c1350e2f1db49baec76bced85d1a81774","modified":1582125654093},{"_id":"source/_posts/flutter-awesome-list.md","hash":"b36c8f88bca25187f6d7a85f8f1e25e003fb2a0a","modified":1582125654094},{"_id":"source/_posts/flutter-movie.md","hash":"f99e647cca95c57e624b81fe63c78e3af49aa0b6","modified":1582125654095},{"_id":"source/_posts/flutter-scroll-animation.md","hash":"11acef1d149e5bf6b1565551a4f0d562410f2c6a","modified":1582125654096},{"_id":"source/_posts/git-tips.md","hash":"903dc0fdf114d655ea1a4d0cc921d3dd620116c0","modified":1582125654098},{"_id":"source/_posts/hello-world.md","hash":"d5fbd854a0bc2e8efe58c3202d7a12039f748abb","modified":1582125654098},{"_id":"source/_posts/high-order-function.md","hash":"e25ecb83286a9d623a6bbfcec2082284100baf8a","modified":1583844290001},{"_id":"source/_posts/lol.md","hash":"e15bbd72137a82271045dba543afbb8fed70f57f","modified":1582125654099},{"_id":"source/_posts/the-tips-of-array-you-must-know-in-js.md","hash":"2266f8b75f01c9b3da1d8a5cf2ced5543127bf0f","modified":1582125909246},{"_id":"source/_posts/ui-divider.md","hash":"3e62700b63b18fc2fde2074ccbbddca6408cbcaa","modified":1583844212244},{"_id":"source/_posts/write-a-blog-for-yourself.md","hash":"245c3ac217dd691763f7c1668d2bb519ac0a9b23","modified":1582446407398},{"_id":"source/_posts/write-a-blog-for-yourself2.md","hash":"d7ce33bfe5167e364505e00960ad02b88868661c","modified":1583844323779},{"_id":"source/_posts/write-a-blog-for-yourself3.md","hash":"4c8ff9869503e8e41ac8e4b35433adb1d1573eed","modified":1583844300244},{"_id":"source/_posts/操作URL的黑科技.md","hash":"c4ea61b04ea6882df271337776f5d43c7318df94","modified":1582125654100},{"_id":"source/about/index.md","hash":"8999837b4800a41c7c589985f4a2d090113f92e3","modified":1582125654101},{"_id":"source/tags/index.md","hash":"31f4cada5795e238315c45691fd92a2e9af5082b","modified":1582125654102},{"_id":"themes/next/docs/AGPL3.md","hash":"f463f95b169d64983f59fa6f3e4b6760290a0e6b","modified":1582125654207},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"1e49c08b446678336b2eacc8bf581faca969f34b","modified":1582125654208},{"_id":"themes/next/docs/AUTHORS.md","hash":"51a0a13da55ff3d596970b2f9ab4531c6b2211f2","modified":1582125654209},{"_id":"themes/next/docs/DATA-FILES.md","hash":"9a1895c0a0db705c4c48f512e86917f9af1ec3fb","modified":1582125654210},{"_id":"themes/next/docs/INSTALLATION.md","hash":"b74ef6fedf76cdb156e2265759ee0a789ddd49cc","modified":1582125654211},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"721a1aa9feed1b580ab99af8e69ed22699121e88","modified":1582125654212},{"_id":"themes/next/docs/LICENSE.txt","hash":"ae5ad07e4f4106bad55535dba042221539e6c7f9","modified":1582125654213},{"_id":"themes/next/docs/MATH.md","hash":"0540cd9c961b07931af9f38a83bc9a0f90cd5291","modified":1582125654214},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"c9f2ed8e15c137b1885d9ca8b7197d9f457971e9","modified":1582125654214},{"_id":"themes/next/languages/de.yml","hash":"79b3221344da335743b5ef5a82efa9338d64feb0","modified":1582125654231},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1582125654232},{"_id":"themes/next/languages/en.yml","hash":"d66b8b48840443a4f9c72c7696a21e292f685a47","modified":1582125654232},{"_id":"themes/next/languages/fr.yml","hash":"0393558717065293bdf732866471cebb0c884f6a","modified":1582125654233},{"_id":"themes/next/languages/id.yml","hash":"f3302a4dfdc9be38a52d6e081411574b1ea01671","modified":1582125654234},{"_id":"themes/next/languages/it.yml","hash":"31eb878b53d60ff47e3e534cdd7a839c8801ac6e","modified":1582125654235},{"_id":"themes/next/languages/ja.yml","hash":"3f25eca504ee5a519987b4402731f1bb7f5191c9","modified":1582125654236},{"_id":"themes/next/languages/ko.yml","hash":"75f2fe142f76bf623e34ed3570598226f55f2b8b","modified":1582125654237},{"_id":"themes/next/languages/nl.yml","hash":"08f16ce395dacc88847fc30dc6b985ce22fb8948","modified":1582125654238},{"_id":"themes/next/languages/pt-BR.yml","hash":"c7de8b77f44e75be4f04423088a1c891537aa601","modified":1582125654238},{"_id":"themes/next/languages/pt.yml","hash":"ca5072c967e5eb1178ffed91827459eda6e4e6e2","modified":1582125654239},{"_id":"themes/next/languages/ru.yml","hash":"720b92a9ec075b68737d296b1f29ad8e01151c85","modified":1582125654240},{"_id":"themes/next/languages/tr.yml","hash":"6d2f53d3687a7a46c67c78ab47908accd8812add","modified":1582125654240},{"_id":"themes/next/languages/uk.yml","hash":"6320439c6e9ff81e5b8f8129ca16e9a744b37032","modified":1582125654241},{"_id":"themes/next/languages/vi.yml","hash":"e2f0dd7f020a36aa6b73ed4d00dcc4259a7e5e9d","modified":1582125654242},{"_id":"themes/next/languages/zh-CN.yml","hash":"069f15da910d6f9756be448167c07ea5aa5dc346","modified":1582125654243},{"_id":"themes/next/languages/zh-HK.yml","hash":"c22113c4a6c748c18093dae56da5a9e8c5b963cd","modified":1582125654243},{"_id":"themes/next/languages/zh-TW.yml","hash":"dbf4dd87716babb2db4f5332fae9ec190a6f636a","modified":1582125654245},{"_id":"themes/next/layout/_layout.swig","hash":"ba786b1baba49021928e2e508da53f2fd1369b3f","modified":1584100692063},{"_id":"themes/next/layout/archive.swig","hash":"61bc56e77e653684fc834f63dcbdadf18687c748","modified":1582125654332},{"_id":"themes/next/layout/category.swig","hash":"ad0ac6a1ff341f8eab9570e7fb443962948c5f9d","modified":1582125654332},{"_id":"themes/next/layout/index.swig","hash":"bdcc9f57adef49706b16b107791cacecbc23c1dc","modified":1582125654333},{"_id":"themes/next/layout/page.swig","hash":"5d06ee8f477ffc39932d0251aa792ffcaf8faf14","modified":1582125654334},{"_id":"themes/next/layout/post.swig","hash":"af74e97d57cf00cde6f8dbd4364f27910915454e","modified":1582125654335},{"_id":"themes/next/layout/schedule.swig","hash":"e79f43df0e9a6cf48bbf00882de48c5a58080247","modified":1582125654335},{"_id":"themes/next/layout/tag.swig","hash":"283519d4d5b67814412863a3e0212bac18bcc5a0","modified":1582125654336},{"_id":"themes/next/scripts/merge-configs.js","hash":"5f96f63e86825fd7028c2522e4111103e261a758","modified":1582125654342},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1582125654344},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1582125654512},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1582125654515},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1582125654516},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1582125654470},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"a51de08657f5946f4028b11373280ddc04639525","modified":1582125654216},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"7b2963daac19b0c14f98ebef375d5fbce8fc3f44","modified":1582125654218},{"_id":"themes/next/docs/ru/README.md","hash":"aeb95129ab1da9ec41786bfa86dc32c739ee6358","modified":1582125654218},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"1a4e41adcf5831057f3f7b3025ed4a5ef7c442b4","modified":1582125654219},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"aaf25d304793344e2d026062768c93005723f5c6","modified":1582125654221},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"018a259694f4a8c7c384e1f323531442cba5fbf3","modified":1582125654222},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"508caa37443407860d03f4d8bd56b007585125ef","modified":1582125654222},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"67f4a987e7db0ab1ce1ea4c311f2961df07b6681","modified":1582125654223},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"baca12cc24be082f1db28c7f283493569666321c","modified":1582125654224},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"b17fc344ff61603f83387c0f9b2b2189aae81d50","modified":1582125654225},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"734b371a0dd910eb9fe087f50c95ce35340bb832","modified":1582125654226},{"_id":"themes/next/docs/zh-CN/README.md","hash":"058c4c6f17c144d88d64c0b12cbd4f1c9fc61522","modified":1582125654226},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"2095d1214a4e519a1d31b67b41c89080fa3285d3","modified":1582125654227},{"_id":"themes/next/layout/_custom/head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1582125654247},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1582125654248},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1582125654249},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"891ab67815969dd8736cb22fbbb3f791b8fff4e4","modified":1582125654253},{"_id":"themes/next/layout/_macro/post.swig","hash":"31ba947998f0c962b04ae7f42f9d3db934209a79","modified":1582125654254},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"91017f58f83d9505ce99109fffdc51c032bf017e","modified":1582125654255},{"_id":"themes/next/layout/_partials/comments.swig","hash":"d0b9e841d55c974d02f43823a06a2627f8e46431","modified":1582125654257},{"_id":"themes/next/layout/_partials/footer.swig","hash":"b0cf693107b8f0ef8d9855463eafdbf7fef2082a","modified":1584101017126},{"_id":"themes/next/layout/_partials/github-banner.swig","hash":"1ad13269b43b900356f3bdab7947d6a86f035a2c","modified":1582125654259},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"914155d5d758306cff405beefd4a07973fd8fc77","modified":1582125654271},{"_id":"themes/next/layout/_partials/post-edit.swig","hash":"dee345054d564dd56f74bb143942d3edd1cb8150","modified":1582125654272},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"cccd93d30787675010b1a74ef02eb5b813ec1d96","modified":1582125654284},{"_id":"themes/next/layout/_scripts/exturl.swig","hash":"c2e8f4b3a2bf991320ecc827dcdc227399ad5b51","modified":1582125654285},{"_id":"themes/next/layout/_scripts/next-boot.swig","hash":"50c3ae6b50f173ae70f8c3312f7c6da1097eb9b6","modified":1582125654286},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"efb3404a3303622f3be60944d9d1926972c5c248","modified":1582125654287},{"_id":"themes/next/layout/_scripts/scroll-cookie.swig","hash":"8a992b7fe42b9c1a5eb9d937b0827aed91586d94","modified":1582125654293},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"4130f995f0c4f81a44266194ecae9df96fad174c","modified":1582125654294},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"87bcb495f7ddd81cc3fe2c2a886e51c08053019b","modified":1582125654307},{"_id":"themes/next/layout/_third-party/bookmark.swig","hash":"4b93dc7ac0573c402aabcb5c933bbcb893b07c51","modified":1582125654308},{"_id":"themes/next/layout/_third-party/chatra.swig","hash":"87182367d7954457cb2498bbfa9445c03c2d619e","modified":1582125654308},{"_id":"themes/next/layout/_third-party/copy-code.swig","hash":"07fc0ae1a30c5aa9269d6efdaec598164b1d191c","modified":1582125654318},{"_id":"themes/next/layout/_third-party/mermaid.swig","hash":"80dfc0879866e6512cb67590a3b2d8741a66f980","modified":1582125654321},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"7db4ad4a8dd5420dad2f6890f5299945df0af970","modified":1582125654322},{"_id":"themes/next/layout/_third-party/pangu.swig","hash":"76f5933925670044ec65b454295ba7e0a8439986","modified":1582125654323},{"_id":"themes/next/layout/_third-party/pdf.swig","hash":"4ae61c7efb16e962385bfe522a38c4d29cdcccbe","modified":1582125654324},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"7cc1294a5fbedf3502688248a433c358339e5ae0","modified":1582125654324},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"c476dc3693a9dd0be2d136a45b0d7fdef55d4d92","modified":1582125654326},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"882cd0b68c493af1b6d945660f9c21085e006ffc","modified":1582125654327},{"_id":"themes/next/layout/_third-party/tidio.swig","hash":"b44010cd577e4d063c3406772938c4b117ec7b7b","modified":1582125654331},{"_id":"themes/next/scripts/filters/exturl.js","hash":"b19c7c1021e57367b3b3bbf5678381017ed5667d","modified":1582125654339},{"_id":"themes/next/scripts/helpers/engine.js","hash":"cdb6152582313268d970ffeef99b4a8a7850f034","modified":1582125654340},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"a40ce6bc852bb4bff8b9f984fa064741dd151e96","modified":1582125654341},{"_id":"themes/next/scripts/tags/button.js","hash":"95a520f6529424a03c7ead6dbfd5e626d672febb","modified":1582125654345},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"4519ab8e6898f2ee90d05cde060375462b937a7d","modified":1582125654346},{"_id":"themes/next/scripts/tags/exturl.js","hash":"f9f25905adecfb8be49def4ff3b0b8bbc6955d84","modified":1582125654347},{"_id":"themes/next/scripts/tags/full-image.js","hash":"a6b2264215c555c553b2c5db85fa90678798d0d5","modified":1582125654347},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"23d839333422375e85d44e476f554faf49973a3c","modified":1582125654348},{"_id":"themes/next/scripts/tags/include-raw.js","hash":"ab4a82a7246265717556c7a42f897430340b88cf","modified":1582125654349},{"_id":"themes/next/scripts/tags/label.js","hash":"fc83f4e1be2c34e81cb79938f4f99973eba1ea60","modified":1582125654350},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"81134494ff0134c0dae1b3815caf6606fccd4e46","modified":1582125654350},{"_id":"themes/next/scripts/tags/note.js","hash":"1fdf4f95810fdb983bfd5ad4c4f13fedd4ea2f8d","modified":1582125654351},{"_id":"themes/next/scripts/tags/pdf.js","hash":"ab995f0fc60d60f637220e2651111b775b8a06de","modified":1582125654352},{"_id":"themes/next/scripts/tags/tabs.js","hash":"72a5adbd8f300bee1d0c289367598ca06b2bed17","modified":1582125654352},{"_id":"themes/next/scripts/tags/video.js","hash":"944293fec96e568d9b09bc1280d5dbc9ee1bbd17","modified":1582125654354},{"_id":"themes/next/source/css/main.styl","hash":"5e7d28bc539e84f8b03e68df82292f7fc0f2d023","modified":1582125654468},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1582125654471},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1582125654472},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1582125654473},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1582125654474},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1582125654475},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1582125654476},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1582125654477},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1582125654478},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1582125654479},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1582125654480},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1582125654481},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1582125654481},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1582125654482},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1582125654483},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1582125654484},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1582125654485},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1582125654486},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1582125654487},{"_id":"themes/next/source/js/affix.js","hash":"ad343aa406fd8181b5f310434817ce98fc2219e3","modified":1582125654488},{"_id":"themes/next/source/js/algolia-search.js","hash":"84906eeae57bd06744dd20160b93eacf658f97e2","modified":1582125654489},{"_id":"themes/next/source/js/exturl.js","hash":"c48aa4b3c0e578a807fd3661e6cd4f3890777437","modified":1582125654490},{"_id":"themes/next/source/js/js.cookie.js","hash":"f11e84def0352b7dd6393f1b83e55a40ab468686","modified":1582125654491},{"_id":"themes/next/source/js/motion.js","hash":"d0a6d9dbcc57159e54bbb1f683b86632ae0b78f0","modified":1582125654492},{"_id":"themes/next/source/js/next-boot.js","hash":"579f3ba1629febb4fe97d383d7a1f0abc1c4c800","modified":1584101674564},{"_id":"themes/next/source/js/post-details.js","hash":"7d309b771e86c7e22ce11cc25625481ef7d5985c","modified":1582125654493},{"_id":"themes/next/source/js/scroll-cookie.js","hash":"c4867626afab749404daf321367f9b6b8e223f69","modified":1582125654497},{"_id":"themes/next/source/js/scrollspy.js","hash":"68d3690152c89e7adb08bb35ec28dbda2bd93686","modified":1582125654498},{"_id":"themes/next/source/js/utils.js","hash":"6a07990fe4374f8485b7dfa5797d029d8c8a024d","modified":1582125654499},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1582125654432},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1582125654433},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1582125654436},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1582125654465},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1582125654467},{"_id":"themes/next/layout/_macro/menu/menu-badge.swig","hash":"4eb8e222dc337211efb0d3bbdb5e29af3e6ecdb8","modified":1582125654252},{"_id":"themes/next/layout/_macro/menu/menu-item.swig","hash":"25aea3d764b952f3f6d28ab86d7212d138e892df","modified":1582125654253},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"b57bf9c865bed0f22157176a8085de168a1aef77","modified":1582125654260},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"fd079a414ca0f42f4cddd00247a9d5a5f58c4d8e","modified":1582125654261},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"466e69a4b4fbdc57f33e60a16b0d87e494385e21","modified":1582125654262},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"03f669356bbaa70144b743f3312178e1981ac3a8","modified":1582125654264},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"c909f6e96373c151dea325bcddfdd8c9522421b6","modified":1582125654265},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"39c4ad0e36b7c1260da98ba345f7bd72a2ac0f2e","modified":1582125654266},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"e015c7d9b84062b60b15b36be3ef11929dd10943","modified":1582125654268},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"2b905ddd5dea8558c3fd95aacad241da6b6800f4","modified":1582125654269},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"f46699a9daa5fef599733cbab35cb75cf7a05444","modified":1582125654270},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"be6683db6a269d83bb0441d7cf74db63a240fa8a","modified":1582125654273},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f331ad02beea8990066d32ad6ec9f859672c3615","modified":1582125654274},{"_id":"themes/next/layout/_partials/post/reward.swig","hash":"f62b801c7999da67b4bdca9c5e373b9b5ed039dc","modified":1582125654274},{"_id":"themes/next/layout/_partials/post/wechat-subscriber.swig","hash":"fb7727e8ec63a58238a7206bf70eb273c8879993","modified":1582125654275},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1582125654277},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"f14e9e8c27af82f1bfe794e252dec0d7e521f503","modified":1582125654278},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1582125654279},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"31245e09ce0465b994cebd94223a531585c4eab4","modified":1582125654280},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"c609097b95eb6127c2784f47f2230e6e6efc0be2","modified":1582125654281},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"54b43d406cf37932e7b60f46814e864d31b1842c","modified":1582125654282},{"_id":"themes/next/layout/_partials/share/likely.swig","hash":"647e8677d1ccfb3f7918dd3ea2ff7078504a845d","modified":1582125654283},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"cf87ab778618a32119ec1c4ac2079a51385b1913","modified":1582125654289},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a62c93f19429f159bcf0c2e533ffc619aa399755","modified":1582125654290},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"3c548934b97cc426544947f7a2ae35c270b5e33f","modified":1582125654291},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7ef07edd2a97a3774229990d2f0a6eefa31bd015","modified":1582125654291},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"828eb9c47f34090c841a2e9a0b3f31b0e4ccf40a","modified":1582125654292},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"66d562b3778dbc839f7c00103bd0099c5d61602a","modified":1582125654296},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"83dd7df11b100bae38c9faab9a478f92149a0315","modified":1582125654296},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"73576c9683d9ad9b124916dc6c660607fe7cc1fa","modified":1582125654297},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"2e1de38f44af00209129d4051b7ae307cb11ad68","modified":1582125654298},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"335005a9f8b36349f0ad0a7beeba6969c55fc7f7","modified":1582125654299},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"53202062267391353d49f269e7eb74eb87d30921","modified":1582125654300},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"8ab040fccba41675bc835973515530af8a51f8bd","modified":1582125654301},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"54d7993ae773573ee103c22802b7e98b193e1a3a","modified":1582125654301},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"623e73bedef067ac24a398ef27c8197295da872d","modified":1582125654302},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"39928f358dd13d9fc1a4641800e57be157ecd815","modified":1582125654303},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"71fb01bcad43bc9410ab19190373b9f7e59215b5","modified":1582125654304},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"d18c87d7839e7407e39acd2998bcc9e0b34611b0","modified":1582125654304},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"a22d1ea29a5ffe46199ab7d108a291a05af8d5b6","modified":1582125654305},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"4cff8bf5c42c62f7f0ac1f0d70f839dae39ba77a","modified":1582125654306},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"bc3fc9d053b3d1fc0cd3918bf9a629a6f38f6414","modified":1582125654311},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"d685df1516cb138d7a83bac5d7878a1e0fa8bc04","modified":1582125654312},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"4e86e1ace90a70bb8862f5e6de9dbe7bfc046bee","modified":1582125654314},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"8b4a94dd80b3bac7c5390c8a7fd377b88c2cb78e","modified":1582125654312},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"9a4923d2aa5182531ea7a7fb9abe824450026208","modified":1582125654315},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"b3818fd0b3028dadf341b6d0b180e1243683de6a","modified":1582125654315},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"1a5d94f5779a2ce13abc886dd78e0617f89c34b9","modified":1582125654316},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"1b72c755101c9dfb85da13df9a0abccf37cd1dd2","modified":1582125654317},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"43a20fa0e9ae2f4254f04813f9c619dd36b49ae5","modified":1582125654319},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"ea1c136f960667a0a13b334db497b9b19c41f629","modified":1582125654320},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"767ba29f258db5d2e5baf875a6f36ac1d44df6a3","modified":1582125654321},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"143ef265c96a8ea2fb93c36c5ffb9c5e940f7693","modified":1582125654328},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"078bd2d5815eb23e8c5f74467dc0042babea00ae","modified":1582125654329},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"d45ca53af17d1d83fd27f8ed0917a72f0060e1a9","modified":1582125654330},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1582125654431},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1582125654429},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"1aabac9e37a8f4451c86d09037b3a1f8b30eaf5e","modified":1582125654434},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"c5513b49daceeac0909ccfc8c9feb27ac4d0ac85","modified":1582125654435},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1582125654464},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"e9b0752f08398709e787546a246baca12b4c557f","modified":1582125654463},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"da7049f3d9a157abe0ecc62611edcf43605ba84d","modified":1582125654466},{"_id":"themes/next/source/js/schemes/muse.js","hash":"ccc0c5cd4ec6f8159c98990ad83f11a5c0b0234c","modified":1582125654496},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"3eea56cc9ce47bb4760930c4c69cebf847a7fbb2","modified":1582125654497},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1582125654507},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1582125654508},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1582125654511},{"_id":"themes/next/source/css/_variables/base.styl","hash":"e37aab667be94576f6145b61a78cfe87836c68b6","modified":1582125654467},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1582125654502},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"13dfba1fc57ef39e7f2bbe15fe73bca1e47880a9","modified":1582125654357},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"698e4d6d894dd3db14fca5695b84bafcc4b1e4aa","modified":1582125654358},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"9fd526db0527c71243f05e18086f937dc67b1c3e","modified":1582125654359},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1582125654359},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"997058180065d986e05df72992cc2cbfd7febd7e","modified":1582125654360},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"a4c6ee546a94fd69e5b7a1e4c054ab8cacb73d2a","modified":1582125654377},{"_id":"themes/next/source/css/_common/components/rainbow.styl","hash":"cfa64bd8ee2ff9f943673e339d69341e76fbf031","modified":1582125654392},{"_id":"themes/next/source/css/_common/components/scrollbar.styl","hash":"afdd21533db18d846e1a2663b1199761b1bd2c1e","modified":1582125654392},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"1a4ac0d119f2126ef8951897338706edce112235","modified":1582125654421},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"35c6fd7eab3779bd9e38b7ba8825ab0c67a1be7a","modified":1582125654424},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"40144394fdfe05d400f39f6763f66f75479a2e34","modified":1582125654423},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"97d39280d8f48ae250bb7d0982b37b066e0461ff","modified":1582125654425},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"fec36a14080104b5862e9f021eab117d87c5f7c5","modified":1582125654426},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1582125654427},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"12d23b0a50d12b687886ae8f1ff2073e7313b914","modified":1582125654428},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"a609ff811f2b2764f5470236fe2fb1f3aa6ccba5","modified":1582125654438},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"8da8416213127595dfc4d2b358639194647e7bd3","modified":1582125654441},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"d0e9065b0dbbc01811259f0597d1790268b4881b","modified":1582125654439},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1582125654441},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"40f266e24af4dedc9497056ab18ebcfda38dd47d","modified":1582125654442},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"06d9d00257abd28414ec0b746f866bf9911cf5ec","modified":1582125654443},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"6aee54cd5a20181e18596565356bd54c66e33823","modified":1582125654444},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"25f05ed8da68d034dce7f06e0f20f6cd55841070","modified":1582125654445},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"04706657af638f2746ae59520e6fc78577c7682c","modified":1582125654450},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"234b44cfd03f9c9e3e179ff5fd698ac876341913","modified":1582125654452},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"157e6915dcf5990566e463acffa71043b2651c07","modified":1582125654451},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"6aee54cd5a20181e18596565356bd54c66e33823","modified":1582125654453},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1582125654454},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"e73d6da74c5755442e831d8fd7d922c5b32bd892","modified":1582125654458},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"b9619c9827f969ca2e2f5878552362a7b858918f","modified":1582125654457},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"5b5e0a02a7bf63de9efcd33a4e482939cce5822d","modified":1582125654460},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"0b3001909f3446843b226030524ea8498d4d8997","modified":1582125654459},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"adb7379f3b9001840eb38b260434e89365771a81","modified":1582125654461},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"0d6f0df798449b710e1e5dbd43d470089b2a3c95","modified":1582125654460},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"2df409df04fdb52d7234876a9f6e502edd4e3929","modified":1582125654361},{"_id":"themes/next/source/css/_common/components/header/github-banner.styl","hash":"a8f4d4b86acaa34c99111b2dde5d0779cc7e0de6","modified":1582125654363},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"c9cfb4b99e1ec8ec9cf075cb761b8f7fa5fe63fd","modified":1582125654364},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1582125654364},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"33200f60bd6a8bbfc66dd49a239bcc75c2f564c1","modified":1582125654365},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"b8647d6140141b0a160607f6353e4d4594cca92e","modified":1582125654366},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"3a0efe849587b34f20d4e260028dc799215b0bb3","modified":1582125654367},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"024e8ff40ca881c6fbf45712897e22f58a3811ab","modified":1582125654368},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"9c1a082e6c1f96187a099c3f4cb5424c0c9fd06e","modified":1582125654369},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1582125654369},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"e5a5f8747fdf2ca960e4e73c081b8952afd62224","modified":1582125654372},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fa1cea6fcc3f552d57cc7d28380a304859139bf6","modified":1582125654372},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1582125654373},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"9a8fb61bd2d184de9d206e62ba8961d1845c5669","modified":1582125654375},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1582125654376},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"c27527cdeb9e3a9f447f7238f442a5dc33fde4e6","modified":1582125654376},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"c97c819a65f6967485184399397601e5133deda6","modified":1582125654376},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1582125654379},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"f3b0d259e991ac86454ae5eac6bc94dc8691d8c9","modified":1582125654380},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"fc94dd09b4245143b452d6cf2fc4c12134d99d6d","modified":1582125654380},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a73346f999b31355075cd58637946a8950cf6f7e","modified":1582125654381},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"b6a241626783d2ac115d683fd59ec283af68e5bb","modified":1582125654383},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d77f85d3af2d7090d84b28ab01c6a49f92eec647","modified":1582125654383},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"13d365ee626c01f17ec664b3f54f51d8b9ee7cf4","modified":1582125654384},{"_id":"themes/next/source/css/_common/components/post/post-reading_progress.styl","hash":"4aad8e36178faaa71a767af0084d578df4c09f73","modified":1582125654385},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ccd0b1309acff0c676fdcc848a8ae2d05f0369ab","modified":1582125654386},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1582125654387},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1582125654387},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"539fc0880b2e035e8316d5d4b423703195c1b7ba","modified":1582125654388},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"c8009fd9598a661b7d23158b5121b6ac266939e9","modified":1582125654389},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"981795aad232c8bd3f52a0ed8720db696d18a234","modified":1582125654390},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"615fca7dff197a2ca3df674cf963ce70b8525985","modified":1582125654391},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"a5484d8436b2b7862faf6e7309a9e7b88cdd0027","modified":1582125654395},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"ab1776c5dc537beabb0ab81a0f04e08bebad070b","modified":1582125654396},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"03a4e75e963e3e7cc393d588b1495a88d52e0e40","modified":1582125654397},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-button.styl","hash":"b36eea093bd4b32056b5de6f370ff57e50b25a49","modified":1582125654397},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"e58bb8b7127aa21e8260493a425ec00fcb25d338","modified":1582125654398},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"7e2ba73073daaea0a18c3d67ff137dd683af7011","modified":1582125654399},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"9204c79c05d620ecd5d411cdf11e27441b6281dc","modified":1582125654400},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"7af79cbbe4013f549799013b9d2146f61eafc85e","modified":1582125654401},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"3cb387fa70017f3c24a1a1884461d29deda54585","modified":1582125654401},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"ed3a2960ebce7396d1893bb8e08c99c7d9259140","modified":1582125654402},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"fde59300ec38868676ff5ed495b9dc9b02d07ffc","modified":1582125654404},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"2d58ad90f148e845bc7023751a7a13260600f8d6","modified":1582125654405},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1582125654406},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"b43421291bf85b589e8d0ec853e238d36ab80631","modified":1582125654407},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"020fac447d7a17c03e2802f0f724ae0738088354","modified":1582125654407},{"_id":"themes/next/source/css/_common/components/tags/pdf.styl","hash":"3baeeb51cfe123e99235ee1816d0e1f6a97c7852","modified":1582125654408},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"54c5398c7bf5b8bd9f38a9ece1dd82a9255f9a30","modified":1582125654409},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"da7a21f5a2f7dcf4c5a4788d7670159ca4132b65","modified":1582125654410},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"4305813408a1cd6aba764a7769b94b081d383d4f","modified":1582125654411},{"_id":"themes/next/source/css/_common/components/third-party/copy-code.styl","hash":"d9c244b1c3a09a7fccd3c3f732e6fb112a8cd565","modified":1582125654412},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"a01484e350ad5fc9b1fdfbfafb2ddd9687ad4d20","modified":1582125654414},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"2fbe52f955da41c7a14eb09918bf86a252e4504f","modified":1582125654415},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"2a1008f1044b450b806adc166754ba9513e68375","modified":1582125654415},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"ed8a12982c0497eeb9d7642781abeb801428f83d","modified":1582125654416},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"6880467b4f6d7b057fb8291aa10966429a0a3bff","modified":1582125654417},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"35dc9f3990fadff3ea038d4e8ac75923219886ed","modified":1582125654418},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"9801977a23268e36c5deefd270423f6f1a0c3bb2","modified":1582125654419},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"7cf42f96ba6b249c75e00dad251ebacf7de61e6c","modified":1582125654420},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1582125654447},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1582125654448},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1582125654455},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1582125654506},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"f14cefc99309934d4103a3aa785e1258d858813f","modified":1582125654382}],"Category":[{"name":"Javascript","_id":"ck7q4ux2z00044wnu66d1ao7q"}],"Data":[],"Page":[{"title":"关于小华","date":"2019-03-31T01:58:03.000Z","type":"about","_content":"\n我，一名在南京慢慢前进的程序员。\n在南京读的大专，专业是机械制造及其自动化，我从未在同行面前提起我的专业，这不是什么优势，也就只有在这里，才想说出口。\n目前（2019-3-31）学的技能很多，前端，后端，移动端，桌面端。。。\n\n常用的技术挺多，vue、react、react native。最近在学习kotlin和flutter。\n\n我总是沉浸在学习新的框架、库和语言。我尝试去以鹰的眼睛来察觉当前生态中正在发生的变化。现在努力去接触这种变化，未来希望能驾驭乃至制造生态中的变化。","source":"about/index.md","raw":"---\ntitle: 关于小华\ndate: 2019-03-31 09:58:03\ntype: \"about\"\n---\n\n我，一名在南京慢慢前进的程序员。\n在南京读的大专，专业是机械制造及其自动化，我从未在同行面前提起我的专业，这不是什么优势，也就只有在这里，才想说出口。\n目前（2019-3-31）学的技能很多，前端，后端，移动端，桌面端。。。\n\n常用的技术挺多，vue、react、react native。最近在学习kotlin和flutter。\n\n我总是沉浸在学习新的框架、库和语言。我尝试去以鹰的眼睛来察觉当前生态中正在发生的变化。现在努力去接触这种变化，未来希望能驾驭乃至制造生态中的变化。","updated":"2020-02-19T15:20:54.101Z","path":"about/index.html","comments":1,"layout":"page","_id":"ck7q4ux2t00014wnu2iho2d3m","content":"<p>我，一名在南京慢慢前进的程序员。<br>在南京读的大专，专业是机械制造及其自动化，我从未在同行面前提起我的专业，这不是什么优势，也就只有在这里，才想说出口。<br>目前（2019-3-31）学的技能很多，前端，后端，移动端，桌面端。。。</p>\n<p>常用的技术挺多，vue、react、react native。最近在学习kotlin和flutter。</p>\n<p>我总是沉浸在学习新的框架、库和语言。我尝试去以鹰的眼睛来察觉当前生态中正在发生的变化。现在努力去接触这种变化，未来希望能驾驭乃至制造生态中的变化。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>我，一名在南京慢慢前进的程序员。<br>在南京读的大专，专业是机械制造及其自动化，我从未在同行面前提起我的专业，这不是什么优势，也就只有在这里，才想说出口。<br>目前（2019-3-31）学的技能很多，前端，后端，移动端，桌面端。。。</p>\n<p>常用的技术挺多，vue、react、react native。最近在学习kotlin和flutter。</p>\n<p>我总是沉浸在学习新的框架、库和语言。我尝试去以鹰的眼睛来察觉当前生态中正在发生的变化。现在努力去接触这种变化，未来希望能驾驭乃至制造生态中的变化。</p>\n"},{"title":"标签","date":"2019-03-31T02:10:36.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2019-03-31 10:10:36\ntype: \"tags\"\nlayout: \"tags\"\n---\n","updated":"2020-02-19T15:20:54.102Z","path":"tags/index.html","comments":1,"_id":"ck7q4ux2w00034wnu92z5hts4","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Ant Design Pro 的一些小技巧","date":"2019-03-20T07:37:04.000Z","_content":"前言：最近公司需要做一个APP的管理后台，之前公司的后台管理系统都是前后不分离的。现在考虑到后端的工作量也挺大的，所以打算前后分离了，前端我们最终决定使用蚂蚁金服开源框架：Ant Design Pro（真香）\n\n\n# Tip1：怎么使用动态路由\n很多公司的后台系统都是有权限控制的，所以会有动态路由这个说法，在Antd-Pro里，使用动态路由还是挺简单的：\n- 找到文件src/models/menu.js\n- 在effects/getMenuData里从后台拉取动态路由，再做上相应的权限控制（对menuData字段进行处理）\n\n# Tip2： Provider和Content\n- [how-does-provider-and-connect-work-in-react](https://stackoverflow.com/questions/48227188/how-does-provider-and-connect-work-in-react)\n- [Context（中文）](https://zh-hans.reactjs.org/docs/context.html)\n- [Higher-Order Components（中文）](https://zh-hans.reactjs.org/docs/higher-order-components.html)\n\n# Tip3：生成动态路由\n每个用户登录进来，都会根据这个人的角色加载动态的菜单和权限，但是前端的路由其实是前端在router.config.js里定义出来的静态路由，所以并不能做出动态路由。\n\n# Tip4：权限控制\n这里有几个概念需要先梳理清楚（用户、角色、权限、菜单）：\n【权限】 依附于 【菜单】 依附于 【角色】 依附于 【用户】\n所以应该有以下的结构：\n- 用户管理 增删改查 分配角色\n- 角色管理 增删改查 分配菜单和权限\n- 菜单管理 增删改查\n- 权限管理 增删改查\n\n备注：权限通常都是都是依附于菜单的，但是也有两者互不联系，单独管理的情况。\n\n\n","source":"_posts/ant-design-pro-tips.md","raw":"---\ntitle: Ant Design Pro 的一些小技巧\ndate: 2019-03-20 15:37:04\ntags: [react, ant-design]\ncategories: [Javascript]\n---\n前言：最近公司需要做一个APP的管理后台，之前公司的后台管理系统都是前后不分离的。现在考虑到后端的工作量也挺大的，所以打算前后分离了，前端我们最终决定使用蚂蚁金服开源框架：Ant Design Pro（真香）\n\n\n# Tip1：怎么使用动态路由\n很多公司的后台系统都是有权限控制的，所以会有动态路由这个说法，在Antd-Pro里，使用动态路由还是挺简单的：\n- 找到文件src/models/menu.js\n- 在effects/getMenuData里从后台拉取动态路由，再做上相应的权限控制（对menuData字段进行处理）\n\n# Tip2： Provider和Content\n- [how-does-provider-and-connect-work-in-react](https://stackoverflow.com/questions/48227188/how-does-provider-and-connect-work-in-react)\n- [Context（中文）](https://zh-hans.reactjs.org/docs/context.html)\n- [Higher-Order Components（中文）](https://zh-hans.reactjs.org/docs/higher-order-components.html)\n\n# Tip3：生成动态路由\n每个用户登录进来，都会根据这个人的角色加载动态的菜单和权限，但是前端的路由其实是前端在router.config.js里定义出来的静态路由，所以并不能做出动态路由。\n\n# Tip4：权限控制\n这里有几个概念需要先梳理清楚（用户、角色、权限、菜单）：\n【权限】 依附于 【菜单】 依附于 【角色】 依附于 【用户】\n所以应该有以下的结构：\n- 用户管理 增删改查 分配角色\n- 角色管理 增删改查 分配菜单和权限\n- 菜单管理 增删改查\n- 权限管理 增删改查\n\n备注：权限通常都是都是依附于菜单的，但是也有两者互不联系，单独管理的情况。\n\n\n","slug":"ant-design-pro-tips","published":1,"updated":"2020-02-19T15:20:54.092Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7q4ux2l00004wnuh5hkv2kx","content":"<p>前言：最近公司需要做一个APP的管理后台，之前公司的后台管理系统都是前后不分离的。现在考虑到后端的工作量也挺大的，所以打算前后分离了，前端我们最终决定使用蚂蚁金服开源框架：Ant Design Pro（真香）</p>\n<h1 id=\"Tip1：怎么使用动态路由\"><a href=\"#Tip1：怎么使用动态路由\" class=\"headerlink\" title=\"Tip1：怎么使用动态路由\"></a>Tip1：怎么使用动态路由</h1><p>很多公司的后台系统都是有权限控制的，所以会有动态路由这个说法，在Antd-Pro里，使用动态路由还是挺简单的：</p>\n<ul>\n<li>找到文件src/models/menu.js</li>\n<li>在effects/getMenuData里从后台拉取动态路由，再做上相应的权限控制（对menuData字段进行处理）</li>\n</ul>\n<h1 id=\"Tip2：-Provider和Content\"><a href=\"#Tip2：-Provider和Content\" class=\"headerlink\" title=\"Tip2： Provider和Content\"></a>Tip2： Provider和Content</h1><ul>\n<li><a href=\"https://stackoverflow.com/questions/48227188/how-does-provider-and-connect-work-in-react\" target=\"_blank\" rel=\"noopener\">how-does-provider-and-connect-work-in-react</a></li>\n<li><a href=\"https://zh-hans.reactjs.org/docs/context.html\" target=\"_blank\" rel=\"noopener\">Context（中文）</a></li>\n<li><a href=\"https://zh-hans.reactjs.org/docs/higher-order-components.html\" target=\"_blank\" rel=\"noopener\">Higher-Order Components（中文）</a></li>\n</ul>\n<h1 id=\"Tip3：生成动态路由\"><a href=\"#Tip3：生成动态路由\" class=\"headerlink\" title=\"Tip3：生成动态路由\"></a>Tip3：生成动态路由</h1><p>每个用户登录进来，都会根据这个人的角色加载动态的菜单和权限，但是前端的路由其实是前端在router.config.js里定义出来的静态路由，所以并不能做出动态路由。</p>\n<h1 id=\"Tip4：权限控制\"><a href=\"#Tip4：权限控制\" class=\"headerlink\" title=\"Tip4：权限控制\"></a>Tip4：权限控制</h1><p>这里有几个概念需要先梳理清楚（用户、角色、权限、菜单）：<br>【权限】 依附于 【菜单】 依附于 【角色】 依附于 【用户】<br>所以应该有以下的结构：</p>\n<ul>\n<li>用户管理 增删改查 分配角色</li>\n<li>角色管理 增删改查 分配菜单和权限</li>\n<li>菜单管理 增删改查</li>\n<li>权限管理 增删改查</li>\n</ul>\n<p>备注：权限通常都是都是依附于菜单的，但是也有两者互不联系，单独管理的情况。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>前言：最近公司需要做一个APP的管理后台，之前公司的后台管理系统都是前后不分离的。现在考虑到后端的工作量也挺大的，所以打算前后分离了，前端我们最终决定使用蚂蚁金服开源框架：Ant Design Pro（真香）</p>\n<h1 id=\"Tip1：怎么使用动态路由\"><a href=\"#Tip1：怎么使用动态路由\" class=\"headerlink\" title=\"Tip1：怎么使用动态路由\"></a>Tip1：怎么使用动态路由</h1><p>很多公司的后台系统都是有权限控制的，所以会有动态路由这个说法，在Antd-Pro里，使用动态路由还是挺简单的：</p>\n<ul>\n<li>找到文件src/models/menu.js</li>\n<li>在effects/getMenuData里从后台拉取动态路由，再做上相应的权限控制（对menuData字段进行处理）</li>\n</ul>\n<h1 id=\"Tip2：-Provider和Content\"><a href=\"#Tip2：-Provider和Content\" class=\"headerlink\" title=\"Tip2： Provider和Content\"></a>Tip2： Provider和Content</h1><ul>\n<li><a href=\"https://stackoverflow.com/questions/48227188/how-does-provider-and-connect-work-in-react\" target=\"_blank\" rel=\"noopener\">how-does-provider-and-connect-work-in-react</a></li>\n<li><a href=\"https://zh-hans.reactjs.org/docs/context.html\" target=\"_blank\" rel=\"noopener\">Context（中文）</a></li>\n<li><a href=\"https://zh-hans.reactjs.org/docs/higher-order-components.html\" target=\"_blank\" rel=\"noopener\">Higher-Order Components（中文）</a></li>\n</ul>\n<h1 id=\"Tip3：生成动态路由\"><a href=\"#Tip3：生成动态路由\" class=\"headerlink\" title=\"Tip3：生成动态路由\"></a>Tip3：生成动态路由</h1><p>每个用户登录进来，都会根据这个人的角色加载动态的菜单和权限，但是前端的路由其实是前端在router.config.js里定义出来的静态路由，所以并不能做出动态路由。</p>\n<h1 id=\"Tip4：权限控制\"><a href=\"#Tip4：权限控制\" class=\"headerlink\" title=\"Tip4：权限控制\"></a>Tip4：权限控制</h1><p>这里有几个概念需要先梳理清楚（用户、角色、权限、菜单）：<br>【权限】 依附于 【菜单】 依附于 【角色】 依附于 【用户】<br>所以应该有以下的结构：</p>\n<ul>\n<li>用户管理 增删改查 分配角色</li>\n<li>角色管理 增删改查 分配菜单和权限</li>\n<li>菜单管理 增删改查</li>\n<li>权限管理 增删改查</li>\n</ul>\n<p>备注：权限通常都是都是依附于菜单的，但是也有两者互不联系，单独管理的情况。</p>\n"},{"title":"JSON.stringify","date":"2019-06-10T07:31:27.000Z","_content":"![](http://qiniu.tbmao.com/jsonlogo.png)\n> - 作者: 小华坚决上王者\n> - 建议阅读时间: 2 min\n> - [掘金地址](https://juejin.im/post/5d0b45866fb9a07ed136db0f)\n\n> JSON.stringify()是个经常使用的前端方法，这个函数可以传入三个参数，这里我安利下第三个参数，专门用来`美化输出`，先看下语法:\n\n```\nJSON.stringify(value[, replacer [, space]])\n```\n\n下面我列举了三个常用的例子，直接上代码\n\n### 普通用法\n``` javascript\nlet obj = {\n  a: 'foo',\n  b: 'bar',\n}\n\nconsole.log(JSON.stringify(obj))\n\n// \"{\"a\":\"foo\",\"b\":\"bar\"}\"\n```\n\n### space传入数字\n``` javascript\nlet obj = {\n  a: 'foo',\n  b: 'bar',\n}\n\nconsole.log(JSON.stringify(obj, null, 2))\n\n/*\n{\n  \"a\": \"foo\",\n  \"b\": \"bar\"\n}\n*/\n```\n\n### space传入字符串\n``` javascript\nlet obj = {\n  a: 'foo',\n  b: 'bar',\n}\n\nconsole.log(JSON.stringify(obj, null, '--'))\n\n/*\n{\n--\"a\": \"foo\",\n--\"b\": \"bar\"\n}\n*/\n```\n\n### 一个典型的应用场景\n在手机上或者没有控制台的时候，想输出某个对象，这时候会用到alert：\n\n``` javascript\nalert(obj);\n```\n效果却是这样的：\n\n![](http://qiniu.tbmao.com/jsonQQ%E6%B5%8F%E8%A7%88%E5%99%A8%E6%88%AA%E5%9B%BE20190620171826.png)\n此时的你：\n\n![](http://qiniu.tbmao.com/jsontimg.jpg)\n\n后来，你使用了JSON.stringify的第三个参数：\n\n``` javascript\nalert(JSON.stringify(obj, null, 2));\n```\n结果自然就很通畅了：\n\n![](http://qiniu.tbmao.com/jsonQQ%E6%B5%8F%E8%A7%88%E5%99%A8%E6%88%AA%E5%9B%BE20190620171906.png)\n\n怎么样，是不是很爽，space传入数字应该可以满足大多数需求，我也推荐大家这么使用。","source":"_posts/JSON-stringify.md","raw":"---\ntitle: JSON.stringify\ndate: 2019-06-10 15:31:27\ntags: javascript\n---\n![](http://qiniu.tbmao.com/jsonlogo.png)\n> - 作者: 小华坚决上王者\n> - 建议阅读时间: 2 min\n> - [掘金地址](https://juejin.im/post/5d0b45866fb9a07ed136db0f)\n\n> JSON.stringify()是个经常使用的前端方法，这个函数可以传入三个参数，这里我安利下第三个参数，专门用来`美化输出`，先看下语法:\n\n```\nJSON.stringify(value[, replacer [, space]])\n```\n\n下面我列举了三个常用的例子，直接上代码\n\n### 普通用法\n``` javascript\nlet obj = {\n  a: 'foo',\n  b: 'bar',\n}\n\nconsole.log(JSON.stringify(obj))\n\n// \"{\"a\":\"foo\",\"b\":\"bar\"}\"\n```\n\n### space传入数字\n``` javascript\nlet obj = {\n  a: 'foo',\n  b: 'bar',\n}\n\nconsole.log(JSON.stringify(obj, null, 2))\n\n/*\n{\n  \"a\": \"foo\",\n  \"b\": \"bar\"\n}\n*/\n```\n\n### space传入字符串\n``` javascript\nlet obj = {\n  a: 'foo',\n  b: 'bar',\n}\n\nconsole.log(JSON.stringify(obj, null, '--'))\n\n/*\n{\n--\"a\": \"foo\",\n--\"b\": \"bar\"\n}\n*/\n```\n\n### 一个典型的应用场景\n在手机上或者没有控制台的时候，想输出某个对象，这时候会用到alert：\n\n``` javascript\nalert(obj);\n```\n效果却是这样的：\n\n![](http://qiniu.tbmao.com/jsonQQ%E6%B5%8F%E8%A7%88%E5%99%A8%E6%88%AA%E5%9B%BE20190620171826.png)\n此时的你：\n\n![](http://qiniu.tbmao.com/jsontimg.jpg)\n\n后来，你使用了JSON.stringify的第三个参数：\n\n``` javascript\nalert(JSON.stringify(obj, null, 2));\n```\n结果自然就很通畅了：\n\n![](http://qiniu.tbmao.com/jsonQQ%E6%B5%8F%E8%A7%88%E5%99%A8%E6%88%AA%E5%9B%BE20190620171906.png)\n\n怎么样，是不是很爽，space传入数字应该可以满足大多数需求，我也推荐大家这么使用。","slug":"JSON-stringify","published":1,"updated":"2020-02-19T15:20:54.091Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7q4ux2u00024wnu8db0lmgs","content":"<p><img src=\"http://qiniu.tbmao.com/jsonlogo.png\" alt></p>\n<blockquote>\n<ul>\n<li>作者: 小华坚决上王者</li>\n<li>建议阅读时间: 2 min</li>\n<li><a href=\"https://juejin.im/post/5d0b45866fb9a07ed136db0f\" target=\"_blank\" rel=\"noopener\">掘金地址</a></li>\n</ul>\n</blockquote>\n<blockquote>\n<p>JSON.stringify()是个经常使用的前端方法，这个函数可以传入三个参数，这里我安利下第三个参数，专门用来<code>美化输出</code>，先看下语法:</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JSON.stringify(value[, replacer [, space]])</span><br></pre></td></tr></table></figure>\n<p>下面我列举了三个常用的例子，直接上代码</p>\n<h3 id=\"普通用法\"><a href=\"#普通用法\" class=\"headerlink\" title=\"普通用法\"></a>普通用法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">  a: <span class=\"string\">'foo'</span>,</span><br><span class=\"line\">  b: <span class=\"string\">'bar'</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">JSON</span>.stringify(obj))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// \"&#123;\"a\":\"foo\",\"b\":\"bar\"&#125;\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"space传入数字\"><a href=\"#space传入数字\" class=\"headerlink\" title=\"space传入数字\"></a>space传入数字</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">  a: <span class=\"string\">'foo'</span>,</span><br><span class=\"line\">  b: <span class=\"string\">'bar'</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">JSON</span>.stringify(obj, <span class=\"literal\">null</span>, <span class=\"number\">2</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">&#123;</span></span><br><span class=\"line\"><span class=\"comment\">  \"a\": \"foo\",</span></span><br><span class=\"line\"><span class=\"comment\">  \"b\": \"bar\"</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"space传入字符串\"><a href=\"#space传入字符串\" class=\"headerlink\" title=\"space传入字符串\"></a>space传入字符串</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">  a: <span class=\"string\">'foo'</span>,</span><br><span class=\"line\">  b: <span class=\"string\">'bar'</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">JSON</span>.stringify(obj, <span class=\"literal\">null</span>, <span class=\"string\">'--'</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">&#123;</span></span><br><span class=\"line\"><span class=\"comment\">--\"a\": \"foo\",</span></span><br><span class=\"line\"><span class=\"comment\">--\"b\": \"bar\"</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"一个典型的应用场景\"><a href=\"#一个典型的应用场景\" class=\"headerlink\" title=\"一个典型的应用场景\"></a>一个典型的应用场景</h3><p>在手机上或者没有控制台的时候，想输出某个对象，这时候会用到alert：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alert(obj);</span><br></pre></td></tr></table></figure>\n<p>效果却是这样的：</p>\n<p><img src=\"http://qiniu.tbmao.com/jsonQQ%E6%B5%8F%E8%A7%88%E5%99%A8%E6%88%AA%E5%9B%BE20190620171826.png\" alt><br>此时的你：</p>\n<p><img src=\"http://qiniu.tbmao.com/jsontimg.jpg\" alt></p>\n<p>后来，你使用了JSON.stringify的第三个参数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alert(<span class=\"built_in\">JSON</span>.stringify(obj, <span class=\"literal\">null</span>, <span class=\"number\">2</span>));</span><br></pre></td></tr></table></figure>\n<p>结果自然就很通畅了：</p>\n<p><img src=\"http://qiniu.tbmao.com/jsonQQ%E6%B5%8F%E8%A7%88%E5%99%A8%E6%88%AA%E5%9B%BE20190620171906.png\" alt></p>\n<p>怎么样，是不是很爽，space传入数字应该可以满足大多数需求，我也推荐大家这么使用。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"http://qiniu.tbmao.com/jsonlogo.png\" alt></p>\n<blockquote>\n<ul>\n<li>作者: 小华坚决上王者</li>\n<li>建议阅读时间: 2 min</li>\n<li><a href=\"https://juejin.im/post/5d0b45866fb9a07ed136db0f\" target=\"_blank\" rel=\"noopener\">掘金地址</a></li>\n</ul>\n</blockquote>\n<blockquote>\n<p>JSON.stringify()是个经常使用的前端方法，这个函数可以传入三个参数，这里我安利下第三个参数，专门用来<code>美化输出</code>，先看下语法:</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JSON.stringify(value[, replacer [, space]])</span><br></pre></td></tr></table></figure>\n<p>下面我列举了三个常用的例子，直接上代码</p>\n<h3 id=\"普通用法\"><a href=\"#普通用法\" class=\"headerlink\" title=\"普通用法\"></a>普通用法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">  a: <span class=\"string\">'foo'</span>,</span><br><span class=\"line\">  b: <span class=\"string\">'bar'</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">JSON</span>.stringify(obj))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// \"&#123;\"a\":\"foo\",\"b\":\"bar\"&#125;\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"space传入数字\"><a href=\"#space传入数字\" class=\"headerlink\" title=\"space传入数字\"></a>space传入数字</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">  a: <span class=\"string\">'foo'</span>,</span><br><span class=\"line\">  b: <span class=\"string\">'bar'</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">JSON</span>.stringify(obj, <span class=\"literal\">null</span>, <span class=\"number\">2</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">&#123;</span></span><br><span class=\"line\"><span class=\"comment\">  \"a\": \"foo\",</span></span><br><span class=\"line\"><span class=\"comment\">  \"b\": \"bar\"</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"space传入字符串\"><a href=\"#space传入字符串\" class=\"headerlink\" title=\"space传入字符串\"></a>space传入字符串</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">  a: <span class=\"string\">'foo'</span>,</span><br><span class=\"line\">  b: <span class=\"string\">'bar'</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">JSON</span>.stringify(obj, <span class=\"literal\">null</span>, <span class=\"string\">'--'</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">&#123;</span></span><br><span class=\"line\"><span class=\"comment\">--\"a\": \"foo\",</span></span><br><span class=\"line\"><span class=\"comment\">--\"b\": \"bar\"</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"一个典型的应用场景\"><a href=\"#一个典型的应用场景\" class=\"headerlink\" title=\"一个典型的应用场景\"></a>一个典型的应用场景</h3><p>在手机上或者没有控制台的时候，想输出某个对象，这时候会用到alert：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alert(obj);</span><br></pre></td></tr></table></figure>\n<p>效果却是这样的：</p>\n<p><img src=\"http://qiniu.tbmao.com/jsonQQ%E6%B5%8F%E8%A7%88%E5%99%A8%E6%88%AA%E5%9B%BE20190620171826.png\" alt><br>此时的你：</p>\n<p><img src=\"http://qiniu.tbmao.com/jsontimg.jpg\" alt></p>\n<p>后来，你使用了JSON.stringify的第三个参数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alert(<span class=\"built_in\">JSON</span>.stringify(obj, <span class=\"literal\">null</span>, <span class=\"number\">2</span>));</span><br></pre></td></tr></table></figure>\n<p>结果自然就很通畅了：</p>\n<p><img src=\"http://qiniu.tbmao.com/jsonQQ%E6%B5%8F%E8%A7%88%E5%99%A8%E6%88%AA%E5%9B%BE20190620171906.png\" alt></p>\n<p>怎么样，是不是很爽，space传入数字应该可以满足大多数需求，我也推荐大家这么使用。</p>\n"},{"title":"VS Code的常用功能","date":"2019-09-09T01:50:23.000Z","_content":"\nMicrosoft在2015年4月30日Build 开发者大会上正式宣布了 Visual Studio Code 项目：一个运行于 Mac OS X、Windows和 Linux 之上的，针对于编写现代 Web 和云应用的跨平台源代码编辑器。最近的VS Code实在是太火爆了，是个人都在用\n\n\n### 设置中文\n- 安装Chinese (Simplified) Language Pack for Visual Studio Code这个插件即可\n- 或者选择：查看->命令面板(快捷键`Ctrl+Shift+P`)，输入`Configure Display Language`也可以进行语言的设置\n\n### 缩放外观\n- 查看->外观->放大\n- 查看->外观->缩小\n- 快捷键 `Ctrl+=`或者`Ctrl+-`(Ctrl+小键盘0可以重置)\n\n### 多光标\n- `Alt+左击`，即可实现多光标。当你想在多个不同位置录入或者编辑文本时，这个功能很有效率，屡试不爽\n- Ctrl+Alt+上下方向键\n\n### 迷你地图\n当文件很长时，使用迷你地图功能可以很快地定位代码，这个功能和sublime的迷你地图一样，打开迷你地图的方式是：查看->显示迷你地图\n\n### 切换主题\nVS Code内置了十来款主题，不论是深色还是浅色，同时支持下载安装其他主题。有时候换个主题换种心情去编码也是很不错的\n文件->首选项->颜色主题（Ctrl+K Ctrl+T）\n![](http://qiniu.tbmao.com/vschangetheme.jpg)\n\n### 修改文字大小\n上文提到的缩放外观是针对整个VS Code而言，假如现在只是想修改文字的大小，可以到文件->首选项->设置，中自定义文字的大小\n![](http://qiniu.tbmao.com/vschangefontsize.jpg)\n\n### 常用的编辑操作\n- 撤销 Ctrl+Z\n- 恢复 Ctrl+Y\n- 剪切 Ctrl+X (删除某行也可以)\n- 复制 Ctrl+C\n- 粘贴 Ctrl+V\n- 查找 Ctrl+F (高级用法可以使用正则)\n- 替换 Ctrl+H (高级用法可以使用正则)\n\n### 常用的选择操作\n- 全选 Ctrl+A\n- 向上复制 Shift+Alt+向上\n- 向下复制 Shift+Alt+向下\n- 向上移动 Alt+向上\n- 向下移动 Alt+向下\n\n### 杂\n- 跳转到某行 Ctrl+G\n- 全屏模式 F11\n- 删除行 Ctrl+Shift+K\n\n### 总结\nVS Code非常的强大，支持的语言也是非常的广泛，日常中的小技巧需要不断的积累才能非常高效的使用VS Code.","source":"_posts/VS-Code-tips.md","raw":"---\ntitle: VS Code的常用功能\ndate: 2019-09-09 09:50:23\ntags: 工具\n---\n\nMicrosoft在2015年4月30日Build 开发者大会上正式宣布了 Visual Studio Code 项目：一个运行于 Mac OS X、Windows和 Linux 之上的，针对于编写现代 Web 和云应用的跨平台源代码编辑器。最近的VS Code实在是太火爆了，是个人都在用\n\n\n### 设置中文\n- 安装Chinese (Simplified) Language Pack for Visual Studio Code这个插件即可\n- 或者选择：查看->命令面板(快捷键`Ctrl+Shift+P`)，输入`Configure Display Language`也可以进行语言的设置\n\n### 缩放外观\n- 查看->外观->放大\n- 查看->外观->缩小\n- 快捷键 `Ctrl+=`或者`Ctrl+-`(Ctrl+小键盘0可以重置)\n\n### 多光标\n- `Alt+左击`，即可实现多光标。当你想在多个不同位置录入或者编辑文本时，这个功能很有效率，屡试不爽\n- Ctrl+Alt+上下方向键\n\n### 迷你地图\n当文件很长时，使用迷你地图功能可以很快地定位代码，这个功能和sublime的迷你地图一样，打开迷你地图的方式是：查看->显示迷你地图\n\n### 切换主题\nVS Code内置了十来款主题，不论是深色还是浅色，同时支持下载安装其他主题。有时候换个主题换种心情去编码也是很不错的\n文件->首选项->颜色主题（Ctrl+K Ctrl+T）\n![](http://qiniu.tbmao.com/vschangetheme.jpg)\n\n### 修改文字大小\n上文提到的缩放外观是针对整个VS Code而言，假如现在只是想修改文字的大小，可以到文件->首选项->设置，中自定义文字的大小\n![](http://qiniu.tbmao.com/vschangefontsize.jpg)\n\n### 常用的编辑操作\n- 撤销 Ctrl+Z\n- 恢复 Ctrl+Y\n- 剪切 Ctrl+X (删除某行也可以)\n- 复制 Ctrl+C\n- 粘贴 Ctrl+V\n- 查找 Ctrl+F (高级用法可以使用正则)\n- 替换 Ctrl+H (高级用法可以使用正则)\n\n### 常用的选择操作\n- 全选 Ctrl+A\n- 向上复制 Shift+Alt+向上\n- 向下复制 Shift+Alt+向下\n- 向上移动 Alt+向上\n- 向下移动 Alt+向下\n\n### 杂\n- 跳转到某行 Ctrl+G\n- 全屏模式 F11\n- 删除行 Ctrl+Shift+K\n\n### 总结\nVS Code非常的强大，支持的语言也是非常的广泛，日常中的小技巧需要不断的积累才能非常高效的使用VS Code.","slug":"VS-Code-tips","published":1,"updated":"2020-02-19T15:20:54.092Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7q4ux3500064wnuq84otwr7","content":"<p>Microsoft在2015年4月30日Build 开发者大会上正式宣布了 Visual Studio Code 项目：一个运行于 Mac OS X、Windows和 Linux 之上的，针对于编写现代 Web 和云应用的跨平台源代码编辑器。最近的VS Code实在是太火爆了，是个人都在用</p>\n<h3 id=\"设置中文\"><a href=\"#设置中文\" class=\"headerlink\" title=\"设置中文\"></a>设置中文</h3><ul>\n<li>安装Chinese (Simplified) Language Pack for Visual Studio Code这个插件即可</li>\n<li>或者选择：查看-&gt;命令面板(快捷键<code>Ctrl+Shift+P</code>)，输入<code>Configure Display Language</code>也可以进行语言的设置</li>\n</ul>\n<h3 id=\"缩放外观\"><a href=\"#缩放外观\" class=\"headerlink\" title=\"缩放外观\"></a>缩放外观</h3><ul>\n<li>查看-&gt;外观-&gt;放大</li>\n<li>查看-&gt;外观-&gt;缩小</li>\n<li>快捷键 <code>Ctrl+=</code>或者<code>Ctrl+-</code>(Ctrl+小键盘0可以重置)</li>\n</ul>\n<h3 id=\"多光标\"><a href=\"#多光标\" class=\"headerlink\" title=\"多光标\"></a>多光标</h3><ul>\n<li><code>Alt+左击</code>，即可实现多光标。当你想在多个不同位置录入或者编辑文本时，这个功能很有效率，屡试不爽</li>\n<li>Ctrl+Alt+上下方向键</li>\n</ul>\n<h3 id=\"迷你地图\"><a href=\"#迷你地图\" class=\"headerlink\" title=\"迷你地图\"></a>迷你地图</h3><p>当文件很长时，使用迷你地图功能可以很快地定位代码，这个功能和sublime的迷你地图一样，打开迷你地图的方式是：查看-&gt;显示迷你地图</p>\n<h3 id=\"切换主题\"><a href=\"#切换主题\" class=\"headerlink\" title=\"切换主题\"></a>切换主题</h3><p>VS Code内置了十来款主题，不论是深色还是浅色，同时支持下载安装其他主题。有时候换个主题换种心情去编码也是很不错的<br>文件-&gt;首选项-&gt;颜色主题（Ctrl+K Ctrl+T）<br><img src=\"http://qiniu.tbmao.com/vschangetheme.jpg\" alt></p>\n<h3 id=\"修改文字大小\"><a href=\"#修改文字大小\" class=\"headerlink\" title=\"修改文字大小\"></a>修改文字大小</h3><p>上文提到的缩放外观是针对整个VS Code而言，假如现在只是想修改文字的大小，可以到文件-&gt;首选项-&gt;设置，中自定义文字的大小<br><img src=\"http://qiniu.tbmao.com/vschangefontsize.jpg\" alt></p>\n<h3 id=\"常用的编辑操作\"><a href=\"#常用的编辑操作\" class=\"headerlink\" title=\"常用的编辑操作\"></a>常用的编辑操作</h3><ul>\n<li>撤销 Ctrl+Z</li>\n<li>恢复 Ctrl+Y</li>\n<li>剪切 Ctrl+X (删除某行也可以)</li>\n<li>复制 Ctrl+C</li>\n<li>粘贴 Ctrl+V</li>\n<li>查找 Ctrl+F (高级用法可以使用正则)</li>\n<li>替换 Ctrl+H (高级用法可以使用正则)</li>\n</ul>\n<h3 id=\"常用的选择操作\"><a href=\"#常用的选择操作\" class=\"headerlink\" title=\"常用的选择操作\"></a>常用的选择操作</h3><ul>\n<li>全选 Ctrl+A</li>\n<li>向上复制 Shift+Alt+向上</li>\n<li>向下复制 Shift+Alt+向下</li>\n<li>向上移动 Alt+向上</li>\n<li>向下移动 Alt+向下</li>\n</ul>\n<h3 id=\"杂\"><a href=\"#杂\" class=\"headerlink\" title=\"杂\"></a>杂</h3><ul>\n<li>跳转到某行 Ctrl+G</li>\n<li>全屏模式 F11</li>\n<li>删除行 Ctrl+Shift+K</li>\n</ul>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>VS Code非常的强大，支持的语言也是非常的广泛，日常中的小技巧需要不断的积累才能非常高效的使用VS Code.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Microsoft在2015年4月30日Build 开发者大会上正式宣布了 Visual Studio Code 项目：一个运行于 Mac OS X、Windows和 Linux 之上的，针对于编写现代 Web 和云应用的跨平台源代码编辑器。最近的VS Code实在是太火爆了，是个人都在用</p>\n<h3 id=\"设置中文\"><a href=\"#设置中文\" class=\"headerlink\" title=\"设置中文\"></a>设置中文</h3><ul>\n<li>安装Chinese (Simplified) Language Pack for Visual Studio Code这个插件即可</li>\n<li>或者选择：查看-&gt;命令面板(快捷键<code>Ctrl+Shift+P</code>)，输入<code>Configure Display Language</code>也可以进行语言的设置</li>\n</ul>\n<h3 id=\"缩放外观\"><a href=\"#缩放外观\" class=\"headerlink\" title=\"缩放外观\"></a>缩放外观</h3><ul>\n<li>查看-&gt;外观-&gt;放大</li>\n<li>查看-&gt;外观-&gt;缩小</li>\n<li>快捷键 <code>Ctrl+=</code>或者<code>Ctrl+-</code>(Ctrl+小键盘0可以重置)</li>\n</ul>\n<h3 id=\"多光标\"><a href=\"#多光标\" class=\"headerlink\" title=\"多光标\"></a>多光标</h3><ul>\n<li><code>Alt+左击</code>，即可实现多光标。当你想在多个不同位置录入或者编辑文本时，这个功能很有效率，屡试不爽</li>\n<li>Ctrl+Alt+上下方向键</li>\n</ul>\n<h3 id=\"迷你地图\"><a href=\"#迷你地图\" class=\"headerlink\" title=\"迷你地图\"></a>迷你地图</h3><p>当文件很长时，使用迷你地图功能可以很快地定位代码，这个功能和sublime的迷你地图一样，打开迷你地图的方式是：查看-&gt;显示迷你地图</p>\n<h3 id=\"切换主题\"><a href=\"#切换主题\" class=\"headerlink\" title=\"切换主题\"></a>切换主题</h3><p>VS Code内置了十来款主题，不论是深色还是浅色，同时支持下载安装其他主题。有时候换个主题换种心情去编码也是很不错的<br>文件-&gt;首选项-&gt;颜色主题（Ctrl+K Ctrl+T）<br><img src=\"http://qiniu.tbmao.com/vschangetheme.jpg\" alt></p>\n<h3 id=\"修改文字大小\"><a href=\"#修改文字大小\" class=\"headerlink\" title=\"修改文字大小\"></a>修改文字大小</h3><p>上文提到的缩放外观是针对整个VS Code而言，假如现在只是想修改文字的大小，可以到文件-&gt;首选项-&gt;设置，中自定义文字的大小<br><img src=\"http://qiniu.tbmao.com/vschangefontsize.jpg\" alt></p>\n<h3 id=\"常用的编辑操作\"><a href=\"#常用的编辑操作\" class=\"headerlink\" title=\"常用的编辑操作\"></a>常用的编辑操作</h3><ul>\n<li>撤销 Ctrl+Z</li>\n<li>恢复 Ctrl+Y</li>\n<li>剪切 Ctrl+X (删除某行也可以)</li>\n<li>复制 Ctrl+C</li>\n<li>粘贴 Ctrl+V</li>\n<li>查找 Ctrl+F (高级用法可以使用正则)</li>\n<li>替换 Ctrl+H (高级用法可以使用正则)</li>\n</ul>\n<h3 id=\"常用的选择操作\"><a href=\"#常用的选择操作\" class=\"headerlink\" title=\"常用的选择操作\"></a>常用的选择操作</h3><ul>\n<li>全选 Ctrl+A</li>\n<li>向上复制 Shift+Alt+向上</li>\n<li>向下复制 Shift+Alt+向下</li>\n<li>向上移动 Alt+向上</li>\n<li>向下移动 Alt+向下</li>\n</ul>\n<h3 id=\"杂\"><a href=\"#杂\" class=\"headerlink\" title=\"杂\"></a>杂</h3><ul>\n<li>跳转到某行 Ctrl+G</li>\n<li>全屏模式 F11</li>\n<li>删除行 Ctrl+Shift+K</li>\n</ul>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>VS Code非常的强大，支持的语言也是非常的广泛，日常中的小技巧需要不断的积累才能非常高效的使用VS Code.</p>\n"},{"title":"炒鸡好用的浏览器插件","date":"2019-03-27T02:03:31.000Z","_content":"\n作为开发工程师或者经常使用浏览器的人儿，很有必要知道一些功能很强劲的浏览器插件，工作效率能被大大的提升！\n\n## Console Importer\n 介绍：在浏览器的控制台里就能很轻松的导入js和css，假如哪天你想试用下lodash，你可以直接在命令行中输入以下代码。\n 用法：$i('lodash')，然后就可以使用lodash了\n\n ## Stream Video Downloader\n 介绍：一个超级好用的视频下载插件。有时候你在网页里看到不错的视频想下载下来，但是网页不提供下载功能的时候，是不是很悲伤？有个这个以后，想下什么下什么，优酷的视频直接下。用的时候一定要低调哦[机智]\n\n## Google 翻译\n介绍：喜欢好英文文档的同学，看过来，划词翻译，妈妈再也不用担心我有点单词不认识了\n\n## Adblock Plus\n介绍：有时候访问一个网站，发现网站给你提供的内容确实不错，就是有的区块上会展示讨厌的广告，这时候就该Adblock Plus上场了，可以屏蔽任何广告，或者是你不想看到的任何东西。Adblock Plus 是拥有超过 5 亿次下载的全球最受欢迎的广告拦截软件之一。\n\n## Octotree\n介绍：在github或者码云上看代码时，你还在为了不能看到层级菜单而烦恼吗？Octotree给你展示当前仓库了层级结构，可以展开和折叠，相当的完美\n\n## 掘金\n介绍：一个帮助开发者成长的社区\n\n## FireShort\n介绍：有时候遇到对整个网站截图的需求，这个插件可以胜任\n","source":"_posts/extensions-for-chrome.md","raw":"---\ntitle: 炒鸡好用的浏览器插件\ndate: 2019-03-27 10:03:31\ntags:\n    - 插件\n    - 浏览器\n    - Chrome\n---\n\n作为开发工程师或者经常使用浏览器的人儿，很有必要知道一些功能很强劲的浏览器插件，工作效率能被大大的提升！\n\n## Console Importer\n 介绍：在浏览器的控制台里就能很轻松的导入js和css，假如哪天你想试用下lodash，你可以直接在命令行中输入以下代码。\n 用法：$i('lodash')，然后就可以使用lodash了\n\n ## Stream Video Downloader\n 介绍：一个超级好用的视频下载插件。有时候你在网页里看到不错的视频想下载下来，但是网页不提供下载功能的时候，是不是很悲伤？有个这个以后，想下什么下什么，优酷的视频直接下。用的时候一定要低调哦[机智]\n\n## Google 翻译\n介绍：喜欢好英文文档的同学，看过来，划词翻译，妈妈再也不用担心我有点单词不认识了\n\n## Adblock Plus\n介绍：有时候访问一个网站，发现网站给你提供的内容确实不错，就是有的区块上会展示讨厌的广告，这时候就该Adblock Plus上场了，可以屏蔽任何广告，或者是你不想看到的任何东西。Adblock Plus 是拥有超过 5 亿次下载的全球最受欢迎的广告拦截软件之一。\n\n## Octotree\n介绍：在github或者码云上看代码时，你还在为了不能看到层级菜单而烦恼吗？Octotree给你展示当前仓库了层级结构，可以展开和折叠，相当的完美\n\n## 掘金\n介绍：一个帮助开发者成长的社区\n\n## FireShort\n介绍：有时候遇到对整个网站截图的需求，这个插件可以胜任\n","slug":"extensions-for-chrome","published":1,"updated":"2020-02-19T15:20:54.093Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7q4ux3800074wnu2qo9iisb","content":"<p>作为开发工程师或者经常使用浏览器的人儿，很有必要知道一些功能很强劲的浏览器插件，工作效率能被大大的提升！</p>\n<h2 id=\"Console-Importer\"><a href=\"#Console-Importer\" class=\"headerlink\" title=\"Console Importer\"></a>Console Importer</h2><p> 介绍：在浏览器的控制台里就能很轻松的导入js和css，假如哪天你想试用下lodash，你可以直接在命令行中输入以下代码。<br> 用法：$i(‘lodash’)，然后就可以使用lodash了</p>\n<h2 id=\"Stream-Video-Downloader\"><a href=\"#Stream-Video-Downloader\" class=\"headerlink\" title=\"Stream Video Downloader\"></a>Stream Video Downloader</h2><p> 介绍：一个超级好用的视频下载插件。有时候你在网页里看到不错的视频想下载下来，但是网页不提供下载功能的时候，是不是很悲伤？有个这个以后，想下什么下什么，优酷的视频直接下。用的时候一定要低调哦[机智]</p>\n<h2 id=\"Google-翻译\"><a href=\"#Google-翻译\" class=\"headerlink\" title=\"Google 翻译\"></a>Google 翻译</h2><p>介绍：喜欢好英文文档的同学，看过来，划词翻译，妈妈再也不用担心我有点单词不认识了</p>\n<h2 id=\"Adblock-Plus\"><a href=\"#Adblock-Plus\" class=\"headerlink\" title=\"Adblock Plus\"></a>Adblock Plus</h2><p>介绍：有时候访问一个网站，发现网站给你提供的内容确实不错，就是有的区块上会展示讨厌的广告，这时候就该Adblock Plus上场了，可以屏蔽任何广告，或者是你不想看到的任何东西。Adblock Plus 是拥有超过 5 亿次下载的全球最受欢迎的广告拦截软件之一。</p>\n<h2 id=\"Octotree\"><a href=\"#Octotree\" class=\"headerlink\" title=\"Octotree\"></a>Octotree</h2><p>介绍：在github或者码云上看代码时，你还在为了不能看到层级菜单而烦恼吗？Octotree给你展示当前仓库了层级结构，可以展开和折叠，相当的完美</p>\n<h2 id=\"掘金\"><a href=\"#掘金\" class=\"headerlink\" title=\"掘金\"></a>掘金</h2><p>介绍：一个帮助开发者成长的社区</p>\n<h2 id=\"FireShort\"><a href=\"#FireShort\" class=\"headerlink\" title=\"FireShort\"></a>FireShort</h2><p>介绍：有时候遇到对整个网站截图的需求，这个插件可以胜任</p>\n","site":{"data":{}},"excerpt":"","more":"<p>作为开发工程师或者经常使用浏览器的人儿，很有必要知道一些功能很强劲的浏览器插件，工作效率能被大大的提升！</p>\n<h2 id=\"Console-Importer\"><a href=\"#Console-Importer\" class=\"headerlink\" title=\"Console Importer\"></a>Console Importer</h2><p> 介绍：在浏览器的控制台里就能很轻松的导入js和css，假如哪天你想试用下lodash，你可以直接在命令行中输入以下代码。<br> 用法：$i(‘lodash’)，然后就可以使用lodash了</p>\n<h2 id=\"Stream-Video-Downloader\"><a href=\"#Stream-Video-Downloader\" class=\"headerlink\" title=\"Stream Video Downloader\"></a>Stream Video Downloader</h2><p> 介绍：一个超级好用的视频下载插件。有时候你在网页里看到不错的视频想下载下来，但是网页不提供下载功能的时候，是不是很悲伤？有个这个以后，想下什么下什么，优酷的视频直接下。用的时候一定要低调哦[机智]</p>\n<h2 id=\"Google-翻译\"><a href=\"#Google-翻译\" class=\"headerlink\" title=\"Google 翻译\"></a>Google 翻译</h2><p>介绍：喜欢好英文文档的同学，看过来，划词翻译，妈妈再也不用担心我有点单词不认识了</p>\n<h2 id=\"Adblock-Plus\"><a href=\"#Adblock-Plus\" class=\"headerlink\" title=\"Adblock Plus\"></a>Adblock Plus</h2><p>介绍：有时候访问一个网站，发现网站给你提供的内容确实不错，就是有的区块上会展示讨厌的广告，这时候就该Adblock Plus上场了，可以屏蔽任何广告，或者是你不想看到的任何东西。Adblock Plus 是拥有超过 5 亿次下载的全球最受欢迎的广告拦截软件之一。</p>\n<h2 id=\"Octotree\"><a href=\"#Octotree\" class=\"headerlink\" title=\"Octotree\"></a>Octotree</h2><p>介绍：在github或者码云上看代码时，你还在为了不能看到层级菜单而烦恼吗？Octotree给你展示当前仓库了层级结构，可以展开和折叠，相当的完美</p>\n<h2 id=\"掘金\"><a href=\"#掘金\" class=\"headerlink\" title=\"掘金\"></a>掘金</h2><p>介绍：一个帮助开发者成长的社区</p>\n<h2 id=\"FireShort\"><a href=\"#FireShort\" class=\"headerlink\" title=\"FireShort\"></a>FireShort</h2><p>介绍：有时候遇到对整个网站截图的需求，这个插件可以胜任</p>\n"},{"title":"使用flutter打造炫酷的list","date":"2019-06-13T05:04:40.000Z","_content":"\n使用了flutter一段时间，越来越喜欢flutter了，flutter比我们想象中的强大。这篇文章介绍了怎么使用flutter来展示一个很漂亮的list，先看下效果图。\n\n<img src=\"http://qiniu.tbmao.com/awesomeList.gif\">\n\n样式还是很漂亮的，下面我们一步一步完成这个小项目。\n### 开发前准备\n- 我们会用到加载网络图片FadeInImage这么个widget，需要一个loading的icon，所以需要在pubspec.yaml里配置下静态资源，只有配置过的静态资源才可以在项目中使用\n``` yaml\nassets:\n   - assets/images/\n```\n- 需要mock一些假数据和一些常用的常量，所以专门建了个constant.dart来管理\n``` dart\n    colors  # 颜色\n    data  # list的数据\n    # ...\n```\n\n### appBar部分\n- appBar需要透明的背景这样才能将后面的图片展示出来，看起来很像沉浸式。\n- 需要将elevations设置为0，这样就可以取消安卓特有的阴影效果，下面是代码:\n``` dart\nScaffold(\n    appBar: AppBar(\n    backgroundColor: Colors.transparent,\n    elevation: 0,\n    title: Text(\n        'flutter awesome list',\n        style: TextStyle(\n        color: Colors.white,\n        ),\n    ),\n    ),\n    body: HomeBody(),\n);\n```\n\n### Banner部分\n- 我们需要使用Transform.translate()这个weidget来将Banner部分向上移动，让appBar全部展示在banner上面，这里给的offset为offset: Offset(0, -56)，56为appBar的高度\n- 下面的斜切造型需要使用ClipPath()来完成，用法有点像canvas，代码如下：\n``` dart\nclass MyClipper extends CustomClipper<Path> {\n  @override\n  Path getClip(Size size) {\n    Path p = Path();\n    p.lineTo(size.width, 0.0);\n    p.lineTo(size.width, size.height / 4.75);\n    p.lineTo(0.0, size.height / 3.75);\n    p.close();\n    return p;\n  }\n\n  @override\n  bool shouldReclip(CustomClipper oldClipper) {\n    return true;\n  }\n}\n```\n- 用户信息的展示用的widget是ListTile和CircleAvatar，用法也比较简单，我直接贴代码了：\n``` dart\nListTile(\n    leading: CircleAvatar(\n    backgroundImage: NetworkImage(CONSTANT.userAvatar),\n    ),\n    title: Text(\n    CONSTANT.userName,\n    style: CONSTANT.defaultTextStyle,\n    textScaleFactor: 1.5,\n    ),\n    subtitle: Text(\n    CONSTANT.userProfile,\n    style: CONSTANT.defaultTextStyle,\n    ),\n)\n```\n\n### 列表展示部分\n- 列表的展示使用的是ListView.builder()，两个必传参数itemCount和itemBuilder，前者控制列表的数量，后者控制item的展示，因为item的样式还是比较多的，所以抽离成单独的StatelessWidget组件：AwesomeListItem\n- 我们用InkWell组件将AwesomeListItem包裹，InkWell是flutter自带的组件，这个组件的特点是点击的时候带有水墨绽开的效果。点击item的时候，我们使用Navigator.push跳转到详情页面\n- 图片的展示，我们还是使用的FadeInImage，这种渐入效果的用户体验还是很不错的。然后再使用Hero()来包裹FadeInImage，这样能在页面跳转的时候提供图片之间的过渡动画，很是强大和炫酷\n``` dart\nHero(\n    tag: index,\n    child: FadeInImage(\n        image: NetworkImage(data.image),\n        fit: BoxFit.cover,\n        placeholder: AssetImage('assets/images/loading.gif'),\n    ),\n)\n```\n\n### 详情页面\n最后就是详情页面的展示，这个页面并没有写什么样式，展示了从列表页跳转过来时，图片的过渡效果，有兴趣的同学可以丰富下页面的样式和内容\n\n\n### 结尾\n- 文章中没有张贴全部代码，感兴趣的同学可以看下源码[xch1029/awesomelist](https://github.com/xch1029/awesomelist)\n- [掘金](https://juejin.im/post/5d0203ca5188256aa76bc38e)\n- [简书](https://www.jianshu.com/p/a7b902b9af88)\n- [颜色生成工具 来自这里](https://colorsupplyyy.com/app)\n- [图片 来自这里](https://picsum.photos/)\n- 受启发于 [FlutterAwesomeList](https://github.com/samarthagarwal/FlutterAwesomeList)","source":"_posts/flutter-awesome-list.md","raw":"---\ntitle: 使用flutter打造炫酷的list\ndate: 2019-06-13 13:04:40\ntags: [flutter, UI]\n---\n\n使用了flutter一段时间，越来越喜欢flutter了，flutter比我们想象中的强大。这篇文章介绍了怎么使用flutter来展示一个很漂亮的list，先看下效果图。\n\n<img src=\"http://qiniu.tbmao.com/awesomeList.gif\">\n\n样式还是很漂亮的，下面我们一步一步完成这个小项目。\n### 开发前准备\n- 我们会用到加载网络图片FadeInImage这么个widget，需要一个loading的icon，所以需要在pubspec.yaml里配置下静态资源，只有配置过的静态资源才可以在项目中使用\n``` yaml\nassets:\n   - assets/images/\n```\n- 需要mock一些假数据和一些常用的常量，所以专门建了个constant.dart来管理\n``` dart\n    colors  # 颜色\n    data  # list的数据\n    # ...\n```\n\n### appBar部分\n- appBar需要透明的背景这样才能将后面的图片展示出来，看起来很像沉浸式。\n- 需要将elevations设置为0，这样就可以取消安卓特有的阴影效果，下面是代码:\n``` dart\nScaffold(\n    appBar: AppBar(\n    backgroundColor: Colors.transparent,\n    elevation: 0,\n    title: Text(\n        'flutter awesome list',\n        style: TextStyle(\n        color: Colors.white,\n        ),\n    ),\n    ),\n    body: HomeBody(),\n);\n```\n\n### Banner部分\n- 我们需要使用Transform.translate()这个weidget来将Banner部分向上移动，让appBar全部展示在banner上面，这里给的offset为offset: Offset(0, -56)，56为appBar的高度\n- 下面的斜切造型需要使用ClipPath()来完成，用法有点像canvas，代码如下：\n``` dart\nclass MyClipper extends CustomClipper<Path> {\n  @override\n  Path getClip(Size size) {\n    Path p = Path();\n    p.lineTo(size.width, 0.0);\n    p.lineTo(size.width, size.height / 4.75);\n    p.lineTo(0.0, size.height / 3.75);\n    p.close();\n    return p;\n  }\n\n  @override\n  bool shouldReclip(CustomClipper oldClipper) {\n    return true;\n  }\n}\n```\n- 用户信息的展示用的widget是ListTile和CircleAvatar，用法也比较简单，我直接贴代码了：\n``` dart\nListTile(\n    leading: CircleAvatar(\n    backgroundImage: NetworkImage(CONSTANT.userAvatar),\n    ),\n    title: Text(\n    CONSTANT.userName,\n    style: CONSTANT.defaultTextStyle,\n    textScaleFactor: 1.5,\n    ),\n    subtitle: Text(\n    CONSTANT.userProfile,\n    style: CONSTANT.defaultTextStyle,\n    ),\n)\n```\n\n### 列表展示部分\n- 列表的展示使用的是ListView.builder()，两个必传参数itemCount和itemBuilder，前者控制列表的数量，后者控制item的展示，因为item的样式还是比较多的，所以抽离成单独的StatelessWidget组件：AwesomeListItem\n- 我们用InkWell组件将AwesomeListItem包裹，InkWell是flutter自带的组件，这个组件的特点是点击的时候带有水墨绽开的效果。点击item的时候，我们使用Navigator.push跳转到详情页面\n- 图片的展示，我们还是使用的FadeInImage，这种渐入效果的用户体验还是很不错的。然后再使用Hero()来包裹FadeInImage，这样能在页面跳转的时候提供图片之间的过渡动画，很是强大和炫酷\n``` dart\nHero(\n    tag: index,\n    child: FadeInImage(\n        image: NetworkImage(data.image),\n        fit: BoxFit.cover,\n        placeholder: AssetImage('assets/images/loading.gif'),\n    ),\n)\n```\n\n### 详情页面\n最后就是详情页面的展示，这个页面并没有写什么样式，展示了从列表页跳转过来时，图片的过渡效果，有兴趣的同学可以丰富下页面的样式和内容\n\n\n### 结尾\n- 文章中没有张贴全部代码，感兴趣的同学可以看下源码[xch1029/awesomelist](https://github.com/xch1029/awesomelist)\n- [掘金](https://juejin.im/post/5d0203ca5188256aa76bc38e)\n- [简书](https://www.jianshu.com/p/a7b902b9af88)\n- [颜色生成工具 来自这里](https://colorsupplyyy.com/app)\n- [图片 来自这里](https://picsum.photos/)\n- 受启发于 [FlutterAwesomeList](https://github.com/samarthagarwal/FlutterAwesomeList)","slug":"flutter-awesome-list","published":1,"updated":"2020-02-19T15:20:54.094Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7q4ux3a00084wnuwlgbcn6x","content":"<p>使用了flutter一段时间，越来越喜欢flutter了，flutter比我们想象中的强大。这篇文章介绍了怎么使用flutter来展示一个很漂亮的list，先看下效果图。</p>\n<p><img src=\"http://qiniu.tbmao.com/awesomeList.gif\"></p>\n<p>样式还是很漂亮的，下面我们一步一步完成这个小项目。</p>\n<h3 id=\"开发前准备\"><a href=\"#开发前准备\" class=\"headerlink\" title=\"开发前准备\"></a>开发前准备</h3><ul>\n<li><p>我们会用到加载网络图片FadeInImage这么个widget，需要一个loading的icon，所以需要在pubspec.yaml里配置下静态资源，只有配置过的静态资源才可以在项目中使用</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">assets:</span></span><br><span class=\"line\"><span class=\"bullet\">   -</span> <span class=\"string\">assets/images/</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>需要mock一些假数据和一些常用的常量，所以专门建了个constant.dart来管理</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">colors  # 颜色</span><br><span class=\"line\">data  # list的数据</span><br><span class=\"line\"># ...</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"appBar部分\"><a href=\"#appBar部分\" class=\"headerlink\" title=\"appBar部分\"></a>appBar部分</h3><ul>\n<li>appBar需要透明的背景这样才能将后面的图片展示出来，看起来很像沉浸式。</li>\n<li>需要将elevations设置为0，这样就可以取消安卓特有的阴影效果，下面是代码:<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Scaffold(</span><br><span class=\"line\">    appBar: AppBar(</span><br><span class=\"line\">    backgroundColor: Colors.transparent,</span><br><span class=\"line\">    elevation: <span class=\"number\">0</span>,</span><br><span class=\"line\">    title: Text(</span><br><span class=\"line\">        <span class=\"string\">'flutter awesome list'</span>,</span><br><span class=\"line\">        style: TextStyle(</span><br><span class=\"line\">        color: Colors.white,</span><br><span class=\"line\">        ),</span><br><span class=\"line\">    ),</span><br><span class=\"line\">    ),</span><br><span class=\"line\">    body: HomeBody(),</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"Banner部分\"><a href=\"#Banner部分\" class=\"headerlink\" title=\"Banner部分\"></a>Banner部分</h3><ul>\n<li>我们需要使用Transform.translate()这个weidget来将Banner部分向上移动，让appBar全部展示在banner上面，这里给的offset为offset: Offset(0, -56)，56为appBar的高度</li>\n<li><p>下面的斜切造型需要使用ClipPath()来完成，用法有点像canvas，代码如下：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClipper</span> <span class=\"keyword\">extends</span> <span class=\"title\">CustomClipper</span>&lt;<span class=\"title\">Path</span>&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Path getClip(Size size) &#123;</span><br><span class=\"line\">    Path p = Path();</span><br><span class=\"line\">    p.lineTo(size.width, <span class=\"number\">0.0</span>);</span><br><span class=\"line\">    p.lineTo(size.width, size.height / <span class=\"number\">4.75</span>);</span><br><span class=\"line\">    p.lineTo(<span class=\"number\">0.0</span>, size.height / <span class=\"number\">3.75</span>);</span><br><span class=\"line\">    p.close();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  <span class=\"built_in\">bool</span> shouldReclip(CustomClipper oldClipper) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>用户信息的展示用的widget是ListTile和CircleAvatar，用法也比较简单，我直接贴代码了：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ListTile(</span><br><span class=\"line\">    leading: CircleAvatar(</span><br><span class=\"line\">    backgroundImage: NetworkImage(CONSTANT.userAvatar),</span><br><span class=\"line\">    ),</span><br><span class=\"line\">    title: Text(</span><br><span class=\"line\">    CONSTANT.userName,</span><br><span class=\"line\">    style: CONSTANT.defaultTextStyle,</span><br><span class=\"line\">    textScaleFactor: <span class=\"number\">1.5</span>,</span><br><span class=\"line\">    ),</span><br><span class=\"line\">    subtitle: Text(</span><br><span class=\"line\">    CONSTANT.userProfile,</span><br><span class=\"line\">    style: CONSTANT.defaultTextStyle,</span><br><span class=\"line\">    ),</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"列表展示部分\"><a href=\"#列表展示部分\" class=\"headerlink\" title=\"列表展示部分\"></a>列表展示部分</h3><ul>\n<li>列表的展示使用的是ListView.builder()，两个必传参数itemCount和itemBuilder，前者控制列表的数量，后者控制item的展示，因为item的样式还是比较多的，所以抽离成单独的StatelessWidget组件：AwesomeListItem</li>\n<li>我们用InkWell组件将AwesomeListItem包裹，InkWell是flutter自带的组件，这个组件的特点是点击的时候带有水墨绽开的效果。点击item的时候，我们使用Navigator.push跳转到详情页面</li>\n<li>图片的展示，我们还是使用的FadeInImage，这种渐入效果的用户体验还是很不错的。然后再使用Hero()来包裹FadeInImage，这样能在页面跳转的时候提供图片之间的过渡动画，很是强大和炫酷<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hero(</span><br><span class=\"line\">    tag: index,</span><br><span class=\"line\">    child: FadeInImage(</span><br><span class=\"line\">        image: NetworkImage(data.image),</span><br><span class=\"line\">        fit: BoxFit.cover,</span><br><span class=\"line\">        placeholder: AssetImage(<span class=\"string\">'assets/images/loading.gif'</span>),</span><br><span class=\"line\">    ),</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"详情页面\"><a href=\"#详情页面\" class=\"headerlink\" title=\"详情页面\"></a>详情页面</h3><p>最后就是详情页面的展示，这个页面并没有写什么样式，展示了从列表页跳转过来时，图片的过渡效果，有兴趣的同学可以丰富下页面的样式和内容</p>\n<h3 id=\"结尾\"><a href=\"#结尾\" class=\"headerlink\" title=\"结尾\"></a>结尾</h3><ul>\n<li>文章中没有张贴全部代码，感兴趣的同学可以看下源码<a href=\"https://github.com/xch1029/awesomelist\" target=\"_blank\" rel=\"noopener\">xch1029/awesomelist</a></li>\n<li><a href=\"https://juejin.im/post/5d0203ca5188256aa76bc38e\" target=\"_blank\" rel=\"noopener\">掘金</a></li>\n<li><a href=\"https://www.jianshu.com/p/a7b902b9af88\" target=\"_blank\" rel=\"noopener\">简书</a></li>\n<li><a href=\"https://colorsupplyyy.com/app\" target=\"_blank\" rel=\"noopener\">颜色生成工具 来自这里</a></li>\n<li><a href=\"https://picsum.photos/\" target=\"_blank\" rel=\"noopener\">图片 来自这里</a></li>\n<li>受启发于 <a href=\"https://github.com/samarthagarwal/FlutterAwesomeList\" target=\"_blank\" rel=\"noopener\">FlutterAwesomeList</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>使用了flutter一段时间，越来越喜欢flutter了，flutter比我们想象中的强大。这篇文章介绍了怎么使用flutter来展示一个很漂亮的list，先看下效果图。</p>\n<p><img src=\"http://qiniu.tbmao.com/awesomeList.gif\"></p>\n<p>样式还是很漂亮的，下面我们一步一步完成这个小项目。</p>\n<h3 id=\"开发前准备\"><a href=\"#开发前准备\" class=\"headerlink\" title=\"开发前准备\"></a>开发前准备</h3><ul>\n<li><p>我们会用到加载网络图片FadeInImage这么个widget，需要一个loading的icon，所以需要在pubspec.yaml里配置下静态资源，只有配置过的静态资源才可以在项目中使用</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">assets:</span></span><br><span class=\"line\"><span class=\"bullet\">   -</span> <span class=\"string\">assets/images/</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>需要mock一些假数据和一些常用的常量，所以专门建了个constant.dart来管理</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">colors  # 颜色</span><br><span class=\"line\">data  # list的数据</span><br><span class=\"line\"># ...</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"appBar部分\"><a href=\"#appBar部分\" class=\"headerlink\" title=\"appBar部分\"></a>appBar部分</h3><ul>\n<li>appBar需要透明的背景这样才能将后面的图片展示出来，看起来很像沉浸式。</li>\n<li>需要将elevations设置为0，这样就可以取消安卓特有的阴影效果，下面是代码:<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Scaffold(</span><br><span class=\"line\">    appBar: AppBar(</span><br><span class=\"line\">    backgroundColor: Colors.transparent,</span><br><span class=\"line\">    elevation: <span class=\"number\">0</span>,</span><br><span class=\"line\">    title: Text(</span><br><span class=\"line\">        <span class=\"string\">'flutter awesome list'</span>,</span><br><span class=\"line\">        style: TextStyle(</span><br><span class=\"line\">        color: Colors.white,</span><br><span class=\"line\">        ),</span><br><span class=\"line\">    ),</span><br><span class=\"line\">    ),</span><br><span class=\"line\">    body: HomeBody(),</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"Banner部分\"><a href=\"#Banner部分\" class=\"headerlink\" title=\"Banner部分\"></a>Banner部分</h3><ul>\n<li>我们需要使用Transform.translate()这个weidget来将Banner部分向上移动，让appBar全部展示在banner上面，这里给的offset为offset: Offset(0, -56)，56为appBar的高度</li>\n<li><p>下面的斜切造型需要使用ClipPath()来完成，用法有点像canvas，代码如下：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClipper</span> <span class=\"keyword\">extends</span> <span class=\"title\">CustomClipper</span>&lt;<span class=\"title\">Path</span>&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Path getClip(Size size) &#123;</span><br><span class=\"line\">    Path p = Path();</span><br><span class=\"line\">    p.lineTo(size.width, <span class=\"number\">0.0</span>);</span><br><span class=\"line\">    p.lineTo(size.width, size.height / <span class=\"number\">4.75</span>);</span><br><span class=\"line\">    p.lineTo(<span class=\"number\">0.0</span>, size.height / <span class=\"number\">3.75</span>);</span><br><span class=\"line\">    p.close();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  <span class=\"built_in\">bool</span> shouldReclip(CustomClipper oldClipper) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>用户信息的展示用的widget是ListTile和CircleAvatar，用法也比较简单，我直接贴代码了：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ListTile(</span><br><span class=\"line\">    leading: CircleAvatar(</span><br><span class=\"line\">    backgroundImage: NetworkImage(CONSTANT.userAvatar),</span><br><span class=\"line\">    ),</span><br><span class=\"line\">    title: Text(</span><br><span class=\"line\">    CONSTANT.userName,</span><br><span class=\"line\">    style: CONSTANT.defaultTextStyle,</span><br><span class=\"line\">    textScaleFactor: <span class=\"number\">1.5</span>,</span><br><span class=\"line\">    ),</span><br><span class=\"line\">    subtitle: Text(</span><br><span class=\"line\">    CONSTANT.userProfile,</span><br><span class=\"line\">    style: CONSTANT.defaultTextStyle,</span><br><span class=\"line\">    ),</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"列表展示部分\"><a href=\"#列表展示部分\" class=\"headerlink\" title=\"列表展示部分\"></a>列表展示部分</h3><ul>\n<li>列表的展示使用的是ListView.builder()，两个必传参数itemCount和itemBuilder，前者控制列表的数量，后者控制item的展示，因为item的样式还是比较多的，所以抽离成单独的StatelessWidget组件：AwesomeListItem</li>\n<li>我们用InkWell组件将AwesomeListItem包裹，InkWell是flutter自带的组件，这个组件的特点是点击的时候带有水墨绽开的效果。点击item的时候，我们使用Navigator.push跳转到详情页面</li>\n<li>图片的展示，我们还是使用的FadeInImage，这种渐入效果的用户体验还是很不错的。然后再使用Hero()来包裹FadeInImage，这样能在页面跳转的时候提供图片之间的过渡动画，很是强大和炫酷<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hero(</span><br><span class=\"line\">    tag: index,</span><br><span class=\"line\">    child: FadeInImage(</span><br><span class=\"line\">        image: NetworkImage(data.image),</span><br><span class=\"line\">        fit: BoxFit.cover,</span><br><span class=\"line\">        placeholder: AssetImage(<span class=\"string\">'assets/images/loading.gif'</span>),</span><br><span class=\"line\">    ),</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"详情页面\"><a href=\"#详情页面\" class=\"headerlink\" title=\"详情页面\"></a>详情页面</h3><p>最后就是详情页面的展示，这个页面并没有写什么样式，展示了从列表页跳转过来时，图片的过渡效果，有兴趣的同学可以丰富下页面的样式和内容</p>\n<h3 id=\"结尾\"><a href=\"#结尾\" class=\"headerlink\" title=\"结尾\"></a>结尾</h3><ul>\n<li>文章中没有张贴全部代码，感兴趣的同学可以看下源码<a href=\"https://github.com/xch1029/awesomelist\" target=\"_blank\" rel=\"noopener\">xch1029/awesomelist</a></li>\n<li><a href=\"https://juejin.im/post/5d0203ca5188256aa76bc38e\" target=\"_blank\" rel=\"noopener\">掘金</a></li>\n<li><a href=\"https://www.jianshu.com/p/a7b902b9af88\" target=\"_blank\" rel=\"noopener\">简书</a></li>\n<li><a href=\"https://colorsupplyyy.com/app\" target=\"_blank\" rel=\"noopener\">颜色生成工具 来自这里</a></li>\n<li><a href=\"https://picsum.photos/\" target=\"_blank\" rel=\"noopener\">图片 来自这里</a></li>\n<li>受启发于 <a href=\"https://github.com/samarthagarwal/FlutterAwesomeList\" target=\"_blank\" rel=\"noopener\">FlutterAwesomeList</a></li>\n</ul>\n"},{"title":"git无敌攻略","date":"2019-04-12T01:14:15.000Z","_content":"\n### 用户信息\n配置用户个人的用户名和电子邮箱地址：\n``` git\ngit config --global user.name \"xucaihua\"\ngit config --global user.email 158972928@qq.com\n```\n如果用了 --global 选项，那么更改的配置文件就是全局的，以后你所有的项目都会默认使用这里配置的用户信息。\n如果要在某个特定的项目中使用其他用户字或者电子邮箱，只要去掉 --global 选项重新配置即可，新的配置保存在当前项目的 .git/config 文件里。\n\n### 查看配置信息\n要检查已有的配置信息，可以使用 git config --list 命令：\n``` git\ngit config --list\n```\n也可以只查看某个变量，像这样：\n``` git\ngit config user.name\n```\n\n### 创建仓库\nGit 使用 git init 命令来初始化一个 Git 仓库，Git 的很多命令都需要在 Git 的仓库中运行，所以 git init 是使用 Git 的第一个命令：\n``` git\ngit init\n```\n\n### 添加到暂存区和提交\n初始化后，会在该目录下会出现一个名为 .git 的目录，所有 Git 需要的数据和资源都存放在这个目录中。\n如果当前目录下有几个文件想要纳入版本控制，需要先用 git add 命令告诉 Git 开始对这些文件进行跟踪，然后提交：\n``` git\ngit add *.js\ngit add README\ngit commit -m \"初始化\"\n```\n以上命令将.js结尾的文件和README提交到仓库。如果想添加全部文件，使用：\n``` git\ngit add .\ngit commit -m \"初始化\"\n```\n\n### git clone\n我们使用 git clone 从现有 Git 仓库中拷贝项目，\n``` git\ngit clone <repo>\n```\n如果想指定其他目录名，而不是使用默认，使用以下命令：\n``` git\ngit clone <repo> <directory>\n```\n\n### 查看状态\n``` git\ngit status\n```\n\n### 缩写 add 和commit\n如果你觉得 git add 提交缓存的流程太过繁琐，Git 也允许你用 -a 选项跳过这一步。命令格式如下：\n``` git\ngit commit -am \"msg\"\n```\n\n### 分支管理\n创建分支：\n``` git\ngit branch (branchname)\n```\n\n切换分支：\n``` git\ngit checkout (branchname)\n```\n\n创建并切换分支：\n``` git\ngit checkout -b (branchname)\n```\n\n合并分支：\n一旦某分支有了独立内容，你终究会希望将它合并回到你的主分支。 你可以使用以下命令将任何分支合并到当前分支中去：\n``` git\ngit merge --no-ff (branchname)\n```\n\n\n列出分支：\n``` git\ngit branch\n```\n\n删除分支：\n``` git\ngit branch -d (branchname)\n```\n\n> 更高级的分支策略，建议看看阮一峰的文章：[Git分支管理策略](http://www.ruanyifeng.com/blog/2012/07/git.html)\n\n### 查看提交历史\n``` git\ngit log\n// 单行显示\ngit log --oneline\n// 拓扑图\ngit log --oneline --graph\n// 倒序\ngit log --oneline --reverse\n// 指定用户\ngit log --author=xucaihua --oneline -5\n```\n\n### 标签\n如果你达到一个重要的阶段，并希望永远记住那个特别的提交快照，你可以使用 git tag 给它打上标签。\n比如说，项目发布一个\"1.0\"版本。 我们可以用 git tag v1.0 命令给最新一次提交打上（HEAD）\"v1.0\"的标签。\n``` git\ngit tag v1.0\n```\n为某次提交追加标签\n``` git\ngit tag v1.0 654gfg9\n```\n使用git log 查看标签\n``` git\ngit log --oneline --decorate --graph\n```\n查看所有标签\n``` git\ngit tag\n```\n\n### 添加远程库\n``` git\ngit remote add [shortname] [url]\n```\n\n例子：提交到 Github\n``` git\ngit remote add origin git@github.com:xxx.git\ngit push -u origin master\n```\n查看当前的远程库\n``` git\ngit remote\ngit remote -v\n```\n\n\n","source":"_posts/git-tips.md","raw":"---\ntitle: git无敌攻略\ndate: 2019-04-12 09:14:15\ntags:\n    - git\n---\n\n### 用户信息\n配置用户个人的用户名和电子邮箱地址：\n``` git\ngit config --global user.name \"xucaihua\"\ngit config --global user.email 158972928@qq.com\n```\n如果用了 --global 选项，那么更改的配置文件就是全局的，以后你所有的项目都会默认使用这里配置的用户信息。\n如果要在某个特定的项目中使用其他用户字或者电子邮箱，只要去掉 --global 选项重新配置即可，新的配置保存在当前项目的 .git/config 文件里。\n\n### 查看配置信息\n要检查已有的配置信息，可以使用 git config --list 命令：\n``` git\ngit config --list\n```\n也可以只查看某个变量，像这样：\n``` git\ngit config user.name\n```\n\n### 创建仓库\nGit 使用 git init 命令来初始化一个 Git 仓库，Git 的很多命令都需要在 Git 的仓库中运行，所以 git init 是使用 Git 的第一个命令：\n``` git\ngit init\n```\n\n### 添加到暂存区和提交\n初始化后，会在该目录下会出现一个名为 .git 的目录，所有 Git 需要的数据和资源都存放在这个目录中。\n如果当前目录下有几个文件想要纳入版本控制，需要先用 git add 命令告诉 Git 开始对这些文件进行跟踪，然后提交：\n``` git\ngit add *.js\ngit add README\ngit commit -m \"初始化\"\n```\n以上命令将.js结尾的文件和README提交到仓库。如果想添加全部文件，使用：\n``` git\ngit add .\ngit commit -m \"初始化\"\n```\n\n### git clone\n我们使用 git clone 从现有 Git 仓库中拷贝项目，\n``` git\ngit clone <repo>\n```\n如果想指定其他目录名，而不是使用默认，使用以下命令：\n``` git\ngit clone <repo> <directory>\n```\n\n### 查看状态\n``` git\ngit status\n```\n\n### 缩写 add 和commit\n如果你觉得 git add 提交缓存的流程太过繁琐，Git 也允许你用 -a 选项跳过这一步。命令格式如下：\n``` git\ngit commit -am \"msg\"\n```\n\n### 分支管理\n创建分支：\n``` git\ngit branch (branchname)\n```\n\n切换分支：\n``` git\ngit checkout (branchname)\n```\n\n创建并切换分支：\n``` git\ngit checkout -b (branchname)\n```\n\n合并分支：\n一旦某分支有了独立内容，你终究会希望将它合并回到你的主分支。 你可以使用以下命令将任何分支合并到当前分支中去：\n``` git\ngit merge --no-ff (branchname)\n```\n\n\n列出分支：\n``` git\ngit branch\n```\n\n删除分支：\n``` git\ngit branch -d (branchname)\n```\n\n> 更高级的分支策略，建议看看阮一峰的文章：[Git分支管理策略](http://www.ruanyifeng.com/blog/2012/07/git.html)\n\n### 查看提交历史\n``` git\ngit log\n// 单行显示\ngit log --oneline\n// 拓扑图\ngit log --oneline --graph\n// 倒序\ngit log --oneline --reverse\n// 指定用户\ngit log --author=xucaihua --oneline -5\n```\n\n### 标签\n如果你达到一个重要的阶段，并希望永远记住那个特别的提交快照，你可以使用 git tag 给它打上标签。\n比如说，项目发布一个\"1.0\"版本。 我们可以用 git tag v1.0 命令给最新一次提交打上（HEAD）\"v1.0\"的标签。\n``` git\ngit tag v1.0\n```\n为某次提交追加标签\n``` git\ngit tag v1.0 654gfg9\n```\n使用git log 查看标签\n``` git\ngit log --oneline --decorate --graph\n```\n查看所有标签\n``` git\ngit tag\n```\n\n### 添加远程库\n``` git\ngit remote add [shortname] [url]\n```\n\n例子：提交到 Github\n``` git\ngit remote add origin git@github.com:xxx.git\ngit push -u origin master\n```\n查看当前的远程库\n``` git\ngit remote\ngit remote -v\n```\n\n\n","slug":"git-tips","published":1,"updated":"2020-02-19T15:20:54.098Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7q4ux3d000a4wnu2xx9auou","content":"<h3 id=\"用户信息\"><a href=\"#用户信息\" class=\"headerlink\" title=\"用户信息\"></a>用户信息</h3><p>配置用户个人的用户名和电子邮箱地址：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name &quot;xucaihua&quot;</span><br><span class=\"line\">git config --global user.email 158972928@qq.com</span><br></pre></td></tr></table></figure></p>\n<p>如果用了 –global 选项，那么更改的配置文件就是全局的，以后你所有的项目都会默认使用这里配置的用户信息。<br>如果要在某个特定的项目中使用其他用户字或者电子邮箱，只要去掉 –global 选项重新配置即可，新的配置保存在当前项目的 .git/config 文件里。</p>\n<h3 id=\"查看配置信息\"><a href=\"#查看配置信息\" class=\"headerlink\" title=\"查看配置信息\"></a>查看配置信息</h3><p>要检查已有的配置信息，可以使用 git config –list 命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --list</span><br></pre></td></tr></table></figure></p>\n<p>也可以只查看某个变量，像这样：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config user.name</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"创建仓库\"><a href=\"#创建仓库\" class=\"headerlink\" title=\"创建仓库\"></a>创建仓库</h3><p>Git 使用 git init 命令来初始化一个 Git 仓库，Git 的很多命令都需要在 Git 的仓库中运行，所以 git init 是使用 Git 的第一个命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"添加到暂存区和提交\"><a href=\"#添加到暂存区和提交\" class=\"headerlink\" title=\"添加到暂存区和提交\"></a>添加到暂存区和提交</h3><p>初始化后，会在该目录下会出现一个名为 .git 的目录，所有 Git 需要的数据和资源都存放在这个目录中。<br>如果当前目录下有几个文件想要纳入版本控制，需要先用 git add 命令告诉 Git 开始对这些文件进行跟踪，然后提交：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add *.js</span><br><span class=\"line\">git add README</span><br><span class=\"line\">git commit -m &quot;初始化&quot;</span><br></pre></td></tr></table></figure></p>\n<p>以上命令将.js结尾的文件和README提交到仓库。如果想添加全部文件，使用：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &quot;初始化&quot;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"git-clone\"><a href=\"#git-clone\" class=\"headerlink\" title=\"git clone\"></a>git clone</h3><p>我们使用 git clone 从现有 Git 仓库中拷贝项目，<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone &lt;repo&gt;</span><br></pre></td></tr></table></figure></p>\n<p>如果想指定其他目录名，而不是使用默认，使用以下命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone &lt;repo&gt; &lt;directory&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"查看状态\"><a href=\"#查看状态\" class=\"headerlink\" title=\"查看状态\"></a>查看状态</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status</span><br></pre></td></tr></table></figure>\n<h3 id=\"缩写-add-和commit\"><a href=\"#缩写-add-和commit\" class=\"headerlink\" title=\"缩写 add 和commit\"></a>缩写 add 和commit</h3><p>如果你觉得 git add 提交缓存的流程太过繁琐，Git 也允许你用 -a 选项跳过这一步。命令格式如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -am &quot;msg&quot;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"分支管理\"><a href=\"#分支管理\" class=\"headerlink\" title=\"分支管理\"></a>分支管理</h3><p>创建分支：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch (branchname)</span><br></pre></td></tr></table></figure></p>\n<p>切换分支：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout (branchname)</span><br></pre></td></tr></table></figure></p>\n<p>创建并切换分支：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b (branchname)</span><br></pre></td></tr></table></figure></p>\n<p>合并分支：<br>一旦某分支有了独立内容，你终究会希望将它合并回到你的主分支。 你可以使用以下命令将任何分支合并到当前分支中去：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git merge --no-ff (branchname)</span><br></pre></td></tr></table></figure></p>\n<p>列出分支：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch</span><br></pre></td></tr></table></figure></p>\n<p>删除分支：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -d (branchname)</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>更高级的分支策略，建议看看阮一峰的文章：<a href=\"http://www.ruanyifeng.com/blog/2012/07/git.html\" target=\"_blank\" rel=\"noopener\">Git分支管理策略</a></p>\n</blockquote>\n<h3 id=\"查看提交历史\"><a href=\"#查看提交历史\" class=\"headerlink\" title=\"查看提交历史\"></a>查看提交历史</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log</span><br><span class=\"line\">// 单行显示</span><br><span class=\"line\">git log --oneline</span><br><span class=\"line\">// 拓扑图</span><br><span class=\"line\">git log --oneline --graph</span><br><span class=\"line\">// 倒序</span><br><span class=\"line\">git log --oneline --reverse</span><br><span class=\"line\">// 指定用户</span><br><span class=\"line\">git log --author=xucaihua --oneline -5</span><br></pre></td></tr></table></figure>\n<h3 id=\"标签\"><a href=\"#标签\" class=\"headerlink\" title=\"标签\"></a>标签</h3><p>如果你达到一个重要的阶段，并希望永远记住那个特别的提交快照，你可以使用 git tag 给它打上标签。<br>比如说，项目发布一个”1.0”版本。 我们可以用 git tag v1.0 命令给最新一次提交打上（HEAD）”v1.0”的标签。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag v1.0</span><br></pre></td></tr></table></figure></p>\n<p>为某次提交追加标签<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag v1.0 654gfg9</span><br></pre></td></tr></table></figure></p>\n<p>使用git log 查看标签<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log --oneline --decorate --graph</span><br></pre></td></tr></table></figure></p>\n<p>查看所有标签<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"添加远程库\"><a href=\"#添加远程库\" class=\"headerlink\" title=\"添加远程库\"></a>添加远程库</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add [shortname] [url]</span><br></pre></td></tr></table></figure>\n<p>例子：提交到 Github<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin git@github.com:xxx.git</span><br><span class=\"line\">git push -u origin master</span><br></pre></td></tr></table></figure></p>\n<p>查看当前的远程库<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote</span><br><span class=\"line\">git remote -v</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"用户信息\"><a href=\"#用户信息\" class=\"headerlink\" title=\"用户信息\"></a>用户信息</h3><p>配置用户个人的用户名和电子邮箱地址：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name &quot;xucaihua&quot;</span><br><span class=\"line\">git config --global user.email 158972928@qq.com</span><br></pre></td></tr></table></figure></p>\n<p>如果用了 –global 选项，那么更改的配置文件就是全局的，以后你所有的项目都会默认使用这里配置的用户信息。<br>如果要在某个特定的项目中使用其他用户字或者电子邮箱，只要去掉 –global 选项重新配置即可，新的配置保存在当前项目的 .git/config 文件里。</p>\n<h3 id=\"查看配置信息\"><a href=\"#查看配置信息\" class=\"headerlink\" title=\"查看配置信息\"></a>查看配置信息</h3><p>要检查已有的配置信息，可以使用 git config –list 命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --list</span><br></pre></td></tr></table></figure></p>\n<p>也可以只查看某个变量，像这样：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config user.name</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"创建仓库\"><a href=\"#创建仓库\" class=\"headerlink\" title=\"创建仓库\"></a>创建仓库</h3><p>Git 使用 git init 命令来初始化一个 Git 仓库，Git 的很多命令都需要在 Git 的仓库中运行，所以 git init 是使用 Git 的第一个命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"添加到暂存区和提交\"><a href=\"#添加到暂存区和提交\" class=\"headerlink\" title=\"添加到暂存区和提交\"></a>添加到暂存区和提交</h3><p>初始化后，会在该目录下会出现一个名为 .git 的目录，所有 Git 需要的数据和资源都存放在这个目录中。<br>如果当前目录下有几个文件想要纳入版本控制，需要先用 git add 命令告诉 Git 开始对这些文件进行跟踪，然后提交：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add *.js</span><br><span class=\"line\">git add README</span><br><span class=\"line\">git commit -m &quot;初始化&quot;</span><br></pre></td></tr></table></figure></p>\n<p>以上命令将.js结尾的文件和README提交到仓库。如果想添加全部文件，使用：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &quot;初始化&quot;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"git-clone\"><a href=\"#git-clone\" class=\"headerlink\" title=\"git clone\"></a>git clone</h3><p>我们使用 git clone 从现有 Git 仓库中拷贝项目，<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone &lt;repo&gt;</span><br></pre></td></tr></table></figure></p>\n<p>如果想指定其他目录名，而不是使用默认，使用以下命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone &lt;repo&gt; &lt;directory&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"查看状态\"><a href=\"#查看状态\" class=\"headerlink\" title=\"查看状态\"></a>查看状态</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status</span><br></pre></td></tr></table></figure>\n<h3 id=\"缩写-add-和commit\"><a href=\"#缩写-add-和commit\" class=\"headerlink\" title=\"缩写 add 和commit\"></a>缩写 add 和commit</h3><p>如果你觉得 git add 提交缓存的流程太过繁琐，Git 也允许你用 -a 选项跳过这一步。命令格式如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -am &quot;msg&quot;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"分支管理\"><a href=\"#分支管理\" class=\"headerlink\" title=\"分支管理\"></a>分支管理</h3><p>创建分支：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch (branchname)</span><br></pre></td></tr></table></figure></p>\n<p>切换分支：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout (branchname)</span><br></pre></td></tr></table></figure></p>\n<p>创建并切换分支：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b (branchname)</span><br></pre></td></tr></table></figure></p>\n<p>合并分支：<br>一旦某分支有了独立内容，你终究会希望将它合并回到你的主分支。 你可以使用以下命令将任何分支合并到当前分支中去：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git merge --no-ff (branchname)</span><br></pre></td></tr></table></figure></p>\n<p>列出分支：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch</span><br></pre></td></tr></table></figure></p>\n<p>删除分支：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -d (branchname)</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>更高级的分支策略，建议看看阮一峰的文章：<a href=\"http://www.ruanyifeng.com/blog/2012/07/git.html\" target=\"_blank\" rel=\"noopener\">Git分支管理策略</a></p>\n</blockquote>\n<h3 id=\"查看提交历史\"><a href=\"#查看提交历史\" class=\"headerlink\" title=\"查看提交历史\"></a>查看提交历史</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log</span><br><span class=\"line\">// 单行显示</span><br><span class=\"line\">git log --oneline</span><br><span class=\"line\">// 拓扑图</span><br><span class=\"line\">git log --oneline --graph</span><br><span class=\"line\">// 倒序</span><br><span class=\"line\">git log --oneline --reverse</span><br><span class=\"line\">// 指定用户</span><br><span class=\"line\">git log --author=xucaihua --oneline -5</span><br></pre></td></tr></table></figure>\n<h3 id=\"标签\"><a href=\"#标签\" class=\"headerlink\" title=\"标签\"></a>标签</h3><p>如果你达到一个重要的阶段，并希望永远记住那个特别的提交快照，你可以使用 git tag 给它打上标签。<br>比如说，项目发布一个”1.0”版本。 我们可以用 git tag v1.0 命令给最新一次提交打上（HEAD）”v1.0”的标签。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag v1.0</span><br></pre></td></tr></table></figure></p>\n<p>为某次提交追加标签<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag v1.0 654gfg9</span><br></pre></td></tr></table></figure></p>\n<p>使用git log 查看标签<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log --oneline --decorate --graph</span><br></pre></td></tr></table></figure></p>\n<p>查看所有标签<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"添加远程库\"><a href=\"#添加远程库\" class=\"headerlink\" title=\"添加远程库\"></a>添加远程库</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add [shortname] [url]</span><br></pre></td></tr></table></figure>\n<p>例子：提交到 Github<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin git@github.com:xxx.git</span><br><span class=\"line\">git push -u origin master</span><br></pre></td></tr></table></figure></p>\n<p>查看当前的远程库<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote</span><br><span class=\"line\">git remote -v</span><br></pre></td></tr></table></figure></p>\n"},{"title":"Hello World","date":"2019-03-20T02:00:30.000Z","_content":"终于搭建了自己的技术博客，选来选去，最后还是用了hexo\n\n## 快速开始\n\n### 新建文章\n\n``` bash\n$ hexo new \"文章名字\"\n```\n\n更多: [writing](https://hexo.io/docs/writing.html)\n\n### 开启本地服务器\n\n``` bash\n$ hexo server\n```\n\n更多: [Server](https://hexo.io/docs/server.html)\n\n### 生成静态文件\n\n``` bash\n$ hexo generate\n```\n\n更多: [Generating](https://hexo.io/docs/generating.html)\n\n### 部署\n\n``` bash\n$ hexo deploy\n```\n\n更多: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2019-03-20 10:00:30\n---\n终于搭建了自己的技术博客，选来选去，最后还是用了hexo\n\n## 快速开始\n\n### 新建文章\n\n``` bash\n$ hexo new \"文章名字\"\n```\n\n更多: [writing](https://hexo.io/docs/writing.html)\n\n### 开启本地服务器\n\n``` bash\n$ hexo server\n```\n\n更多: [Server](https://hexo.io/docs/server.html)\n\n### 生成静态文件\n\n``` bash\n$ hexo generate\n```\n\n更多: [Generating](https://hexo.io/docs/generating.html)\n\n### 部署\n\n``` bash\n$ hexo deploy\n```\n\n更多: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"updated":"2020-02-19T15:20:54.098Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7q4ux3i000b4wnul1aervn2","content":"<p>终于搭建了自己的技术博客，选来选去，最后还是用了hexo</p>\n<h2 id=\"快速开始\"><a href=\"#快速开始\" class=\"headerlink\" title=\"快速开始\"></a>快速开始</h2><h3 id=\"新建文章\"><a href=\"#新建文章\" class=\"headerlink\" title=\"新建文章\"></a>新建文章</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"文章名字\"</span></span><br></pre></td></tr></table></figure>\n<p>更多: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">writing</a></p>\n<h3 id=\"开启本地服务器\"><a href=\"#开启本地服务器\" class=\"headerlink\" title=\"开启本地服务器\"></a>开启本地服务器</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>更多: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"生成静态文件\"><a href=\"#生成静态文件\" class=\"headerlink\" title=\"生成静态文件\"></a>生成静态文件</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>更多: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>更多: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>终于搭建了自己的技术博客，选来选去，最后还是用了hexo</p>\n<h2 id=\"快速开始\"><a href=\"#快速开始\" class=\"headerlink\" title=\"快速开始\"></a>快速开始</h2><h3 id=\"新建文章\"><a href=\"#新建文章\" class=\"headerlink\" title=\"新建文章\"></a>新建文章</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"文章名字\"</span></span><br></pre></td></tr></table></figure>\n<p>更多: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">writing</a></p>\n<h3 id=\"开启本地服务器\"><a href=\"#开启本地服务器\" class=\"headerlink\" title=\"开启本地服务器\"></a>开启本地服务器</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>更多: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"生成静态文件\"><a href=\"#生成静态文件\" class=\"headerlink\" title=\"生成静态文件\"></a>生成静态文件</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>更多: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>更多: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"JS中的高阶函数","date":"2020-03-08T13:24:55.000Z","_content":"\n“高阶函数”是个我们经常遇到的术语，英文名叫“higher-order function”，对于新手而言，还挺神秘。今天，我们就来探讨下高阶函数。\n\n### 定义\n**接收函数作为参数或者返回函数的函数**\n\n大白话就是：\n1. 首先是个函数\n2. 参数或者返回值是函数\n\n### 举例子\n我们这里举两个例子来覆盖下上文的定义，其中，例一为`接收函数`作为参数的高阶函数，例二为`返回函数`的高阶函数。\n\n#### 例一：函数作为参数\n我们定义了一个叫`evaluatesToFive`的函数，接收两个参数：第一个参数是一个数字，第二个参数是一个函数。在函数`evaluatesToFive`中，将参数一(数字)传入参数二(函数)\n\n```\nfunction evaluatesToFive(num, fn) {\n  return fn(num) === 5;\n}\n```\n使用的场景：\n```\nfunction divideByTwo(num) {\n  return num / 2;\n}\n\nevaluatesToFive(10, divideByTwo);\n// true\n\nevaluatesToFive(20, divideByTwo);\n// false\n```\n哈哈，虽然函数本身用处不大，但是对描述高阶函数来说，很简单易懂。\n\n#### 例二：返回函数\n本例中，我们创建函数`multiplyBy`，接收一个数字作为参数，并返回一个新的函数\n\n```\nfunction multiplyBy(num1) {\n  return function(num2) {\n    return num1 * num2;\n  };\n}\n```\n\n使用场景：\n```\nconst multiplyByThree = multiplyBy(3);\nconst multiplyByFive = multiplyBy(5);\n\nmultipyByThree(10); // 30\n\nmultiplyByFive(10); // 50\n```\n\n是不是有点感觉了，通过生成新的函数以达到更具体的目的。\n\n### 更复杂的应用实例\n本例中，我们创建一个函数去检测新用户的注册信息是否能通过检验规则：\n- 大于18岁\n- 密码长度大于8\n- 同意用户协议\n\n新用户的注册信息大概是这样：\n```\nconst newUser = {\n  age: 24,\n  password: 'some long password',\n  agreeToTerms: true,\n};\n```\n\n接下来，我们来创建三个验证函数，通过返回`true`，否则返回`false`\n```\nfunction oldEnough(user) {\n  return user.age >= 18;\n}\n\nfunction passwordLongEnough(user) {\n  return user.password.length >= 8;\n}\n\nfunction agreeToTerms(user) {\n  return user.agreeToTerms === true;\n}\n```\n接下来，该主角登场了，我们需要创建一个高阶函数来一次性完成所有的验证。参数一是新用户注册信息，剩下的参数是我们上文创建的三个验证函数。在函数体中依次执行验证：\n```\nfunction validate(obj, ...tests) {\n  for (let i = 0; i < tests.length; i++) {\n    if (tests[i](obj) === false) {\n      return false;\n    }\n  }\n  return true;\n}\n```\n使用：\n```\nconst newUser1 = {\n  age: 40,\n  password: 'tncy4ty49r2mrx',\n  agreeToTerms: true,\n};\n\nvalidate(newUser1, oldEnough, passwordLongEnough, agreeToTerms);\n// true\n\nconst newUser2 = {\n  age: 40,\n  password: 'short',\n  agreeToTerms: true,\n};\n\nvalidate(newUser2, oldEnough, passwordLongEnough, agreeToTerms);\n// false\n```\n到目前为止，已经很棒了，继续看下去，看我们怎么改进\n\n### 继续进化\n\n上文中，我们使用`validate`函数的时候需要传入多个验证函数(oldEnough, passwordLongEnough, agreeToTerms)，这违反了`最少知识原则`(有兴趣的同学们可以去了解下[最少知识原则](https://baike.baidu.com/item/%E8%BF%AA%E7%B1%B3%E7%89%B9%E6%B3%95%E5%88%99/2107000?fromtitle=%E6%9C%80%E5%B0%91%E7%9F%A5%E8%AF%86%E5%8E%9F%E5%88%99&fromid=11187352&fr=aladdin))，看我们怎么将之继续改进：\n```\nfunction createValidator(...tests) {\n  return function(obj) {\n    for (let i = 0; i < tests.length; i++) {\n      if (tests[i](obj) === false) {\n        return false;\n      }\n    }\n    return true;\n  };\n}\n```\n这个`createValidator`函数牛逼了，它接收任意数量的函数作为参数，返回值也是个函数。所以这个`createValidator`也是个高阶函数。\n\n使用：\n```\nconst userValidator = createValidator(\n  oldEnough,\n  passwordLongEnough,\n  agreeToTerms\n);\n\nuserValidator(newUser1); // true\nuserValidator(newUser2); // false\n\n```\n\n看出什么门道了没？通过函数`createValidator`生成更具体的验证函数`userValidator`，再使用`userValidator`去验证新用户的注册信息。多么精彩的高阶函数！意犹未尽的同学们可以再学习下另一个术语`柯里化`！\n\n### 结语\n本小文，我们一起探讨了JS中的高阶函数，千万不要以为高阶函数只是一道面试题。前端框架中很火的`高阶组件`也是引用自高阶函数。高阶函数在我们日常开发中经常会使用到，用好了，可以将很多复杂的业务逻辑进行解耦，对于代码的可读性和可维护性很有意义！文中也用到了闭包的知识，聪明的你发现了吗？不要让自己的知识永远躺在面试题中哦！\n","source":"_posts/high-order-function.md","raw":"---\ntitle: JS中的高阶函数\ndate: 2020-03-08 21:24:55\ntags: Javascript\n---\n\n“高阶函数”是个我们经常遇到的术语，英文名叫“higher-order function”，对于新手而言，还挺神秘。今天，我们就来探讨下高阶函数。\n\n### 定义\n**接收函数作为参数或者返回函数的函数**\n\n大白话就是：\n1. 首先是个函数\n2. 参数或者返回值是函数\n\n### 举例子\n我们这里举两个例子来覆盖下上文的定义，其中，例一为`接收函数`作为参数的高阶函数，例二为`返回函数`的高阶函数。\n\n#### 例一：函数作为参数\n我们定义了一个叫`evaluatesToFive`的函数，接收两个参数：第一个参数是一个数字，第二个参数是一个函数。在函数`evaluatesToFive`中，将参数一(数字)传入参数二(函数)\n\n```\nfunction evaluatesToFive(num, fn) {\n  return fn(num) === 5;\n}\n```\n使用的场景：\n```\nfunction divideByTwo(num) {\n  return num / 2;\n}\n\nevaluatesToFive(10, divideByTwo);\n// true\n\nevaluatesToFive(20, divideByTwo);\n// false\n```\n哈哈，虽然函数本身用处不大，但是对描述高阶函数来说，很简单易懂。\n\n#### 例二：返回函数\n本例中，我们创建函数`multiplyBy`，接收一个数字作为参数，并返回一个新的函数\n\n```\nfunction multiplyBy(num1) {\n  return function(num2) {\n    return num1 * num2;\n  };\n}\n```\n\n使用场景：\n```\nconst multiplyByThree = multiplyBy(3);\nconst multiplyByFive = multiplyBy(5);\n\nmultipyByThree(10); // 30\n\nmultiplyByFive(10); // 50\n```\n\n是不是有点感觉了，通过生成新的函数以达到更具体的目的。\n\n### 更复杂的应用实例\n本例中，我们创建一个函数去检测新用户的注册信息是否能通过检验规则：\n- 大于18岁\n- 密码长度大于8\n- 同意用户协议\n\n新用户的注册信息大概是这样：\n```\nconst newUser = {\n  age: 24,\n  password: 'some long password',\n  agreeToTerms: true,\n};\n```\n\n接下来，我们来创建三个验证函数，通过返回`true`，否则返回`false`\n```\nfunction oldEnough(user) {\n  return user.age >= 18;\n}\n\nfunction passwordLongEnough(user) {\n  return user.password.length >= 8;\n}\n\nfunction agreeToTerms(user) {\n  return user.agreeToTerms === true;\n}\n```\n接下来，该主角登场了，我们需要创建一个高阶函数来一次性完成所有的验证。参数一是新用户注册信息，剩下的参数是我们上文创建的三个验证函数。在函数体中依次执行验证：\n```\nfunction validate(obj, ...tests) {\n  for (let i = 0; i < tests.length; i++) {\n    if (tests[i](obj) === false) {\n      return false;\n    }\n  }\n  return true;\n}\n```\n使用：\n```\nconst newUser1 = {\n  age: 40,\n  password: 'tncy4ty49r2mrx',\n  agreeToTerms: true,\n};\n\nvalidate(newUser1, oldEnough, passwordLongEnough, agreeToTerms);\n// true\n\nconst newUser2 = {\n  age: 40,\n  password: 'short',\n  agreeToTerms: true,\n};\n\nvalidate(newUser2, oldEnough, passwordLongEnough, agreeToTerms);\n// false\n```\n到目前为止，已经很棒了，继续看下去，看我们怎么改进\n\n### 继续进化\n\n上文中，我们使用`validate`函数的时候需要传入多个验证函数(oldEnough, passwordLongEnough, agreeToTerms)，这违反了`最少知识原则`(有兴趣的同学们可以去了解下[最少知识原则](https://baike.baidu.com/item/%E8%BF%AA%E7%B1%B3%E7%89%B9%E6%B3%95%E5%88%99/2107000?fromtitle=%E6%9C%80%E5%B0%91%E7%9F%A5%E8%AF%86%E5%8E%9F%E5%88%99&fromid=11187352&fr=aladdin))，看我们怎么将之继续改进：\n```\nfunction createValidator(...tests) {\n  return function(obj) {\n    for (let i = 0; i < tests.length; i++) {\n      if (tests[i](obj) === false) {\n        return false;\n      }\n    }\n    return true;\n  };\n}\n```\n这个`createValidator`函数牛逼了，它接收任意数量的函数作为参数，返回值也是个函数。所以这个`createValidator`也是个高阶函数。\n\n使用：\n```\nconst userValidator = createValidator(\n  oldEnough,\n  passwordLongEnough,\n  agreeToTerms\n);\n\nuserValidator(newUser1); // true\nuserValidator(newUser2); // false\n\n```\n\n看出什么门道了没？通过函数`createValidator`生成更具体的验证函数`userValidator`，再使用`userValidator`去验证新用户的注册信息。多么精彩的高阶函数！意犹未尽的同学们可以再学习下另一个术语`柯里化`！\n\n### 结语\n本小文，我们一起探讨了JS中的高阶函数，千万不要以为高阶函数只是一道面试题。前端框架中很火的`高阶组件`也是引用自高阶函数。高阶函数在我们日常开发中经常会使用到，用好了，可以将很多复杂的业务逻辑进行解耦，对于代码的可读性和可维护性很有意义！文中也用到了闭包的知识，聪明的你发现了吗？不要让自己的知识永远躺在面试题中哦！\n","slug":"high-order-function","published":1,"updated":"2020-03-10T12:44:50.001Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7q4ux3o000e4wnupgq7ltst","content":"<p>“高阶函数”是个我们经常遇到的术语，英文名叫“higher-order function”，对于新手而言，还挺神秘。今天，我们就来探讨下高阶函数。</p>\n<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p><strong>接收函数作为参数或者返回函数的函数</strong></p>\n<p>大白话就是：</p>\n<ol>\n<li>首先是个函数</li>\n<li>参数或者返回值是函数</li>\n</ol>\n<h3 id=\"举例子\"><a href=\"#举例子\" class=\"headerlink\" title=\"举例子\"></a>举例子</h3><p>我们这里举两个例子来覆盖下上文的定义，其中，例一为<code>接收函数</code>作为参数的高阶函数，例二为<code>返回函数</code>的高阶函数。</p>\n<h4 id=\"例一：函数作为参数\"><a href=\"#例一：函数作为参数\" class=\"headerlink\" title=\"例一：函数作为参数\"></a>例一：函数作为参数</h4><p>我们定义了一个叫<code>evaluatesToFive</code>的函数，接收两个参数：第一个参数是一个数字，第二个参数是一个函数。在函数<code>evaluatesToFive</code>中，将参数一(数字)传入参数二(函数)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function evaluatesToFive(num, fn) &#123;</span><br><span class=\"line\">  return fn(num) === 5;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用的场景：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function divideByTwo(num) &#123;</span><br><span class=\"line\">  return num / 2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">evaluatesToFive(10, divideByTwo);</span><br><span class=\"line\">// true</span><br><span class=\"line\"></span><br><span class=\"line\">evaluatesToFive(20, divideByTwo);</span><br><span class=\"line\">// false</span><br></pre></td></tr></table></figure></p>\n<p>哈哈，虽然函数本身用处不大，但是对描述高阶函数来说，很简单易懂。</p>\n<h4 id=\"例二：返回函数\"><a href=\"#例二：返回函数\" class=\"headerlink\" title=\"例二：返回函数\"></a>例二：返回函数</h4><p>本例中，我们创建函数<code>multiplyBy</code>，接收一个数字作为参数，并返回一个新的函数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function multiplyBy(num1) &#123;</span><br><span class=\"line\">  return function(num2) &#123;</span><br><span class=\"line\">    return num1 * num2;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用场景：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const multiplyByThree = multiplyBy(3);</span><br><span class=\"line\">const multiplyByFive = multiplyBy(5);</span><br><span class=\"line\"></span><br><span class=\"line\">multipyByThree(10); // 30</span><br><span class=\"line\"></span><br><span class=\"line\">multiplyByFive(10); // 50</span><br></pre></td></tr></table></figure></p>\n<p>是不是有点感觉了，通过生成新的函数以达到更具体的目的。</p>\n<h3 id=\"更复杂的应用实例\"><a href=\"#更复杂的应用实例\" class=\"headerlink\" title=\"更复杂的应用实例\"></a>更复杂的应用实例</h3><p>本例中，我们创建一个函数去检测新用户的注册信息是否能通过检验规则：</p>\n<ul>\n<li>大于18岁</li>\n<li>密码长度大于8</li>\n<li>同意用户协议</li>\n</ul>\n<p>新用户的注册信息大概是这样：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const newUser = &#123;</span><br><span class=\"line\">  age: 24,</span><br><span class=\"line\">  password: &apos;some long password&apos;,</span><br><span class=\"line\">  agreeToTerms: true,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>接下来，我们来创建三个验证函数，通过返回<code>true</code>，否则返回<code>false</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function oldEnough(user) &#123;</span><br><span class=\"line\">  return user.age &gt;= 18;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function passwordLongEnough(user) &#123;</span><br><span class=\"line\">  return user.password.length &gt;= 8;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function agreeToTerms(user) &#123;</span><br><span class=\"line\">  return user.agreeToTerms === true;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>接下来，该主角登场了，我们需要创建一个高阶函数来一次性完成所有的验证。参数一是新用户注册信息，剩下的参数是我们上文创建的三个验证函数。在函数体中依次执行验证：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function validate(obj, ...tests) &#123;</span><br><span class=\"line\">  for (let i = 0; i &lt; tests.length; i++) &#123;</span><br><span class=\"line\">    if (tests[i](obj) === false) &#123;</span><br><span class=\"line\">      return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return true;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>使用：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const newUser1 = &#123;</span><br><span class=\"line\">  age: 40,</span><br><span class=\"line\">  password: &apos;tncy4ty49r2mrx&apos;,</span><br><span class=\"line\">  agreeToTerms: true,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">validate(newUser1, oldEnough, passwordLongEnough, agreeToTerms);</span><br><span class=\"line\">// true</span><br><span class=\"line\"></span><br><span class=\"line\">const newUser2 = &#123;</span><br><span class=\"line\">  age: 40,</span><br><span class=\"line\">  password: &apos;short&apos;,</span><br><span class=\"line\">  agreeToTerms: true,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">validate(newUser2, oldEnough, passwordLongEnough, agreeToTerms);</span><br><span class=\"line\">// false</span><br></pre></td></tr></table></figure></p>\n<p>到目前为止，已经很棒了，继续看下去，看我们怎么改进</p>\n<h3 id=\"继续进化\"><a href=\"#继续进化\" class=\"headerlink\" title=\"继续进化\"></a>继续进化</h3><p>上文中，我们使用<code>validate</code>函数的时候需要传入多个验证函数(oldEnough, passwordLongEnough, agreeToTerms)，这违反了<code>最少知识原则</code>(有兴趣的同学们可以去了解下<a href=\"https://baike.baidu.com/item/%E8%BF%AA%E7%B1%B3%E7%89%B9%E6%B3%95%E5%88%99/2107000?fromtitle=%E6%9C%80%E5%B0%91%E7%9F%A5%E8%AF%86%E5%8E%9F%E5%88%99&amp;fromid=11187352&amp;fr=aladdin\" target=\"_blank\" rel=\"noopener\">最少知识原则</a>)，看我们怎么将之继续改进：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function createValidator(...tests) &#123;</span><br><span class=\"line\">  return function(obj) &#123;</span><br><span class=\"line\">    for (let i = 0; i &lt; tests.length; i++) &#123;</span><br><span class=\"line\">      if (tests[i](obj) === false) &#123;</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return true;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这个<code>createValidator</code>函数牛逼了，它接收任意数量的函数作为参数，返回值也是个函数。所以这个<code>createValidator</code>也是个高阶函数。</p>\n<p>使用：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const userValidator = createValidator(</span><br><span class=\"line\">  oldEnough,</span><br><span class=\"line\">  passwordLongEnough,</span><br><span class=\"line\">  agreeToTerms</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\">userValidator(newUser1); // true</span><br><span class=\"line\">userValidator(newUser2); // false</span><br></pre></td></tr></table></figure></p>\n<p>看出什么门道了没？通过函数<code>createValidator</code>生成更具体的验证函数<code>userValidator</code>，再使用<code>userValidator</code>去验证新用户的注册信息。多么精彩的高阶函数！意犹未尽的同学们可以再学习下另一个术语<code>柯里化</code>！</p>\n<h3 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h3><p>本小文，我们一起探讨了JS中的高阶函数，千万不要以为高阶函数只是一道面试题。前端框架中很火的<code>高阶组件</code>也是引用自高阶函数。高阶函数在我们日常开发中经常会使用到，用好了，可以将很多复杂的业务逻辑进行解耦，对于代码的可读性和可维护性很有意义！文中也用到了闭包的知识，聪明的你发现了吗？不要让自己的知识永远躺在面试题中哦！</p>\n","site":{"data":{}},"excerpt":"","more":"<p>“高阶函数”是个我们经常遇到的术语，英文名叫“higher-order function”，对于新手而言，还挺神秘。今天，我们就来探讨下高阶函数。</p>\n<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p><strong>接收函数作为参数或者返回函数的函数</strong></p>\n<p>大白话就是：</p>\n<ol>\n<li>首先是个函数</li>\n<li>参数或者返回值是函数</li>\n</ol>\n<h3 id=\"举例子\"><a href=\"#举例子\" class=\"headerlink\" title=\"举例子\"></a>举例子</h3><p>我们这里举两个例子来覆盖下上文的定义，其中，例一为<code>接收函数</code>作为参数的高阶函数，例二为<code>返回函数</code>的高阶函数。</p>\n<h4 id=\"例一：函数作为参数\"><a href=\"#例一：函数作为参数\" class=\"headerlink\" title=\"例一：函数作为参数\"></a>例一：函数作为参数</h4><p>我们定义了一个叫<code>evaluatesToFive</code>的函数，接收两个参数：第一个参数是一个数字，第二个参数是一个函数。在函数<code>evaluatesToFive</code>中，将参数一(数字)传入参数二(函数)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function evaluatesToFive(num, fn) &#123;</span><br><span class=\"line\">  return fn(num) === 5;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用的场景：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function divideByTwo(num) &#123;</span><br><span class=\"line\">  return num / 2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">evaluatesToFive(10, divideByTwo);</span><br><span class=\"line\">// true</span><br><span class=\"line\"></span><br><span class=\"line\">evaluatesToFive(20, divideByTwo);</span><br><span class=\"line\">// false</span><br></pre></td></tr></table></figure></p>\n<p>哈哈，虽然函数本身用处不大，但是对描述高阶函数来说，很简单易懂。</p>\n<h4 id=\"例二：返回函数\"><a href=\"#例二：返回函数\" class=\"headerlink\" title=\"例二：返回函数\"></a>例二：返回函数</h4><p>本例中，我们创建函数<code>multiplyBy</code>，接收一个数字作为参数，并返回一个新的函数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function multiplyBy(num1) &#123;</span><br><span class=\"line\">  return function(num2) &#123;</span><br><span class=\"line\">    return num1 * num2;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用场景：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const multiplyByThree = multiplyBy(3);</span><br><span class=\"line\">const multiplyByFive = multiplyBy(5);</span><br><span class=\"line\"></span><br><span class=\"line\">multipyByThree(10); // 30</span><br><span class=\"line\"></span><br><span class=\"line\">multiplyByFive(10); // 50</span><br></pre></td></tr></table></figure></p>\n<p>是不是有点感觉了，通过生成新的函数以达到更具体的目的。</p>\n<h3 id=\"更复杂的应用实例\"><a href=\"#更复杂的应用实例\" class=\"headerlink\" title=\"更复杂的应用实例\"></a>更复杂的应用实例</h3><p>本例中，我们创建一个函数去检测新用户的注册信息是否能通过检验规则：</p>\n<ul>\n<li>大于18岁</li>\n<li>密码长度大于8</li>\n<li>同意用户协议</li>\n</ul>\n<p>新用户的注册信息大概是这样：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const newUser = &#123;</span><br><span class=\"line\">  age: 24,</span><br><span class=\"line\">  password: &apos;some long password&apos;,</span><br><span class=\"line\">  agreeToTerms: true,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>接下来，我们来创建三个验证函数，通过返回<code>true</code>，否则返回<code>false</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function oldEnough(user) &#123;</span><br><span class=\"line\">  return user.age &gt;= 18;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function passwordLongEnough(user) &#123;</span><br><span class=\"line\">  return user.password.length &gt;= 8;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function agreeToTerms(user) &#123;</span><br><span class=\"line\">  return user.agreeToTerms === true;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>接下来，该主角登场了，我们需要创建一个高阶函数来一次性完成所有的验证。参数一是新用户注册信息，剩下的参数是我们上文创建的三个验证函数。在函数体中依次执行验证：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function validate(obj, ...tests) &#123;</span><br><span class=\"line\">  for (let i = 0; i &lt; tests.length; i++) &#123;</span><br><span class=\"line\">    if (tests[i](obj) === false) &#123;</span><br><span class=\"line\">      return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return true;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>使用：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const newUser1 = &#123;</span><br><span class=\"line\">  age: 40,</span><br><span class=\"line\">  password: &apos;tncy4ty49r2mrx&apos;,</span><br><span class=\"line\">  agreeToTerms: true,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">validate(newUser1, oldEnough, passwordLongEnough, agreeToTerms);</span><br><span class=\"line\">// true</span><br><span class=\"line\"></span><br><span class=\"line\">const newUser2 = &#123;</span><br><span class=\"line\">  age: 40,</span><br><span class=\"line\">  password: &apos;short&apos;,</span><br><span class=\"line\">  agreeToTerms: true,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">validate(newUser2, oldEnough, passwordLongEnough, agreeToTerms);</span><br><span class=\"line\">// false</span><br></pre></td></tr></table></figure></p>\n<p>到目前为止，已经很棒了，继续看下去，看我们怎么改进</p>\n<h3 id=\"继续进化\"><a href=\"#继续进化\" class=\"headerlink\" title=\"继续进化\"></a>继续进化</h3><p>上文中，我们使用<code>validate</code>函数的时候需要传入多个验证函数(oldEnough, passwordLongEnough, agreeToTerms)，这违反了<code>最少知识原则</code>(有兴趣的同学们可以去了解下<a href=\"https://baike.baidu.com/item/%E8%BF%AA%E7%B1%B3%E7%89%B9%E6%B3%95%E5%88%99/2107000?fromtitle=%E6%9C%80%E5%B0%91%E7%9F%A5%E8%AF%86%E5%8E%9F%E5%88%99&amp;fromid=11187352&amp;fr=aladdin\" target=\"_blank\" rel=\"noopener\">最少知识原则</a>)，看我们怎么将之继续改进：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function createValidator(...tests) &#123;</span><br><span class=\"line\">  return function(obj) &#123;</span><br><span class=\"line\">    for (let i = 0; i &lt; tests.length; i++) &#123;</span><br><span class=\"line\">      if (tests[i](obj) === false) &#123;</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return true;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这个<code>createValidator</code>函数牛逼了，它接收任意数量的函数作为参数，返回值也是个函数。所以这个<code>createValidator</code>也是个高阶函数。</p>\n<p>使用：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const userValidator = createValidator(</span><br><span class=\"line\">  oldEnough,</span><br><span class=\"line\">  passwordLongEnough,</span><br><span class=\"line\">  agreeToTerms</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\">userValidator(newUser1); // true</span><br><span class=\"line\">userValidator(newUser2); // false</span><br></pre></td></tr></table></figure></p>\n<p>看出什么门道了没？通过函数<code>createValidator</code>生成更具体的验证函数<code>userValidator</code>，再使用<code>userValidator</code>去验证新用户的注册信息。多么精彩的高阶函数！意犹未尽的同学们可以再学习下另一个术语<code>柯里化</code>！</p>\n<h3 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h3><p>本小文，我们一起探讨了JS中的高阶函数，千万不要以为高阶函数只是一道面试题。前端框架中很火的<code>高阶组件</code>也是引用自高阶函数。高阶函数在我们日常开发中经常会使用到，用好了，可以将很多复杂的业务逻辑进行解耦，对于代码的可读性和可维护性很有意义！文中也用到了闭包的知识，聪明的你发现了吗？不要让自己的知识永远躺在面试题中哦！</p>\n"},{"title":"2020年，你必须知道的JS数组技巧","date":"2020-02-19T15:24:16.000Z","_content":"在Javascript中，数组是一个重要且常见的知识点，我们经常将数据存储在数组中。作为一名Javascript工程师，数组必须要运用自如。这篇文章，向大家展示了在日常开发中，数组有哪些奇淫技巧值得关注和学习，让我们开始吧！\n\n### 1.去重\n这也是一道常见的面试题，怎么对JS的数组去重。在ES6的时代，有个非常快速且简单的方法，使用`new Set()`以及`Array.from()`或者`展开运算符(...)`\n``` javascript\nvar fruits = [“banana”, “apple”, “orange”, “watermelon”, “apple”, “orange”, “grape”, “apple”];\n\n\n// 方法一\nvar uniqueFruits = Array.from(new Set(fruits));\nconsole.log(uniqueFruits); // returns [“banana”, “apple”, “orange”, “watermelon”, “grape”]\n// 方法二\nvar uniqueFruits2 = […new Set(fruits)];\nconsole.log(uniqueFruits2); // returns [“banana”, “apple”, “orange”, “watermelon”, “grape”]\n```\n\n### 2.替换\n日常开发中经常需要替换或者删除一些指定的数据，遇到这种场景时一定要联想到`Array.protoType.splice`这个方法。传参时稍微复杂点，第一个参数是开始的索引，第二个参数是需要删除的数量，剩下的就是需要添加的值（可以是一个或者多个）。\n```javascript\nvar fruits = [“banana”, “apple”, “orange”, “watermelon”, “apple”, “orange”, “grape”, “apple”];\nfruits.splice(0, 2, “potato”, “tomato”);\nconsole.log(fruits); // returns [“potato”, “tomato”, “orange”, “watermelon”, “apple”, “orange”, “grape”, “apple”]\n```\n\n### 3.遍历数组\n平时我们使用最多的就是数组的`.map`方法，其实还有一个方法也能达到一样的目的，用法比较冷门，所以我们总是忽视，那就是`Array.from`\n```javascript\nvar friends = [\n    { name: ‘John’, age: 22 },\n    { name: ‘Peter’, age: 23 },\n    { name: ‘Mark’, age: 24 },\n    { name: ‘Maria’, age: 22 },\n    { name: ‘Monica’, age: 21 },\n    { name: ‘Martha’, age: 19 },\n]\n\nvar friendsNames = Array.from(friends, ({name}) => name);\nconsole.log(friendsNames); // returns [“John”, “Peter”, “Mark”, “Maria”, “Monica”, “Martha”]\n```\n\n### 4.清空数组\n有时我们需要清空一个数组，比如用户点击了清空购物车。可以一条一条地删除，但是很少有这么可爱的程序员，哈哈。其实一行代码就能搞定，那就是直接将之`length`设置成0\n```\nvar fruits = [“banana”, “apple”, “orange”, “watermelon”, “apple”, “orange”, “grape”, “apple”];\n\nfruits.length = 0;\nconsole.log(fruits); // returns []\n```\n\n### 5.数组转换成对象\n有时候需要将数组转换成对象的形式，使用`.map()`一类的迭代方法能达到目的，这里还有个更快的方法，前提是你正好希望对象的key就是数组的索引\n``` javascript\nvar fruits = [“banana”, “apple”, “orange”, “watermelon”];\nvar fruitsObj = { …fruits };\nconsole.log(fruitsObj); // returns {0: “banana”, 1: “apple”, 2: “orange”, 3: “watermelon”, 4: “apple”, 5: “orange”, 6: “grape”, 7: “apple”}\n```\n\n### 6.填充数组\n创建数组的时候，你有没有遇到过需要填充上默认值的场景，你肯定首先想到的就是循环这个数组。ES6提供了更便捷的`.fill`方法\n```  javascript\nvar newArray = new Array(10).fill(“1”);\nconsole.log(newArray); // returns [“1”, “1”, “1”, “1”, “1”, “1”, “1”, “1”, “1”, “1”, “1”]\n```\n\n### 7.合并数组\n你知道如何合并数组吗，答案就是`.concat()`。哈哈，但是今天的主角是ES6的展开运算符(...)\n``` javascript\nvar fruits = [“apple”, “banana”, “orange”];\nvar meat = [“poultry”, “beef”, “fish”];\nvar vegetables = [“potato”, “tomato”, “cucumber”];\nvar food = […fruits, …meat, …vegetables];\nconsole.log(food); // [“apple”, “banana”, “orange”, “poultry”, “beef”, “fish”, “potato”, “tomato”, “cucumber”]\n```\n\n### 8.两个数组的交集\n找出两个数组的交集算是一道经典的JS面试题了，这题能很好地考察候选人的逻辑是否清晰，对数组的掌握是否熟练。这题的答案有很多，下面展示的是ES6的简洁写法\n```\nvar numOne = [0, 2, 4, 6, 8, 8];\nvar numTwo = [1, 2, 3, 4, 5, 6];\nvar duplicatedValues = […new Set(numOne)].filter(item => numTwo.includes(item));\nconsole.log(duplicatedValues); // returns [2, 4, 6]\n```\n\n### 9.去除假值\n首先，我们熟悉下假值(falsy values)是什么？在JS中，假值有：`false`、`0`、`''`、`null`、`NaN`、`undefined`。现在我们找到这些假值并将它们移除，这里使用的是`.filter`方法\n``` javascript\nvar mixedArr = [0, “blue”, “”, NaN, 9, true, undefined, “white”, false];\nvar trueArr = mixedArr.filter(Boolean);\nconsole.log(trueArr); // returns [“blue”, 9, true, “white”]\n```\n\n### 10.随机值\n从数组中获取随机的一个值，也是一道经典的面试题哦。其实考察的核心知识是随机生成一个值x：x >= 0 并且 x < 数组的length\n``` javascript\nvar colors = [“blue”, “white”, “green”, “navy”, “pink”, “purple”, “orange”, “yellow”, “black”, “brown”];\nvar randomColor = colors[(Math.floor(Math.random() * (colors.length)))]\n```\n\n### 11.倒序\n怎么对数组进行倒序？只需要一行代码\n``` javascript\nvar colors = [“blue”, “white”, “green”, “navy”, “pink”, “purple”, “orange”, “yellow”, “black”, “brown”];\nvar reversedColors = colors.reverse();\n// 或者 colors.slice().reverse();\n// 两者有啥区别？\nconsole.log(reversedColors); // returns [“brown”, “black”, “yellow”, “orange”, “purple”, “pink”, “navy”, “green”, “white”, “blue”]\n```\n\n### 12.lastIndexOf()\n很多时候我们查找元素是否存在于某个数组中，经常使用`indexOf`方法，常常忽略`lastIndexOf`方法，后者会被使用的一个场景就是，某个数组中有重复的数据。\n``` javascript\nvar nums = [1, 5, 2, 6, 3, 5, 2, 3, 6, 5, 2, 7];\nvar lastIndex = nums.lastIndexOf(5);\nconsole.log(lastIndex); // returns 9\n```\n\n### 13.求和\n对数组中的所有元素进行求和，哈哈，又是一道如数家珍的面试题。答案也是很多，条条大道通罗马，这里使用的是`reduce`，`reduce`方法是很值得学习的知识点，用处很多。\n```\nvar nums = [1, 5, 2, 6];\nvar sum = nums.reduce((x, y) => x + y);\nconsole.log(sum); // returns 14\n```\n\n### 总结\n这篇文章，向小伙伴们展示了在JS中怎么去操作数组的种种技巧，其实在日常开发中，很可能还会遇到更加复杂的业务，希望你们能一一解剖成小问题，找到入手的地方。加油小伙伴们！\n\n> [原文链接](https://dev.to/duomly/13-useful-javascript-array-tips-and-tricks-you-should-know-2jfo)","source":"_posts/the-tips-of-array-you-must-know-in-js.md","raw":"---\ntitle: 2020年，你必须知道的JS数组技巧\ndate: 2020-02-19 23:24:16\ntags: javascript\n---\n在Javascript中，数组是一个重要且常见的知识点，我们经常将数据存储在数组中。作为一名Javascript工程师，数组必须要运用自如。这篇文章，向大家展示了在日常开发中，数组有哪些奇淫技巧值得关注和学习，让我们开始吧！\n\n### 1.去重\n这也是一道常见的面试题，怎么对JS的数组去重。在ES6的时代，有个非常快速且简单的方法，使用`new Set()`以及`Array.from()`或者`展开运算符(...)`\n``` javascript\nvar fruits = [“banana”, “apple”, “orange”, “watermelon”, “apple”, “orange”, “grape”, “apple”];\n\n\n// 方法一\nvar uniqueFruits = Array.from(new Set(fruits));\nconsole.log(uniqueFruits); // returns [“banana”, “apple”, “orange”, “watermelon”, “grape”]\n// 方法二\nvar uniqueFruits2 = […new Set(fruits)];\nconsole.log(uniqueFruits2); // returns [“banana”, “apple”, “orange”, “watermelon”, “grape”]\n```\n\n### 2.替换\n日常开发中经常需要替换或者删除一些指定的数据，遇到这种场景时一定要联想到`Array.protoType.splice`这个方法。传参时稍微复杂点，第一个参数是开始的索引，第二个参数是需要删除的数量，剩下的就是需要添加的值（可以是一个或者多个）。\n```javascript\nvar fruits = [“banana”, “apple”, “orange”, “watermelon”, “apple”, “orange”, “grape”, “apple”];\nfruits.splice(0, 2, “potato”, “tomato”);\nconsole.log(fruits); // returns [“potato”, “tomato”, “orange”, “watermelon”, “apple”, “orange”, “grape”, “apple”]\n```\n\n### 3.遍历数组\n平时我们使用最多的就是数组的`.map`方法，其实还有一个方法也能达到一样的目的，用法比较冷门，所以我们总是忽视，那就是`Array.from`\n```javascript\nvar friends = [\n    { name: ‘John’, age: 22 },\n    { name: ‘Peter’, age: 23 },\n    { name: ‘Mark’, age: 24 },\n    { name: ‘Maria’, age: 22 },\n    { name: ‘Monica’, age: 21 },\n    { name: ‘Martha’, age: 19 },\n]\n\nvar friendsNames = Array.from(friends, ({name}) => name);\nconsole.log(friendsNames); // returns [“John”, “Peter”, “Mark”, “Maria”, “Monica”, “Martha”]\n```\n\n### 4.清空数组\n有时我们需要清空一个数组，比如用户点击了清空购物车。可以一条一条地删除，但是很少有这么可爱的程序员，哈哈。其实一行代码就能搞定，那就是直接将之`length`设置成0\n```\nvar fruits = [“banana”, “apple”, “orange”, “watermelon”, “apple”, “orange”, “grape”, “apple”];\n\nfruits.length = 0;\nconsole.log(fruits); // returns []\n```\n\n### 5.数组转换成对象\n有时候需要将数组转换成对象的形式，使用`.map()`一类的迭代方法能达到目的，这里还有个更快的方法，前提是你正好希望对象的key就是数组的索引\n``` javascript\nvar fruits = [“banana”, “apple”, “orange”, “watermelon”];\nvar fruitsObj = { …fruits };\nconsole.log(fruitsObj); // returns {0: “banana”, 1: “apple”, 2: “orange”, 3: “watermelon”, 4: “apple”, 5: “orange”, 6: “grape”, 7: “apple”}\n```\n\n### 6.填充数组\n创建数组的时候，你有没有遇到过需要填充上默认值的场景，你肯定首先想到的就是循环这个数组。ES6提供了更便捷的`.fill`方法\n```  javascript\nvar newArray = new Array(10).fill(“1”);\nconsole.log(newArray); // returns [“1”, “1”, “1”, “1”, “1”, “1”, “1”, “1”, “1”, “1”, “1”]\n```\n\n### 7.合并数组\n你知道如何合并数组吗，答案就是`.concat()`。哈哈，但是今天的主角是ES6的展开运算符(...)\n``` javascript\nvar fruits = [“apple”, “banana”, “orange”];\nvar meat = [“poultry”, “beef”, “fish”];\nvar vegetables = [“potato”, “tomato”, “cucumber”];\nvar food = […fruits, …meat, …vegetables];\nconsole.log(food); // [“apple”, “banana”, “orange”, “poultry”, “beef”, “fish”, “potato”, “tomato”, “cucumber”]\n```\n\n### 8.两个数组的交集\n找出两个数组的交集算是一道经典的JS面试题了，这题能很好地考察候选人的逻辑是否清晰，对数组的掌握是否熟练。这题的答案有很多，下面展示的是ES6的简洁写法\n```\nvar numOne = [0, 2, 4, 6, 8, 8];\nvar numTwo = [1, 2, 3, 4, 5, 6];\nvar duplicatedValues = […new Set(numOne)].filter(item => numTwo.includes(item));\nconsole.log(duplicatedValues); // returns [2, 4, 6]\n```\n\n### 9.去除假值\n首先，我们熟悉下假值(falsy values)是什么？在JS中，假值有：`false`、`0`、`''`、`null`、`NaN`、`undefined`。现在我们找到这些假值并将它们移除，这里使用的是`.filter`方法\n``` javascript\nvar mixedArr = [0, “blue”, “”, NaN, 9, true, undefined, “white”, false];\nvar trueArr = mixedArr.filter(Boolean);\nconsole.log(trueArr); // returns [“blue”, 9, true, “white”]\n```\n\n### 10.随机值\n从数组中获取随机的一个值，也是一道经典的面试题哦。其实考察的核心知识是随机生成一个值x：x >= 0 并且 x < 数组的length\n``` javascript\nvar colors = [“blue”, “white”, “green”, “navy”, “pink”, “purple”, “orange”, “yellow”, “black”, “brown”];\nvar randomColor = colors[(Math.floor(Math.random() * (colors.length)))]\n```\n\n### 11.倒序\n怎么对数组进行倒序？只需要一行代码\n``` javascript\nvar colors = [“blue”, “white”, “green”, “navy”, “pink”, “purple”, “orange”, “yellow”, “black”, “brown”];\nvar reversedColors = colors.reverse();\n// 或者 colors.slice().reverse();\n// 两者有啥区别？\nconsole.log(reversedColors); // returns [“brown”, “black”, “yellow”, “orange”, “purple”, “pink”, “navy”, “green”, “white”, “blue”]\n```\n\n### 12.lastIndexOf()\n很多时候我们查找元素是否存在于某个数组中，经常使用`indexOf`方法，常常忽略`lastIndexOf`方法，后者会被使用的一个场景就是，某个数组中有重复的数据。\n``` javascript\nvar nums = [1, 5, 2, 6, 3, 5, 2, 3, 6, 5, 2, 7];\nvar lastIndex = nums.lastIndexOf(5);\nconsole.log(lastIndex); // returns 9\n```\n\n### 13.求和\n对数组中的所有元素进行求和，哈哈，又是一道如数家珍的面试题。答案也是很多，条条大道通罗马，这里使用的是`reduce`，`reduce`方法是很值得学习的知识点，用处很多。\n```\nvar nums = [1, 5, 2, 6];\nvar sum = nums.reduce((x, y) => x + y);\nconsole.log(sum); // returns 14\n```\n\n### 总结\n这篇文章，向小伙伴们展示了在JS中怎么去操作数组的种种技巧，其实在日常开发中，很可能还会遇到更加复杂的业务，希望你们能一一解剖成小问题，找到入手的地方。加油小伙伴们！\n\n> [原文链接](https://dev.to/duomly/13-useful-javascript-array-tips-and-tricks-you-should-know-2jfo)","slug":"the-tips-of-array-you-must-know-in-js","published":1,"updated":"2020-02-19T15:25:09.246Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7q4ux3s000g4wnu1axv7qqt","content":"<p>在Javascript中，数组是一个重要且常见的知识点，我们经常将数据存储在数组中。作为一名Javascript工程师，数组必须要运用自如。这篇文章，向大家展示了在日常开发中，数组有哪些奇淫技巧值得关注和学习，让我们开始吧！</p>\n<h3 id=\"1-去重\"><a href=\"#1-去重\" class=\"headerlink\" title=\"1.去重\"></a>1.去重</h3><p>这也是一道常见的面试题，怎么对JS的数组去重。在ES6的时代，有个非常快速且简单的方法，使用<code>new Set()</code>以及<code>Array.from()</code>或者<code>展开运算符(...)</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fruits = [“banana”, “apple”, “orange”, “watermelon”, “apple”, “orange”, “grape”, “apple”];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 方法一</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> uniqueFruits = <span class=\"built_in\">Array</span>.from(<span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(fruits));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(uniqueFruits); <span class=\"comment\">// returns [“banana”, “apple”, “orange”, “watermelon”, “grape”]</span></span><br><span class=\"line\"><span class=\"comment\">// 方法二</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> uniqueFruits2 = […<span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(fruits)];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(uniqueFruits2); <span class=\"comment\">// returns [“banana”, “apple”, “orange”, “watermelon”, “grape”]</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-替换\"><a href=\"#2-替换\" class=\"headerlink\" title=\"2.替换\"></a>2.替换</h3><p>日常开发中经常需要替换或者删除一些指定的数据，遇到这种场景时一定要联想到<code>Array.protoType.splice</code>这个方法。传参时稍微复杂点，第一个参数是开始的索引，第二个参数是需要删除的数量，剩下的就是需要添加的值（可以是一个或者多个）。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fruits = [“banana”, “apple”, “orange”, “watermelon”, “apple”, “orange”, “grape”, “apple”];</span><br><span class=\"line\">fruits.splice(<span class=\"number\">0</span>, <span class=\"number\">2</span>, “potato”, “tomato”);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(fruits); <span class=\"comment\">// returns [“potato”, “tomato”, “orange”, “watermelon”, “apple”, “orange”, “grape”, “apple”]</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"3-遍历数组\"><a href=\"#3-遍历数组\" class=\"headerlink\" title=\"3.遍历数组\"></a>3.遍历数组</h3><p>平时我们使用最多的就是数组的<code>.map</code>方法，其实还有一个方法也能达到一样的目的，用法比较冷门，所以我们总是忽视，那就是<code>Array.from</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> friends = [</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: ‘John’, <span class=\"attr\">age</span>: <span class=\"number\">22</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: ‘Peter’, <span class=\"attr\">age</span>: <span class=\"number\">23</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: ‘Mark’, <span class=\"attr\">age</span>: <span class=\"number\">24</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: ‘Maria’, <span class=\"attr\">age</span>: <span class=\"number\">22</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: ‘Monica’, <span class=\"attr\">age</span>: <span class=\"number\">21</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: ‘Martha’, <span class=\"attr\">age</span>: <span class=\"number\">19</span> &#125;,</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> friendsNames = <span class=\"built_in\">Array</span>.from(friends, (&#123;name&#125;) =&gt; name);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(friendsNames); <span class=\"comment\">// returns [“John”, “Peter”, “Mark”, “Maria”, “Monica”, “Martha”]</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"4-清空数组\"><a href=\"#4-清空数组\" class=\"headerlink\" title=\"4.清空数组\"></a>4.清空数组</h3><p>有时我们需要清空一个数组，比如用户点击了清空购物车。可以一条一条地删除，但是很少有这么可爱的程序员，哈哈。其实一行代码就能搞定，那就是直接将之<code>length</code>设置成0<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var fruits = [“banana”, “apple”, “orange”, “watermelon”, “apple”, “orange”, “grape”, “apple”];</span><br><span class=\"line\"></span><br><span class=\"line\">fruits.length = 0;</span><br><span class=\"line\">console.log(fruits); // returns []</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"5-数组转换成对象\"><a href=\"#5-数组转换成对象\" class=\"headerlink\" title=\"5.数组转换成对象\"></a>5.数组转换成对象</h3><p>有时候需要将数组转换成对象的形式，使用<code>.map()</code>一类的迭代方法能达到目的，这里还有个更快的方法，前提是你正好希望对象的key就是数组的索引<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fruits = [“banana”, “apple”, “orange”, “watermelon”];</span><br><span class=\"line\"><span class=\"keyword\">var</span> fruitsObj = &#123; …fruits &#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(fruitsObj); <span class=\"comment\">// returns &#123;0: “banana”, 1: “apple”, 2: “orange”, 3: “watermelon”, 4: “apple”, 5: “orange”, 6: “grape”, 7: “apple”&#125;</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"6-填充数组\"><a href=\"#6-填充数组\" class=\"headerlink\" title=\"6.填充数组\"></a>6.填充数组</h3><p>创建数组的时候，你有没有遇到过需要填充上默认值的场景，你肯定首先想到的就是循环这个数组。ES6提供了更便捷的<code>.fill</code>方法<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> newArray = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">10</span>).fill(“<span class=\"number\">1</span>”);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newArray); <span class=\"comment\">// returns [“1”, “1”, “1”, “1”, “1”, “1”, “1”, “1”, “1”, “1”, “1”]</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"7-合并数组\"><a href=\"#7-合并数组\" class=\"headerlink\" title=\"7.合并数组\"></a>7.合并数组</h3><p>你知道如何合并数组吗，答案就是<code>.concat()</code>。哈哈，但是今天的主角是ES6的展开运算符(…)<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fruits = [“apple”, “banana”, “orange”];</span><br><span class=\"line\"><span class=\"keyword\">var</span> meat = [“poultry”, “beef”, “fish”];</span><br><span class=\"line\"><span class=\"keyword\">var</span> vegetables = [“potato”, “tomato”, “cucumber”];</span><br><span class=\"line\"><span class=\"keyword\">var</span> food = […fruits, …meat, …vegetables];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(food); <span class=\"comment\">// [“apple”, “banana”, “orange”, “poultry”, “beef”, “fish”, “potato”, “tomato”, “cucumber”]</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"8-两个数组的交集\"><a href=\"#8-两个数组的交集\" class=\"headerlink\" title=\"8.两个数组的交集\"></a>8.两个数组的交集</h3><p>找出两个数组的交集算是一道经典的JS面试题了，这题能很好地考察候选人的逻辑是否清晰，对数组的掌握是否熟练。这题的答案有很多，下面展示的是ES6的简洁写法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var numOne = [0, 2, 4, 6, 8, 8];</span><br><span class=\"line\">var numTwo = [1, 2, 3, 4, 5, 6];</span><br><span class=\"line\">var duplicatedValues = […new Set(numOne)].filter(item =&gt; numTwo.includes(item));</span><br><span class=\"line\">console.log(duplicatedValues); // returns [2, 4, 6]</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"9-去除假值\"><a href=\"#9-去除假值\" class=\"headerlink\" title=\"9.去除假值\"></a>9.去除假值</h3><p>首先，我们熟悉下假值(falsy values)是什么？在JS中，假值有：<code>false</code>、<code>0</code>、<code>&#39;&#39;</code>、<code>null</code>、<code>NaN</code>、<code>undefined</code>。现在我们找到这些假值并将它们移除，这里使用的是<code>.filter</code>方法<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mixedArr = [<span class=\"number\">0</span>, “blue”, “”, <span class=\"literal\">NaN</span>, <span class=\"number\">9</span>, <span class=\"literal\">true</span>, <span class=\"literal\">undefined</span>, “white”, <span class=\"literal\">false</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> trueArr = mixedArr.filter(<span class=\"built_in\">Boolean</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(trueArr); <span class=\"comment\">// returns [“blue”, 9, true, “white”]</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"10-随机值\"><a href=\"#10-随机值\" class=\"headerlink\" title=\"10.随机值\"></a>10.随机值</h3><p>从数组中获取随机的一个值，也是一道经典的面试题哦。其实考察的核心知识是随机生成一个值x：x &gt;= 0 并且 x &lt; 数组的length<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> colors = [“blue”, “white”, “green”, “navy”, “pink”, “purple”, “orange”, “yellow”, “black”, “brown”];</span><br><span class=\"line\"><span class=\"keyword\">var</span> randomColor = colors[(<span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random() * (colors.length)))]</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"11-倒序\"><a href=\"#11-倒序\" class=\"headerlink\" title=\"11.倒序\"></a>11.倒序</h3><p>怎么对数组进行倒序？只需要一行代码<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> colors = [“blue”, “white”, “green”, “navy”, “pink”, “purple”, “orange”, “yellow”, “black”, “brown”];</span><br><span class=\"line\"><span class=\"keyword\">var</span> reversedColors = colors.reverse();</span><br><span class=\"line\"><span class=\"comment\">// 或者 colors.slice().reverse();</span></span><br><span class=\"line\"><span class=\"comment\">// 两者有啥区别？</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(reversedColors); <span class=\"comment\">// returns [“brown”, “black”, “yellow”, “orange”, “purple”, “pink”, “navy”, “green”, “white”, “blue”]</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"12-lastIndexOf\"><a href=\"#12-lastIndexOf\" class=\"headerlink\" title=\"12.lastIndexOf()\"></a>12.lastIndexOf()</h3><p>很多时候我们查找元素是否存在于某个数组中，经常使用<code>indexOf</code>方法，常常忽略<code>lastIndexOf</code>方法，后者会被使用的一个场景就是，某个数组中有重复的数据。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> nums = [<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">2</span>, <span class=\"number\">6</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">6</span>, <span class=\"number\">5</span>, <span class=\"number\">2</span>, <span class=\"number\">7</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> lastIndex = nums.lastIndexOf(<span class=\"number\">5</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(lastIndex); <span class=\"comment\">// returns 9</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"13-求和\"><a href=\"#13-求和\" class=\"headerlink\" title=\"13.求和\"></a>13.求和</h3><p>对数组中的所有元素进行求和，哈哈，又是一道如数家珍的面试题。答案也是很多，条条大道通罗马，这里使用的是<code>reduce</code>，<code>reduce</code>方法是很值得学习的知识点，用处很多。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var nums = [1, 5, 2, 6];</span><br><span class=\"line\">var sum = nums.reduce((x, y) =&gt; x + y);</span><br><span class=\"line\">console.log(sum); // returns 14</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>这篇文章，向小伙伴们展示了在JS中怎么去操作数组的种种技巧，其实在日常开发中，很可能还会遇到更加复杂的业务，希望你们能一一解剖成小问题，找到入手的地方。加油小伙伴们！</p>\n<blockquote>\n<p><a href=\"https://dev.to/duomly/13-useful-javascript-array-tips-and-tricks-you-should-know-2jfo\" target=\"_blank\" rel=\"noopener\">原文链接</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>在Javascript中，数组是一个重要且常见的知识点，我们经常将数据存储在数组中。作为一名Javascript工程师，数组必须要运用自如。这篇文章，向大家展示了在日常开发中，数组有哪些奇淫技巧值得关注和学习，让我们开始吧！</p>\n<h3 id=\"1-去重\"><a href=\"#1-去重\" class=\"headerlink\" title=\"1.去重\"></a>1.去重</h3><p>这也是一道常见的面试题，怎么对JS的数组去重。在ES6的时代，有个非常快速且简单的方法，使用<code>new Set()</code>以及<code>Array.from()</code>或者<code>展开运算符(...)</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fruits = [“banana”, “apple”, “orange”, “watermelon”, “apple”, “orange”, “grape”, “apple”];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 方法一</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> uniqueFruits = <span class=\"built_in\">Array</span>.from(<span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(fruits));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(uniqueFruits); <span class=\"comment\">// returns [“banana”, “apple”, “orange”, “watermelon”, “grape”]</span></span><br><span class=\"line\"><span class=\"comment\">// 方法二</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> uniqueFruits2 = […<span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(fruits)];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(uniqueFruits2); <span class=\"comment\">// returns [“banana”, “apple”, “orange”, “watermelon”, “grape”]</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-替换\"><a href=\"#2-替换\" class=\"headerlink\" title=\"2.替换\"></a>2.替换</h3><p>日常开发中经常需要替换或者删除一些指定的数据，遇到这种场景时一定要联想到<code>Array.protoType.splice</code>这个方法。传参时稍微复杂点，第一个参数是开始的索引，第二个参数是需要删除的数量，剩下的就是需要添加的值（可以是一个或者多个）。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fruits = [“banana”, “apple”, “orange”, “watermelon”, “apple”, “orange”, “grape”, “apple”];</span><br><span class=\"line\">fruits.splice(<span class=\"number\">0</span>, <span class=\"number\">2</span>, “potato”, “tomato”);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(fruits); <span class=\"comment\">// returns [“potato”, “tomato”, “orange”, “watermelon”, “apple”, “orange”, “grape”, “apple”]</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"3-遍历数组\"><a href=\"#3-遍历数组\" class=\"headerlink\" title=\"3.遍历数组\"></a>3.遍历数组</h3><p>平时我们使用最多的就是数组的<code>.map</code>方法，其实还有一个方法也能达到一样的目的，用法比较冷门，所以我们总是忽视，那就是<code>Array.from</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> friends = [</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: ‘John’, <span class=\"attr\">age</span>: <span class=\"number\">22</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: ‘Peter’, <span class=\"attr\">age</span>: <span class=\"number\">23</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: ‘Mark’, <span class=\"attr\">age</span>: <span class=\"number\">24</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: ‘Maria’, <span class=\"attr\">age</span>: <span class=\"number\">22</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: ‘Monica’, <span class=\"attr\">age</span>: <span class=\"number\">21</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: ‘Martha’, <span class=\"attr\">age</span>: <span class=\"number\">19</span> &#125;,</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> friendsNames = <span class=\"built_in\">Array</span>.from(friends, (&#123;name&#125;) =&gt; name);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(friendsNames); <span class=\"comment\">// returns [“John”, “Peter”, “Mark”, “Maria”, “Monica”, “Martha”]</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"4-清空数组\"><a href=\"#4-清空数组\" class=\"headerlink\" title=\"4.清空数组\"></a>4.清空数组</h3><p>有时我们需要清空一个数组，比如用户点击了清空购物车。可以一条一条地删除，但是很少有这么可爱的程序员，哈哈。其实一行代码就能搞定，那就是直接将之<code>length</code>设置成0<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var fruits = [“banana”, “apple”, “orange”, “watermelon”, “apple”, “orange”, “grape”, “apple”];</span><br><span class=\"line\"></span><br><span class=\"line\">fruits.length = 0;</span><br><span class=\"line\">console.log(fruits); // returns []</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"5-数组转换成对象\"><a href=\"#5-数组转换成对象\" class=\"headerlink\" title=\"5.数组转换成对象\"></a>5.数组转换成对象</h3><p>有时候需要将数组转换成对象的形式，使用<code>.map()</code>一类的迭代方法能达到目的，这里还有个更快的方法，前提是你正好希望对象的key就是数组的索引<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fruits = [“banana”, “apple”, “orange”, “watermelon”];</span><br><span class=\"line\"><span class=\"keyword\">var</span> fruitsObj = &#123; …fruits &#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(fruitsObj); <span class=\"comment\">// returns &#123;0: “banana”, 1: “apple”, 2: “orange”, 3: “watermelon”, 4: “apple”, 5: “orange”, 6: “grape”, 7: “apple”&#125;</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"6-填充数组\"><a href=\"#6-填充数组\" class=\"headerlink\" title=\"6.填充数组\"></a>6.填充数组</h3><p>创建数组的时候，你有没有遇到过需要填充上默认值的场景，你肯定首先想到的就是循环这个数组。ES6提供了更便捷的<code>.fill</code>方法<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> newArray = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">10</span>).fill(“<span class=\"number\">1</span>”);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newArray); <span class=\"comment\">// returns [“1”, “1”, “1”, “1”, “1”, “1”, “1”, “1”, “1”, “1”, “1”]</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"7-合并数组\"><a href=\"#7-合并数组\" class=\"headerlink\" title=\"7.合并数组\"></a>7.合并数组</h3><p>你知道如何合并数组吗，答案就是<code>.concat()</code>。哈哈，但是今天的主角是ES6的展开运算符(…)<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fruits = [“apple”, “banana”, “orange”];</span><br><span class=\"line\"><span class=\"keyword\">var</span> meat = [“poultry”, “beef”, “fish”];</span><br><span class=\"line\"><span class=\"keyword\">var</span> vegetables = [“potato”, “tomato”, “cucumber”];</span><br><span class=\"line\"><span class=\"keyword\">var</span> food = […fruits, …meat, …vegetables];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(food); <span class=\"comment\">// [“apple”, “banana”, “orange”, “poultry”, “beef”, “fish”, “potato”, “tomato”, “cucumber”]</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"8-两个数组的交集\"><a href=\"#8-两个数组的交集\" class=\"headerlink\" title=\"8.两个数组的交集\"></a>8.两个数组的交集</h3><p>找出两个数组的交集算是一道经典的JS面试题了，这题能很好地考察候选人的逻辑是否清晰，对数组的掌握是否熟练。这题的答案有很多，下面展示的是ES6的简洁写法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var numOne = [0, 2, 4, 6, 8, 8];</span><br><span class=\"line\">var numTwo = [1, 2, 3, 4, 5, 6];</span><br><span class=\"line\">var duplicatedValues = […new Set(numOne)].filter(item =&gt; numTwo.includes(item));</span><br><span class=\"line\">console.log(duplicatedValues); // returns [2, 4, 6]</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"9-去除假值\"><a href=\"#9-去除假值\" class=\"headerlink\" title=\"9.去除假值\"></a>9.去除假值</h3><p>首先，我们熟悉下假值(falsy values)是什么？在JS中，假值有：<code>false</code>、<code>0</code>、<code>&#39;&#39;</code>、<code>null</code>、<code>NaN</code>、<code>undefined</code>。现在我们找到这些假值并将它们移除，这里使用的是<code>.filter</code>方法<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mixedArr = [<span class=\"number\">0</span>, “blue”, “”, <span class=\"literal\">NaN</span>, <span class=\"number\">9</span>, <span class=\"literal\">true</span>, <span class=\"literal\">undefined</span>, “white”, <span class=\"literal\">false</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> trueArr = mixedArr.filter(<span class=\"built_in\">Boolean</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(trueArr); <span class=\"comment\">// returns [“blue”, 9, true, “white”]</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"10-随机值\"><a href=\"#10-随机值\" class=\"headerlink\" title=\"10.随机值\"></a>10.随机值</h3><p>从数组中获取随机的一个值，也是一道经典的面试题哦。其实考察的核心知识是随机生成一个值x：x &gt;= 0 并且 x &lt; 数组的length<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> colors = [“blue”, “white”, “green”, “navy”, “pink”, “purple”, “orange”, “yellow”, “black”, “brown”];</span><br><span class=\"line\"><span class=\"keyword\">var</span> randomColor = colors[(<span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random() * (colors.length)))]</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"11-倒序\"><a href=\"#11-倒序\" class=\"headerlink\" title=\"11.倒序\"></a>11.倒序</h3><p>怎么对数组进行倒序？只需要一行代码<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> colors = [“blue”, “white”, “green”, “navy”, “pink”, “purple”, “orange”, “yellow”, “black”, “brown”];</span><br><span class=\"line\"><span class=\"keyword\">var</span> reversedColors = colors.reverse();</span><br><span class=\"line\"><span class=\"comment\">// 或者 colors.slice().reverse();</span></span><br><span class=\"line\"><span class=\"comment\">// 两者有啥区别？</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(reversedColors); <span class=\"comment\">// returns [“brown”, “black”, “yellow”, “orange”, “purple”, “pink”, “navy”, “green”, “white”, “blue”]</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"12-lastIndexOf\"><a href=\"#12-lastIndexOf\" class=\"headerlink\" title=\"12.lastIndexOf()\"></a>12.lastIndexOf()</h3><p>很多时候我们查找元素是否存在于某个数组中，经常使用<code>indexOf</code>方法，常常忽略<code>lastIndexOf</code>方法，后者会被使用的一个场景就是，某个数组中有重复的数据。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> nums = [<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">2</span>, <span class=\"number\">6</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">6</span>, <span class=\"number\">5</span>, <span class=\"number\">2</span>, <span class=\"number\">7</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> lastIndex = nums.lastIndexOf(<span class=\"number\">5</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(lastIndex); <span class=\"comment\">// returns 9</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"13-求和\"><a href=\"#13-求和\" class=\"headerlink\" title=\"13.求和\"></a>13.求和</h3><p>对数组中的所有元素进行求和，哈哈，又是一道如数家珍的面试题。答案也是很多，条条大道通罗马，这里使用的是<code>reduce</code>，<code>reduce</code>方法是很值得学习的知识点，用处很多。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var nums = [1, 5, 2, 6];</span><br><span class=\"line\">var sum = nums.reduce((x, y) =&gt; x + y);</span><br><span class=\"line\">console.log(sum); // returns 14</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>这篇文章，向小伙伴们展示了在JS中怎么去操作数组的种种技巧，其实在日常开发中，很可能还会遇到更加复杂的业务，希望你们能一一解剖成小问题，找到入手的地方。加油小伙伴们！</p>\n<blockquote>\n<p><a href=\"https://dev.to/duomly/13-useful-javascript-array-tips-and-tricks-you-should-know-2jfo\" target=\"_blank\" rel=\"noopener\">原文链接</a></p>\n</blockquote>\n"},{"title":"打造自己的UI库--分割线篇","date":"2020-03-06T12:42:46.000Z","_content":"\n> 上篇讲解了[`按钮组件`](https://juejin.im/post/5e424baef265da571a39c187)的开发过程。\n\n接下来的主角是另一个很常见的组件：`分割线`\n\n### 使用场景\n顾名思义，为了达到更好的阅读效果，合理地对内容进行分割，这就是分割线。我们来看下今天要开发的几种分割线的实际效果：\n\n![](https://user-gold-cdn.xitu.io/2020/3/6/170af1ce03f2a88b?w=1009&h=364&f=png&s=17898)\n\n大体就是：\n- 普通分割线\n- 垂直分割线\n- 文字分割线\n- 虚线分割线\n- 以及以上分割线的组合使用\n\n### 定义props\n看看我们定义了哪些props来完成以上的几个功能：\n```\nprops: {\n    // 水平或者垂直\n    type: {\n      type: String,\n      default: \"horizontal\"\n    },\n    // 文字对齐（居左、居中、居右）\n    orientation: {\n      type: String,\n      default: \"center\"\n    },\n    // 虚线\n    dashed: {\n      type: Boolean,\n      default: false\n    },\n    // 大小\n    size: {\n      type: String,\n      default: \"default\"\n    }\n  }\n```\n\n### Template\nTemplate描述的是组件的`外形结构`，本组件可以分为三层，分别是：最外层的div、中间层的span、以及文字的slot\n```\n<template>\n  <div :class=\"classes\">\n    <span v-if=\"hasSlot\" :class=\"slotClasses\">\n      <slot />\n    </span>\n  </div>\n</template>\n```\n\n### CSS类的计算\n通过整合传入的props，为Template应用上相关的class，所以这部分都在computed中实现：\n```\ncomputed: {\n    // 判断是否传入文字\n    hasSlot() {\n      return !!this.$slots.default;\n    },\n    // 外层div的class\n    classes() {\n      return [\n        `${prefixCls}`,\n        `${prefixCls}-${this.type}`,\n        ...\n      ];\n    },\n    // 中间层span的class\n    slotClasses() {\n      return [`${prefixCls}-inner-text`];\n    }\n}\n```\n\n### 重头戏：CSS\n#### 首先看下水平或者垂直是怎么控制的：\n```\n.@{divider-prefix-cls} {\n    background: @border-color-split;\n    &-vertical{\n        display: inline-block;\n        margin: 0 8px;\n        height: 0.9em;\n        width: 1px;\n        vertical-align: middle;\n        position: relative;\n        top: -0.06em;\n    }\n    &-horizontal {\n        display: block;\n        height: 1px;\n        width: 100%;\n        min-width: 100%;\n        margin: 24px 0;\n        clear: both;\n    }\n}\n```\n#### 带有文字\n```\n.@{divider-prefix-cls} {\n    background: @border-color-split;\n    ...\n    &-horizontal&-with-text-center,\n    &-horizontal&-with-text-left,\n    &-horizontal&-with-text-right {\n        display: table;\n        white-space: nowrap;\n        text-align: center;\n        background: transparent;\n        margin: 16px 0;\n        font-size: 16px;\n        &:before,\n        &:after{\n            content: '';\n            display: table-cell;\n            position: relative;\n            top: 50%;\n            width: 50%;\n            border-top: 1px solid @border-color-split;\n            transform: translateY(50%);\n        }\n    }\n    ...\n```\n\n#### 控制文本对齐\n```\n    // ...\n    &-horizontal&-with-text-left {\n        &:before {\n            top: 50%;\n            width: 5%;\n        }\n        &:after {\n            top: 50%;\n            width: 95%;\n        }\n    }\n\n    &-horizontal&-with-text-right {\n        &:before {\n            top: 50%;\n            width: 95%;\n        }\n        &:after {\n            top: 50%;\n            width: 5%;\n        }\n    }\n    // ...\n```\n\n> CSS这块的代码不是很好讲解，虽然用到的都是平时常见的属性，但是能提炼到如此简洁的地步，并不是那么容易，建议大家完整地看下CSS部分的代码[divider.less](https://github.com/xch1029/vue-study/blob/master/src/style/components/divider.less)\n\n### 更多源码\n以整个的代码结构和思想来自ViewUI，真心觉得ViewUI的代码比ElementUI的容易阅读和学习（个人观点）\n\n[项目源码](https://github.com/xch1029/vue-study)\n\n[divider.vue](https://github.com/xch1029/vue-study/blob/master/src/components/divider/divider.vue)\n\n[divider.less](https://github.com/xch1029/vue-study/blob/master/src/style/components/divider.less)\n","source":"_posts/ui-divider.md","raw":"---\ntitle: 打造自己的UI库--分割线篇\ndate: 2020-03-06 20:42:46\ntags: Vue\n---\n\n> 上篇讲解了[`按钮组件`](https://juejin.im/post/5e424baef265da571a39c187)的开发过程。\n\n接下来的主角是另一个很常见的组件：`分割线`\n\n### 使用场景\n顾名思义，为了达到更好的阅读效果，合理地对内容进行分割，这就是分割线。我们来看下今天要开发的几种分割线的实际效果：\n\n![](https://user-gold-cdn.xitu.io/2020/3/6/170af1ce03f2a88b?w=1009&h=364&f=png&s=17898)\n\n大体就是：\n- 普通分割线\n- 垂直分割线\n- 文字分割线\n- 虚线分割线\n- 以及以上分割线的组合使用\n\n### 定义props\n看看我们定义了哪些props来完成以上的几个功能：\n```\nprops: {\n    // 水平或者垂直\n    type: {\n      type: String,\n      default: \"horizontal\"\n    },\n    // 文字对齐（居左、居中、居右）\n    orientation: {\n      type: String,\n      default: \"center\"\n    },\n    // 虚线\n    dashed: {\n      type: Boolean,\n      default: false\n    },\n    // 大小\n    size: {\n      type: String,\n      default: \"default\"\n    }\n  }\n```\n\n### Template\nTemplate描述的是组件的`外形结构`，本组件可以分为三层，分别是：最外层的div、中间层的span、以及文字的slot\n```\n<template>\n  <div :class=\"classes\">\n    <span v-if=\"hasSlot\" :class=\"slotClasses\">\n      <slot />\n    </span>\n  </div>\n</template>\n```\n\n### CSS类的计算\n通过整合传入的props，为Template应用上相关的class，所以这部分都在computed中实现：\n```\ncomputed: {\n    // 判断是否传入文字\n    hasSlot() {\n      return !!this.$slots.default;\n    },\n    // 外层div的class\n    classes() {\n      return [\n        `${prefixCls}`,\n        `${prefixCls}-${this.type}`,\n        ...\n      ];\n    },\n    // 中间层span的class\n    slotClasses() {\n      return [`${prefixCls}-inner-text`];\n    }\n}\n```\n\n### 重头戏：CSS\n#### 首先看下水平或者垂直是怎么控制的：\n```\n.@{divider-prefix-cls} {\n    background: @border-color-split;\n    &-vertical{\n        display: inline-block;\n        margin: 0 8px;\n        height: 0.9em;\n        width: 1px;\n        vertical-align: middle;\n        position: relative;\n        top: -0.06em;\n    }\n    &-horizontal {\n        display: block;\n        height: 1px;\n        width: 100%;\n        min-width: 100%;\n        margin: 24px 0;\n        clear: both;\n    }\n}\n```\n#### 带有文字\n```\n.@{divider-prefix-cls} {\n    background: @border-color-split;\n    ...\n    &-horizontal&-with-text-center,\n    &-horizontal&-with-text-left,\n    &-horizontal&-with-text-right {\n        display: table;\n        white-space: nowrap;\n        text-align: center;\n        background: transparent;\n        margin: 16px 0;\n        font-size: 16px;\n        &:before,\n        &:after{\n            content: '';\n            display: table-cell;\n            position: relative;\n            top: 50%;\n            width: 50%;\n            border-top: 1px solid @border-color-split;\n            transform: translateY(50%);\n        }\n    }\n    ...\n```\n\n#### 控制文本对齐\n```\n    // ...\n    &-horizontal&-with-text-left {\n        &:before {\n            top: 50%;\n            width: 5%;\n        }\n        &:after {\n            top: 50%;\n            width: 95%;\n        }\n    }\n\n    &-horizontal&-with-text-right {\n        &:before {\n            top: 50%;\n            width: 95%;\n        }\n        &:after {\n            top: 50%;\n            width: 5%;\n        }\n    }\n    // ...\n```\n\n> CSS这块的代码不是很好讲解，虽然用到的都是平时常见的属性，但是能提炼到如此简洁的地步，并不是那么容易，建议大家完整地看下CSS部分的代码[divider.less](https://github.com/xch1029/vue-study/blob/master/src/style/components/divider.less)\n\n### 更多源码\n以整个的代码结构和思想来自ViewUI，真心觉得ViewUI的代码比ElementUI的容易阅读和学习（个人观点）\n\n[项目源码](https://github.com/xch1029/vue-study)\n\n[divider.vue](https://github.com/xch1029/vue-study/blob/master/src/components/divider/divider.vue)\n\n[divider.less](https://github.com/xch1029/vue-study/blob/master/src/style/components/divider.less)\n","slug":"ui-divider","published":1,"updated":"2020-03-10T12:43:32.244Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7q4ux3x000j4wnu3i7mgcn2","content":"<blockquote>\n<p>上篇讲解了<a href=\"https://juejin.im/post/5e424baef265da571a39c187\" target=\"_blank\" rel=\"noopener\"><code>按钮组件</code></a>的开发过程。</p>\n</blockquote>\n<p>接下来的主角是另一个很常见的组件：<code>分割线</code></p>\n<h3 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h3><p>顾名思义，为了达到更好的阅读效果，合理地对内容进行分割，这就是分割线。我们来看下今天要开发的几种分割线的实际效果：</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/3/6/170af1ce03f2a88b?w=1009&amp;h=364&amp;f=png&amp;s=17898\" alt></p>\n<p>大体就是：</p>\n<ul>\n<li>普通分割线</li>\n<li>垂直分割线</li>\n<li>文字分割线</li>\n<li>虚线分割线</li>\n<li>以及以上分割线的组合使用</li>\n</ul>\n<h3 id=\"定义props\"><a href=\"#定义props\" class=\"headerlink\" title=\"定义props\"></a>定义props</h3><p>看看我们定义了哪些props来完成以上的几个功能：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">props: &#123;</span><br><span class=\"line\">    // 水平或者垂直</span><br><span class=\"line\">    type: &#123;</span><br><span class=\"line\">      type: String,</span><br><span class=\"line\">      default: &quot;horizontal&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    // 文字对齐（居左、居中、居右）</span><br><span class=\"line\">    orientation: &#123;</span><br><span class=\"line\">      type: String,</span><br><span class=\"line\">      default: &quot;center&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    // 虚线</span><br><span class=\"line\">    dashed: &#123;</span><br><span class=\"line\">      type: Boolean,</span><br><span class=\"line\">      default: false</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    // 大小</span><br><span class=\"line\">    size: &#123;</span><br><span class=\"line\">      type: String,</span><br><span class=\"line\">      default: &quot;default&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Template\"><a href=\"#Template\" class=\"headerlink\" title=\"Template\"></a>Template</h3><p>Template描述的是组件的<code>外形结构</code>，本组件可以分为三层，分别是：最外层的div、中间层的span、以及文字的slot<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div :class=&quot;classes&quot;&gt;</span><br><span class=\"line\">    &lt;span v-if=&quot;hasSlot&quot; :class=&quot;slotClasses&quot;&gt;</span><br><span class=\"line\">      &lt;slot /&gt;</span><br><span class=\"line\">    &lt;/span&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"CSS类的计算\"><a href=\"#CSS类的计算\" class=\"headerlink\" title=\"CSS类的计算\"></a>CSS类的计算</h3><p>通过整合传入的props，为Template应用上相关的class，所以这部分都在computed中实现：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed: &#123;</span><br><span class=\"line\">    // 判断是否传入文字</span><br><span class=\"line\">    hasSlot() &#123;</span><br><span class=\"line\">      return !!this.$slots.default;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    // 外层div的class</span><br><span class=\"line\">    classes() &#123;</span><br><span class=\"line\">      return [</span><br><span class=\"line\">        `$&#123;prefixCls&#125;`,</span><br><span class=\"line\">        `$&#123;prefixCls&#125;-$&#123;this.type&#125;`,</span><br><span class=\"line\">        ...</span><br><span class=\"line\">      ];</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    // 中间层span的class</span><br><span class=\"line\">    slotClasses() &#123;</span><br><span class=\"line\">      return [`$&#123;prefixCls&#125;-inner-text`];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"重头戏：CSS\"><a href=\"#重头戏：CSS\" class=\"headerlink\" title=\"重头戏：CSS\"></a>重头戏：CSS</h3><h4 id=\"首先看下水平或者垂直是怎么控制的：\"><a href=\"#首先看下水平或者垂直是怎么控制的：\" class=\"headerlink\" title=\"首先看下水平或者垂直是怎么控制的：\"></a>首先看下水平或者垂直是怎么控制的：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.@&#123;divider-prefix-cls&#125; &#123;</span><br><span class=\"line\">    background: @border-color-split;</span><br><span class=\"line\">    &amp;-vertical&#123;</span><br><span class=\"line\">        display: inline-block;</span><br><span class=\"line\">        margin: 0 8px;</span><br><span class=\"line\">        height: 0.9em;</span><br><span class=\"line\">        width: 1px;</span><br><span class=\"line\">        vertical-align: middle;</span><br><span class=\"line\">        position: relative;</span><br><span class=\"line\">        top: -0.06em;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &amp;-horizontal &#123;</span><br><span class=\"line\">        display: block;</span><br><span class=\"line\">        height: 1px;</span><br><span class=\"line\">        width: 100%;</span><br><span class=\"line\">        min-width: 100%;</span><br><span class=\"line\">        margin: 24px 0;</span><br><span class=\"line\">        clear: both;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"带有文字\"><a href=\"#带有文字\" class=\"headerlink\" title=\"带有文字\"></a>带有文字</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.@&#123;divider-prefix-cls&#125; &#123;</span><br><span class=\"line\">    background: @border-color-split;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    &amp;-horizontal&amp;-with-text-center,</span><br><span class=\"line\">    &amp;-horizontal&amp;-with-text-left,</span><br><span class=\"line\">    &amp;-horizontal&amp;-with-text-right &#123;</span><br><span class=\"line\">        display: table;</span><br><span class=\"line\">        white-space: nowrap;</span><br><span class=\"line\">        text-align: center;</span><br><span class=\"line\">        background: transparent;</span><br><span class=\"line\">        margin: 16px 0;</span><br><span class=\"line\">        font-size: 16px;</span><br><span class=\"line\">        &amp;:before,</span><br><span class=\"line\">        &amp;:after&#123;</span><br><span class=\"line\">            content: &apos;&apos;;</span><br><span class=\"line\">            display: table-cell;</span><br><span class=\"line\">            position: relative;</span><br><span class=\"line\">            top: 50%;</span><br><span class=\"line\">            width: 50%;</span><br><span class=\"line\">            border-top: 1px solid @border-color-split;</span><br><span class=\"line\">            transform: translateY(50%);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br></pre></td></tr></table></figure>\n<h4 id=\"控制文本对齐\"><a href=\"#控制文本对齐\" class=\"headerlink\" title=\"控制文本对齐\"></a>控制文本对齐</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// ...</span><br><span class=\"line\">&amp;-horizontal&amp;-with-text-left &#123;</span><br><span class=\"line\">    &amp;:before &#123;</span><br><span class=\"line\">        top: 50%;</span><br><span class=\"line\">        width: 5%;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &amp;:after &#123;</span><br><span class=\"line\">        top: 50%;</span><br><span class=\"line\">        width: 95%;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&amp;-horizontal&amp;-with-text-right &#123;</span><br><span class=\"line\">    &amp;:before &#123;</span><br><span class=\"line\">        top: 50%;</span><br><span class=\"line\">        width: 95%;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &amp;:after &#123;</span><br><span class=\"line\">        top: 50%;</span><br><span class=\"line\">        width: 5%;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// ...</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>CSS这块的代码不是很好讲解，虽然用到的都是平时常见的属性，但是能提炼到如此简洁的地步，并不是那么容易，建议大家完整地看下CSS部分的代码<a href=\"https://github.com/xch1029/vue-study/blob/master/src/style/components/divider.less\" target=\"_blank\" rel=\"noopener\">divider.less</a></p>\n</blockquote>\n<h3 id=\"更多源码\"><a href=\"#更多源码\" class=\"headerlink\" title=\"更多源码\"></a>更多源码</h3><p>以整个的代码结构和思想来自ViewUI，真心觉得ViewUI的代码比ElementUI的容易阅读和学习（个人观点）</p>\n<p><a href=\"https://github.com/xch1029/vue-study\" target=\"_blank\" rel=\"noopener\">项目源码</a></p>\n<p><a href=\"https://github.com/xch1029/vue-study/blob/master/src/components/divider/divider.vue\" target=\"_blank\" rel=\"noopener\">divider.vue</a></p>\n<p><a href=\"https://github.com/xch1029/vue-study/blob/master/src/style/components/divider.less\" target=\"_blank\" rel=\"noopener\">divider.less</a></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>上篇讲解了<a href=\"https://juejin.im/post/5e424baef265da571a39c187\" target=\"_blank\" rel=\"noopener\"><code>按钮组件</code></a>的开发过程。</p>\n</blockquote>\n<p>接下来的主角是另一个很常见的组件：<code>分割线</code></p>\n<h3 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h3><p>顾名思义，为了达到更好的阅读效果，合理地对内容进行分割，这就是分割线。我们来看下今天要开发的几种分割线的实际效果：</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/3/6/170af1ce03f2a88b?w=1009&amp;h=364&amp;f=png&amp;s=17898\" alt></p>\n<p>大体就是：</p>\n<ul>\n<li>普通分割线</li>\n<li>垂直分割线</li>\n<li>文字分割线</li>\n<li>虚线分割线</li>\n<li>以及以上分割线的组合使用</li>\n</ul>\n<h3 id=\"定义props\"><a href=\"#定义props\" class=\"headerlink\" title=\"定义props\"></a>定义props</h3><p>看看我们定义了哪些props来完成以上的几个功能：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">props: &#123;</span><br><span class=\"line\">    // 水平或者垂直</span><br><span class=\"line\">    type: &#123;</span><br><span class=\"line\">      type: String,</span><br><span class=\"line\">      default: &quot;horizontal&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    // 文字对齐（居左、居中、居右）</span><br><span class=\"line\">    orientation: &#123;</span><br><span class=\"line\">      type: String,</span><br><span class=\"line\">      default: &quot;center&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    // 虚线</span><br><span class=\"line\">    dashed: &#123;</span><br><span class=\"line\">      type: Boolean,</span><br><span class=\"line\">      default: false</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    // 大小</span><br><span class=\"line\">    size: &#123;</span><br><span class=\"line\">      type: String,</span><br><span class=\"line\">      default: &quot;default&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Template\"><a href=\"#Template\" class=\"headerlink\" title=\"Template\"></a>Template</h3><p>Template描述的是组件的<code>外形结构</code>，本组件可以分为三层，分别是：最外层的div、中间层的span、以及文字的slot<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div :class=&quot;classes&quot;&gt;</span><br><span class=\"line\">    &lt;span v-if=&quot;hasSlot&quot; :class=&quot;slotClasses&quot;&gt;</span><br><span class=\"line\">      &lt;slot /&gt;</span><br><span class=\"line\">    &lt;/span&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"CSS类的计算\"><a href=\"#CSS类的计算\" class=\"headerlink\" title=\"CSS类的计算\"></a>CSS类的计算</h3><p>通过整合传入的props，为Template应用上相关的class，所以这部分都在computed中实现：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed: &#123;</span><br><span class=\"line\">    // 判断是否传入文字</span><br><span class=\"line\">    hasSlot() &#123;</span><br><span class=\"line\">      return !!this.$slots.default;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    // 外层div的class</span><br><span class=\"line\">    classes() &#123;</span><br><span class=\"line\">      return [</span><br><span class=\"line\">        `$&#123;prefixCls&#125;`,</span><br><span class=\"line\">        `$&#123;prefixCls&#125;-$&#123;this.type&#125;`,</span><br><span class=\"line\">        ...</span><br><span class=\"line\">      ];</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    // 中间层span的class</span><br><span class=\"line\">    slotClasses() &#123;</span><br><span class=\"line\">      return [`$&#123;prefixCls&#125;-inner-text`];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"重头戏：CSS\"><a href=\"#重头戏：CSS\" class=\"headerlink\" title=\"重头戏：CSS\"></a>重头戏：CSS</h3><h4 id=\"首先看下水平或者垂直是怎么控制的：\"><a href=\"#首先看下水平或者垂直是怎么控制的：\" class=\"headerlink\" title=\"首先看下水平或者垂直是怎么控制的：\"></a>首先看下水平或者垂直是怎么控制的：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.@&#123;divider-prefix-cls&#125; &#123;</span><br><span class=\"line\">    background: @border-color-split;</span><br><span class=\"line\">    &amp;-vertical&#123;</span><br><span class=\"line\">        display: inline-block;</span><br><span class=\"line\">        margin: 0 8px;</span><br><span class=\"line\">        height: 0.9em;</span><br><span class=\"line\">        width: 1px;</span><br><span class=\"line\">        vertical-align: middle;</span><br><span class=\"line\">        position: relative;</span><br><span class=\"line\">        top: -0.06em;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &amp;-horizontal &#123;</span><br><span class=\"line\">        display: block;</span><br><span class=\"line\">        height: 1px;</span><br><span class=\"line\">        width: 100%;</span><br><span class=\"line\">        min-width: 100%;</span><br><span class=\"line\">        margin: 24px 0;</span><br><span class=\"line\">        clear: both;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"带有文字\"><a href=\"#带有文字\" class=\"headerlink\" title=\"带有文字\"></a>带有文字</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.@&#123;divider-prefix-cls&#125; &#123;</span><br><span class=\"line\">    background: @border-color-split;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    &amp;-horizontal&amp;-with-text-center,</span><br><span class=\"line\">    &amp;-horizontal&amp;-with-text-left,</span><br><span class=\"line\">    &amp;-horizontal&amp;-with-text-right &#123;</span><br><span class=\"line\">        display: table;</span><br><span class=\"line\">        white-space: nowrap;</span><br><span class=\"line\">        text-align: center;</span><br><span class=\"line\">        background: transparent;</span><br><span class=\"line\">        margin: 16px 0;</span><br><span class=\"line\">        font-size: 16px;</span><br><span class=\"line\">        &amp;:before,</span><br><span class=\"line\">        &amp;:after&#123;</span><br><span class=\"line\">            content: &apos;&apos;;</span><br><span class=\"line\">            display: table-cell;</span><br><span class=\"line\">            position: relative;</span><br><span class=\"line\">            top: 50%;</span><br><span class=\"line\">            width: 50%;</span><br><span class=\"line\">            border-top: 1px solid @border-color-split;</span><br><span class=\"line\">            transform: translateY(50%);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br></pre></td></tr></table></figure>\n<h4 id=\"控制文本对齐\"><a href=\"#控制文本对齐\" class=\"headerlink\" title=\"控制文本对齐\"></a>控制文本对齐</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// ...</span><br><span class=\"line\">&amp;-horizontal&amp;-with-text-left &#123;</span><br><span class=\"line\">    &amp;:before &#123;</span><br><span class=\"line\">        top: 50%;</span><br><span class=\"line\">        width: 5%;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &amp;:after &#123;</span><br><span class=\"line\">        top: 50%;</span><br><span class=\"line\">        width: 95%;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&amp;-horizontal&amp;-with-text-right &#123;</span><br><span class=\"line\">    &amp;:before &#123;</span><br><span class=\"line\">        top: 50%;</span><br><span class=\"line\">        width: 95%;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &amp;:after &#123;</span><br><span class=\"line\">        top: 50%;</span><br><span class=\"line\">        width: 5%;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// ...</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>CSS这块的代码不是很好讲解，虽然用到的都是平时常见的属性，但是能提炼到如此简洁的地步，并不是那么容易，建议大家完整地看下CSS部分的代码<a href=\"https://github.com/xch1029/vue-study/blob/master/src/style/components/divider.less\" target=\"_blank\" rel=\"noopener\">divider.less</a></p>\n</blockquote>\n<h3 id=\"更多源码\"><a href=\"#更多源码\" class=\"headerlink\" title=\"更多源码\"></a>更多源码</h3><p>以整个的代码结构和思想来自ViewUI，真心觉得ViewUI的代码比ElementUI的容易阅读和学习（个人观点）</p>\n<p><a href=\"https://github.com/xch1029/vue-study\" target=\"_blank\" rel=\"noopener\">项目源码</a></p>\n<p><a href=\"https://github.com/xch1029/vue-study/blob/master/src/components/divider/divider.vue\" target=\"_blank\" rel=\"noopener\">divider.vue</a></p>\n<p><a href=\"https://github.com/xch1029/vue-study/blob/master/src/style/components/divider.less\" target=\"_blank\" rel=\"noopener\">divider.less</a></p>\n"},{"title":"2020年，必须拥有自己的博客网站(上)","date":"2020-02-23T08:26:18.000Z","_content":"很多优秀的技术人员都有自己的博客，写博客已经成了一种习惯。作为一名程序员，你，为什么要坚持写博客？答案有很多：\n\n- 能让人具备更好的总结能力\n- 加深自己对某项技术的理解\n- 获得别人的认可\n- 提高自己的表达能力\n- 为自己的生活留下足迹\n- 证明自己的能力\n- 开源精神\n- 用来装逼\n- ...\n\n不管是啥理由，一个优秀的程序员都应该不断的去激励自己，在日常中检讨自己，与千万优秀人看齐，把优秀当做一直习惯。\n\n所以，今天我们就来一步一步实现自己那独一无二的博客！\n\n### 前言\n搭建博客有很多种方案，可以从零开发所有功能([阮一峰的个人网站](http://www.ruanyifeng.com/home.html))，但这有点让人头大，繁琐的事务实在是太多了：页面的编写、后台的开发、留言板的开发。。。让人难以为继！另一种方案就是基于现有的集成框架，我们只关心自己输出的文章，其他的事情都留给框架去做。\n\n目前，这类的框架很多：`WordPress`、`Jekyll`、`VuePress`、`Hexo`等等，都是很优秀的框架。今天，我们尝试使用`Hexo`来搭建博客。\n\n### 初始化项目\n在使用`hexo-cli`初始化项目之前，我们需要使用npm以全局安装:\n```\nnpm install hexo-cli -g\n```\n初始化一个项目：\n```\nhexo init myblog\ncd myblog\nnpm install\nhexo server\n```\n因为网络的原因，加载的时间可能比较长，耐心等待下。\n\n然后，访问[http://localhost:4000/](http://localhost:4000/)你的博客就这么跑起来了：\n![](https://user-gold-cdn.xitu.io/2020/2/23/17070b5619fd2a0e?w=1380&h=1040&f=png&s=423328)\n\n就这么跑起来了！！！很不可思议。现在有两个亟待解决的问题：\n\n- 一：博客外观使用的是默认的`landscape`主题，太死板而且容易撞衫\n- 二：我们的博客现在只是运行在本地，我们需要将之放到Github上，并且可以使用网址访问\n\n我们先来解决**问题二**，我们迫不及待地想通过`url`来访问我们的站点了!\n\n### 将代码托管到github上\n针对国内访问`Github`网速很慢，我们也可以使用`码云`来托管代码，大体的配置都是相似的。只是个人觉得`Github`更正统一点，所以这里使用的是`Github`\n\n要想将代码托管到`Github`上，我们需要新建一个项目：\n\n![](https://user-gold-cdn.xitu.io/2020/2/23/17070bdd1e57eece?w=379&h=242&f=png&s=15109)\n\n点击`New repository`按钮以新建项目：\n\n![](https://user-gold-cdn.xitu.io/2020/2/23/17070be88f40c738?w=1181&h=851&f=png&s=59408)\n\n\n填写上仓库名称和描述，然后点击`Create repository`按钮：\n\n\n![](https://user-gold-cdn.xitu.io/2020/2/23/17070bff10028013?w=1329&h=802&f=png&s=69581)\n\n看到这个页面，就代表仓库真的创建完成了，现在我们跟着红框中的步骤，将本地的源码推送到`Github`上：\n```\ngit init\ngit add .\ngit commit -m \"first commit\"\ngit remote add origin https://github.com/xch1029/myblog.git\ngit push -u origin master\n```\n\n![](https://user-gold-cdn.xitu.io/2020/2/23/17070c841b7ef3f1?w=1184&h=731&f=png&s=57195)\n\n一切顺利的话，再次访问仓库的页面，我们看到了提交的代码，这说明我们本地的源码已经`push`到了仓库里。\n\n> 我们的目标是使用`url`来访问我们的博客，所以我们下一步使用的技术是`github-pages`，使用`github-pages`来展示我们的博客。\n\n### 自动部署的github-pages\n虽然使用的是`github-pages`，但是这并不意味着我们需要手动打包再手动部署，这一切繁杂的事务都让`travis-ci`帮我们完成吧。\n\n> 简单介绍下`travis-ci`：`travis-ci`是一个不需要自己搭建的在线持续集成工具，其最大的特点就是能和`github`无缝衔接，而且是免费使用（针对开源项目）。使用起来也非的常容易，只需要在项目中添加`.travis.yml`配置文件\n\n### 配置自动化部署\n\n![](https://user-gold-cdn.xitu.io/2020/2/23/17070da9d7feecc3?w=1260&h=622&f=png&s=55151)\n使用`Github`账号登录[travis](https://www.travis-ci.org/)，然后将我们的博客仓库的开关打开，这是为了告诉`travis`允许使用项目中的`.travis.yml`以自动部署。\n\n### 编写.travis.yml\n在项目的根目录中添加文件`.travis.yml`\n``` yml\nsudo: false\nlanguage: node_js\nnode_js:\n  - 12 # 使用12的LTS版本\ncache: npm\nbranches:\n  only:\n    - master # 只监听master分支的push\nscript:\n  - hexo generate # 自动化构建的脚本\ndeploy:\n  provider: pages\n  skip-cleanup: true\n  github-token: $GITHUB_TOKEN\n  keep-history: true\n  on:\n    branch: master\n  local-dir: public\n```\n\n注意两点：\n- 一：在`_config.yml`中，第17行的root属性，需要改为和项目名字一样，这是为了保证github-pages的静态资源路径引用正确\n```\n# 17行改为：\nroot: /myblog/\n```\n- 二：在`.travis.yml`中我们使用了变量`$GITHUB_TOKEN`，这是`travis`能够操作`Github`的关键。我们需要在`Github`中生成一个Token，再复制到`travis`中:\n\n\n![](https://user-gold-cdn.xitu.io/2020/2/23/17070f53ace8e4ca?w=861&h=298&f=png&s=23595)\n    \n前往Github[新建 Personal Access Token](https://github.com/settings/tokens)，只勾选 `repo` 的权限并生成一个新的 Token。Token 生成后请复制并保存好。\n\n\n\n![](https://user-gold-cdn.xitu.io/2020/2/23/17070fe514c4b8e5?w=1507&h=187&f=png&s=10228)\n\n回到 Travis CI，前往你的 repository 的设置页面，在 `Environment Variables` 下新建一个环境变量，Name 为 `GITHUB_TOKEN`，Value 为刚才你在 GitHub 生成的 Token。确保 `DISPLAY VALUE IN BUILD LOG` 保持不被勾选 避免你的 Token 泄漏。点击 Add 保存。\n\n**这就是所有内容了！！！**，将我们的代码提交了，看看有没有触发`travis`的自动构建：\n```\ngit add .\ngit commit -m \"add travis\"\ngit push\n```\n\n### 验证\n现在访问地址：[https://xch1029.github.io/myblog](https://xch1029.github.io/myblog)，其中的`xch1029`替换成你的Github名字。\n\n### 背后的原理\n其实，travis新建了一个分支`gh-pages`以用作展示`github-pages`，而分支的内容就是我们构建后的静态资源。\n\n![](https://user-gold-cdn.xitu.io/2020/2/23/170710a5a632be9b?w=704&h=543&f=png&s=29694)\n\n![](https://user-gold-cdn.xitu.io/2020/2/23/170710a7bfe049b6?w=901&h=306&f=png&s=17418)\n\n### 后续文章\n因为篇幅限制（不想将文章写得太长，以免难以阅读），今天就写到这里！因为我们已经可以访问我们的博客了！\n\n关于博文撰写、主题配置、自定义样式、自动化部署到服务器等文章，会在后续持续产出，请保持关注！\n\n\n\n\n\n","source":"_posts/write-a-blog-for-yourself.md","raw":"---\ntitle: 2020年，必须拥有自己的博客网站(上)\ndate: 2020-02-23 16:26:18\ntags: Hexo\n---\n很多优秀的技术人员都有自己的博客，写博客已经成了一种习惯。作为一名程序员，你，为什么要坚持写博客？答案有很多：\n\n- 能让人具备更好的总结能力\n- 加深自己对某项技术的理解\n- 获得别人的认可\n- 提高自己的表达能力\n- 为自己的生活留下足迹\n- 证明自己的能力\n- 开源精神\n- 用来装逼\n- ...\n\n不管是啥理由，一个优秀的程序员都应该不断的去激励自己，在日常中检讨自己，与千万优秀人看齐，把优秀当做一直习惯。\n\n所以，今天我们就来一步一步实现自己那独一无二的博客！\n\n### 前言\n搭建博客有很多种方案，可以从零开发所有功能([阮一峰的个人网站](http://www.ruanyifeng.com/home.html))，但这有点让人头大，繁琐的事务实在是太多了：页面的编写、后台的开发、留言板的开发。。。让人难以为继！另一种方案就是基于现有的集成框架，我们只关心自己输出的文章，其他的事情都留给框架去做。\n\n目前，这类的框架很多：`WordPress`、`Jekyll`、`VuePress`、`Hexo`等等，都是很优秀的框架。今天，我们尝试使用`Hexo`来搭建博客。\n\n### 初始化项目\n在使用`hexo-cli`初始化项目之前，我们需要使用npm以全局安装:\n```\nnpm install hexo-cli -g\n```\n初始化一个项目：\n```\nhexo init myblog\ncd myblog\nnpm install\nhexo server\n```\n因为网络的原因，加载的时间可能比较长，耐心等待下。\n\n然后，访问[http://localhost:4000/](http://localhost:4000/)你的博客就这么跑起来了：\n![](https://user-gold-cdn.xitu.io/2020/2/23/17070b5619fd2a0e?w=1380&h=1040&f=png&s=423328)\n\n就这么跑起来了！！！很不可思议。现在有两个亟待解决的问题：\n\n- 一：博客外观使用的是默认的`landscape`主题，太死板而且容易撞衫\n- 二：我们的博客现在只是运行在本地，我们需要将之放到Github上，并且可以使用网址访问\n\n我们先来解决**问题二**，我们迫不及待地想通过`url`来访问我们的站点了!\n\n### 将代码托管到github上\n针对国内访问`Github`网速很慢，我们也可以使用`码云`来托管代码，大体的配置都是相似的。只是个人觉得`Github`更正统一点，所以这里使用的是`Github`\n\n要想将代码托管到`Github`上，我们需要新建一个项目：\n\n![](https://user-gold-cdn.xitu.io/2020/2/23/17070bdd1e57eece?w=379&h=242&f=png&s=15109)\n\n点击`New repository`按钮以新建项目：\n\n![](https://user-gold-cdn.xitu.io/2020/2/23/17070be88f40c738?w=1181&h=851&f=png&s=59408)\n\n\n填写上仓库名称和描述，然后点击`Create repository`按钮：\n\n\n![](https://user-gold-cdn.xitu.io/2020/2/23/17070bff10028013?w=1329&h=802&f=png&s=69581)\n\n看到这个页面，就代表仓库真的创建完成了，现在我们跟着红框中的步骤，将本地的源码推送到`Github`上：\n```\ngit init\ngit add .\ngit commit -m \"first commit\"\ngit remote add origin https://github.com/xch1029/myblog.git\ngit push -u origin master\n```\n\n![](https://user-gold-cdn.xitu.io/2020/2/23/17070c841b7ef3f1?w=1184&h=731&f=png&s=57195)\n\n一切顺利的话，再次访问仓库的页面，我们看到了提交的代码，这说明我们本地的源码已经`push`到了仓库里。\n\n> 我们的目标是使用`url`来访问我们的博客，所以我们下一步使用的技术是`github-pages`，使用`github-pages`来展示我们的博客。\n\n### 自动部署的github-pages\n虽然使用的是`github-pages`，但是这并不意味着我们需要手动打包再手动部署，这一切繁杂的事务都让`travis-ci`帮我们完成吧。\n\n> 简单介绍下`travis-ci`：`travis-ci`是一个不需要自己搭建的在线持续集成工具，其最大的特点就是能和`github`无缝衔接，而且是免费使用（针对开源项目）。使用起来也非的常容易，只需要在项目中添加`.travis.yml`配置文件\n\n### 配置自动化部署\n\n![](https://user-gold-cdn.xitu.io/2020/2/23/17070da9d7feecc3?w=1260&h=622&f=png&s=55151)\n使用`Github`账号登录[travis](https://www.travis-ci.org/)，然后将我们的博客仓库的开关打开，这是为了告诉`travis`允许使用项目中的`.travis.yml`以自动部署。\n\n### 编写.travis.yml\n在项目的根目录中添加文件`.travis.yml`\n``` yml\nsudo: false\nlanguage: node_js\nnode_js:\n  - 12 # 使用12的LTS版本\ncache: npm\nbranches:\n  only:\n    - master # 只监听master分支的push\nscript:\n  - hexo generate # 自动化构建的脚本\ndeploy:\n  provider: pages\n  skip-cleanup: true\n  github-token: $GITHUB_TOKEN\n  keep-history: true\n  on:\n    branch: master\n  local-dir: public\n```\n\n注意两点：\n- 一：在`_config.yml`中，第17行的root属性，需要改为和项目名字一样，这是为了保证github-pages的静态资源路径引用正确\n```\n# 17行改为：\nroot: /myblog/\n```\n- 二：在`.travis.yml`中我们使用了变量`$GITHUB_TOKEN`，这是`travis`能够操作`Github`的关键。我们需要在`Github`中生成一个Token，再复制到`travis`中:\n\n\n![](https://user-gold-cdn.xitu.io/2020/2/23/17070f53ace8e4ca?w=861&h=298&f=png&s=23595)\n    \n前往Github[新建 Personal Access Token](https://github.com/settings/tokens)，只勾选 `repo` 的权限并生成一个新的 Token。Token 生成后请复制并保存好。\n\n\n\n![](https://user-gold-cdn.xitu.io/2020/2/23/17070fe514c4b8e5?w=1507&h=187&f=png&s=10228)\n\n回到 Travis CI，前往你的 repository 的设置页面，在 `Environment Variables` 下新建一个环境变量，Name 为 `GITHUB_TOKEN`，Value 为刚才你在 GitHub 生成的 Token。确保 `DISPLAY VALUE IN BUILD LOG` 保持不被勾选 避免你的 Token 泄漏。点击 Add 保存。\n\n**这就是所有内容了！！！**，将我们的代码提交了，看看有没有触发`travis`的自动构建：\n```\ngit add .\ngit commit -m \"add travis\"\ngit push\n```\n\n### 验证\n现在访问地址：[https://xch1029.github.io/myblog](https://xch1029.github.io/myblog)，其中的`xch1029`替换成你的Github名字。\n\n### 背后的原理\n其实，travis新建了一个分支`gh-pages`以用作展示`github-pages`，而分支的内容就是我们构建后的静态资源。\n\n![](https://user-gold-cdn.xitu.io/2020/2/23/170710a5a632be9b?w=704&h=543&f=png&s=29694)\n\n![](https://user-gold-cdn.xitu.io/2020/2/23/170710a7bfe049b6?w=901&h=306&f=png&s=17418)\n\n### 后续文章\n因为篇幅限制（不想将文章写得太长，以免难以阅读），今天就写到这里！因为我们已经可以访问我们的博客了！\n\n关于博文撰写、主题配置、自定义样式、自动化部署到服务器等文章，会在后续持续产出，请保持关注！\n\n\n\n\n\n","slug":"write-a-blog-for-yourself","published":1,"updated":"2020-02-23T08:26:47.398Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7q4ux3z000l4wnuvj2b89jh","content":"<p>很多优秀的技术人员都有自己的博客，写博客已经成了一种习惯。作为一名程序员，你，为什么要坚持写博客？答案有很多：</p>\n<ul>\n<li>能让人具备更好的总结能力</li>\n<li>加深自己对某项技术的理解</li>\n<li>获得别人的认可</li>\n<li>提高自己的表达能力</li>\n<li>为自己的生活留下足迹</li>\n<li>证明自己的能力</li>\n<li>开源精神</li>\n<li>用来装逼</li>\n<li>…</li>\n</ul>\n<p>不管是啥理由，一个优秀的程序员都应该不断的去激励自己，在日常中检讨自己，与千万优秀人看齐，把优秀当做一直习惯。</p>\n<p>所以，今天我们就来一步一步实现自己那独一无二的博客！</p>\n<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>搭建博客有很多种方案，可以从零开发所有功能(<a href=\"http://www.ruanyifeng.com/home.html\" target=\"_blank\" rel=\"noopener\">阮一峰的个人网站</a>)，但这有点让人头大，繁琐的事务实在是太多了：页面的编写、后台的开发、留言板的开发。。。让人难以为继！另一种方案就是基于现有的集成框架，我们只关心自己输出的文章，其他的事情都留给框架去做。</p>\n<p>目前，这类的框架很多：<code>WordPress</code>、<code>Jekyll</code>、<code>VuePress</code>、<code>Hexo</code>等等，都是很优秀的框架。今天，我们尝试使用<code>Hexo</code>来搭建博客。</p>\n<h3 id=\"初始化项目\"><a href=\"#初始化项目\" class=\"headerlink\" title=\"初始化项目\"></a>初始化项目</h3><p>在使用<code>hexo-cli</code>初始化项目之前，我们需要使用npm以全局安装:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-cli -g</span><br></pre></td></tr></table></figure></p>\n<p>初始化一个项目：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init myblog</span><br><span class=\"line\">cd myblog</span><br><span class=\"line\">npm install</span><br><span class=\"line\">hexo server</span><br></pre></td></tr></table></figure></p>\n<p>因为网络的原因，加载的时间可能比较长，耐心等待下。</p>\n<p>然后，访问<a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/</a>你的博客就这么跑起来了：<br><img src=\"https://user-gold-cdn.xitu.io/2020/2/23/17070b5619fd2a0e?w=1380&amp;h=1040&amp;f=png&amp;s=423328\" alt></p>\n<p>就这么跑起来了！！！很不可思议。现在有两个亟待解决的问题：</p>\n<ul>\n<li>一：博客外观使用的是默认的<code>landscape</code>主题，太死板而且容易撞衫</li>\n<li>二：我们的博客现在只是运行在本地，我们需要将之放到Github上，并且可以使用网址访问</li>\n</ul>\n<p>我们先来解决<strong>问题二</strong>，我们迫不及待地想通过<code>url</code>来访问我们的站点了!</p>\n<h3 id=\"将代码托管到github上\"><a href=\"#将代码托管到github上\" class=\"headerlink\" title=\"将代码托管到github上\"></a>将代码托管到github上</h3><p>针对国内访问<code>Github</code>网速很慢，我们也可以使用<code>码云</code>来托管代码，大体的配置都是相似的。只是个人觉得<code>Github</code>更正统一点，所以这里使用的是<code>Github</code></p>\n<p>要想将代码托管到<code>Github</code>上，我们需要新建一个项目：</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/2/23/17070bdd1e57eece?w=379&amp;h=242&amp;f=png&amp;s=15109\" alt></p>\n<p>点击<code>New repository</code>按钮以新建项目：</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/2/23/17070be88f40c738?w=1181&amp;h=851&amp;f=png&amp;s=59408\" alt></p>\n<p>填写上仓库名称和描述，然后点击<code>Create repository</code>按钮：</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/2/23/17070bff10028013?w=1329&amp;h=802&amp;f=png&amp;s=69581\" alt></p>\n<p>看到这个页面，就代表仓库真的创建完成了，现在我们跟着红框中的步骤，将本地的源码推送到<code>Github</code>上：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &quot;first commit&quot;</span><br><span class=\"line\">git remote add origin https://github.com/xch1029/myblog.git</span><br><span class=\"line\">git push -u origin master</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/2/23/17070c841b7ef3f1?w=1184&amp;h=731&amp;f=png&amp;s=57195\" alt></p>\n<p>一切顺利的话，再次访问仓库的页面，我们看到了提交的代码，这说明我们本地的源码已经<code>push</code>到了仓库里。</p>\n<blockquote>\n<p>我们的目标是使用<code>url</code>来访问我们的博客，所以我们下一步使用的技术是<code>github-pages</code>，使用<code>github-pages</code>来展示我们的博客。</p>\n</blockquote>\n<h3 id=\"自动部署的github-pages\"><a href=\"#自动部署的github-pages\" class=\"headerlink\" title=\"自动部署的github-pages\"></a>自动部署的github-pages</h3><p>虽然使用的是<code>github-pages</code>，但是这并不意味着我们需要手动打包再手动部署，这一切繁杂的事务都让<code>travis-ci</code>帮我们完成吧。</p>\n<blockquote>\n<p>简单介绍下<code>travis-ci</code>：<code>travis-ci</code>是一个不需要自己搭建的在线持续集成工具，其最大的特点就是能和<code>github</code>无缝衔接，而且是免费使用（针对开源项目）。使用起来也非的常容易，只需要在项目中添加<code>.travis.yml</code>配置文件</p>\n</blockquote>\n<h3 id=\"配置自动化部署\"><a href=\"#配置自动化部署\" class=\"headerlink\" title=\"配置自动化部署\"></a>配置自动化部署</h3><p><img src=\"https://user-gold-cdn.xitu.io/2020/2/23/17070da9d7feecc3?w=1260&amp;h=622&amp;f=png&amp;s=55151\" alt><br>使用<code>Github</code>账号登录<a href=\"https://www.travis-ci.org/\" target=\"_blank\" rel=\"noopener\">travis</a>，然后将我们的博客仓库的开关打开，这是为了告诉<code>travis</code>允许使用项目中的<code>.travis.yml</code>以自动部署。</p>\n<h3 id=\"编写-travis-yml\"><a href=\"#编写-travis-yml\" class=\"headerlink\" title=\"编写.travis.yml\"></a>编写.travis.yml</h3><p>在项目的根目录中添加文件<code>.travis.yml</code><br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">sudo:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">language:</span> <span class=\"string\">node_js</span></span><br><span class=\"line\"><span class=\"attr\">node_js:</span></span><br><span class=\"line\"><span class=\"bullet\">  -</span> <span class=\"number\">12</span> <span class=\"comment\"># 使用12的LTS版本</span></span><br><span class=\"line\"><span class=\"attr\">cache:</span> <span class=\"string\">npm</span></span><br><span class=\"line\"><span class=\"attr\">branches:</span></span><br><span class=\"line\"><span class=\"attr\">  only:</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">master</span> <span class=\"comment\"># 只监听master分支的push</span></span><br><span class=\"line\"><span class=\"attr\">script:</span></span><br><span class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">hexo</span> <span class=\"string\">generate</span> <span class=\"comment\"># 自动化构建的脚本</span></span><br><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\"><span class=\"attr\">  provider:</span> <span class=\"string\">pages</span></span><br><span class=\"line\"><span class=\"attr\">  skip-cleanup:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  github-token:</span> <span class=\"string\">$GITHUB_TOKEN</span></span><br><span class=\"line\"><span class=\"attr\">  keep-history:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  on:</span></span><br><span class=\"line\"><span class=\"attr\">    branch:</span> <span class=\"string\">master</span></span><br><span class=\"line\"><span class=\"attr\">  local-dir:</span> <span class=\"string\">public</span></span><br></pre></td></tr></table></figure></p>\n<p>注意两点：</p>\n<ul>\n<li><p>一：在<code>_config.yml</code>中，第17行的root属性，需要改为和项目名字一样，这是为了保证github-pages的静态资源路径引用正确</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 17行改为：</span><br><span class=\"line\">root: /myblog/</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>二：在<code>.travis.yml</code>中我们使用了变量<code>$GITHUB_TOKEN</code>，这是<code>travis</code>能够操作<code>Github</code>的关键。我们需要在<code>Github</code>中生成一个Token，再复制到<code>travis</code>中:</p>\n</li>\n</ul>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/2/23/17070f53ace8e4ca?w=861&amp;h=298&amp;f=png&amp;s=23595\" alt></p>\n<p>前往Github<a href=\"https://github.com/settings/tokens\" target=\"_blank\" rel=\"noopener\">新建 Personal Access Token</a>，只勾选 <code>repo</code> 的权限并生成一个新的 Token。Token 生成后请复制并保存好。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/2/23/17070fe514c4b8e5?w=1507&amp;h=187&amp;f=png&amp;s=10228\" alt></p>\n<p>回到 Travis CI，前往你的 repository 的设置页面，在 <code>Environment Variables</code> 下新建一个环境变量，Name 为 <code>GITHUB_TOKEN</code>，Value 为刚才你在 GitHub 生成的 Token。确保 <code>DISPLAY VALUE IN BUILD LOG</code> 保持不被勾选 避免你的 Token 泄漏。点击 Add 保存。</p>\n<p><strong>这就是所有内容了！！！</strong>，将我们的代码提交了，看看有没有触发<code>travis</code>的自动构建：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &quot;add travis&quot;</span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h3><p>现在访问地址：<a href=\"https://xch1029.github.io/myblog\" target=\"_blank\" rel=\"noopener\">https://xch1029.github.io/myblog</a>，其中的<code>xch1029</code>替换成你的Github名字。</p>\n<h3 id=\"背后的原理\"><a href=\"#背后的原理\" class=\"headerlink\" title=\"背后的原理\"></a>背后的原理</h3><p>其实，travis新建了一个分支<code>gh-pages</code>以用作展示<code>github-pages</code>，而分支的内容就是我们构建后的静态资源。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/2/23/170710a5a632be9b?w=704&amp;h=543&amp;f=png&amp;s=29694\" alt></p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/2/23/170710a7bfe049b6?w=901&amp;h=306&amp;f=png&amp;s=17418\" alt></p>\n<h3 id=\"后续文章\"><a href=\"#后续文章\" class=\"headerlink\" title=\"后续文章\"></a>后续文章</h3><p>因为篇幅限制（不想将文章写得太长，以免难以阅读），今天就写到这里！因为我们已经可以访问我们的博客了！</p>\n<p>关于博文撰写、主题配置、自定义样式、自动化部署到服务器等文章，会在后续持续产出，请保持关注！</p>\n","site":{"data":{}},"excerpt":"","more":"<p>很多优秀的技术人员都有自己的博客，写博客已经成了一种习惯。作为一名程序员，你，为什么要坚持写博客？答案有很多：</p>\n<ul>\n<li>能让人具备更好的总结能力</li>\n<li>加深自己对某项技术的理解</li>\n<li>获得别人的认可</li>\n<li>提高自己的表达能力</li>\n<li>为自己的生活留下足迹</li>\n<li>证明自己的能力</li>\n<li>开源精神</li>\n<li>用来装逼</li>\n<li>…</li>\n</ul>\n<p>不管是啥理由，一个优秀的程序员都应该不断的去激励自己，在日常中检讨自己，与千万优秀人看齐，把优秀当做一直习惯。</p>\n<p>所以，今天我们就来一步一步实现自己那独一无二的博客！</p>\n<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>搭建博客有很多种方案，可以从零开发所有功能(<a href=\"http://www.ruanyifeng.com/home.html\" target=\"_blank\" rel=\"noopener\">阮一峰的个人网站</a>)，但这有点让人头大，繁琐的事务实在是太多了：页面的编写、后台的开发、留言板的开发。。。让人难以为继！另一种方案就是基于现有的集成框架，我们只关心自己输出的文章，其他的事情都留给框架去做。</p>\n<p>目前，这类的框架很多：<code>WordPress</code>、<code>Jekyll</code>、<code>VuePress</code>、<code>Hexo</code>等等，都是很优秀的框架。今天，我们尝试使用<code>Hexo</code>来搭建博客。</p>\n<h3 id=\"初始化项目\"><a href=\"#初始化项目\" class=\"headerlink\" title=\"初始化项目\"></a>初始化项目</h3><p>在使用<code>hexo-cli</code>初始化项目之前，我们需要使用npm以全局安装:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-cli -g</span><br></pre></td></tr></table></figure></p>\n<p>初始化一个项目：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init myblog</span><br><span class=\"line\">cd myblog</span><br><span class=\"line\">npm install</span><br><span class=\"line\">hexo server</span><br></pre></td></tr></table></figure></p>\n<p>因为网络的原因，加载的时间可能比较长，耐心等待下。</p>\n<p>然后，访问<a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/</a>你的博客就这么跑起来了：<br><img src=\"https://user-gold-cdn.xitu.io/2020/2/23/17070b5619fd2a0e?w=1380&amp;h=1040&amp;f=png&amp;s=423328\" alt></p>\n<p>就这么跑起来了！！！很不可思议。现在有两个亟待解决的问题：</p>\n<ul>\n<li>一：博客外观使用的是默认的<code>landscape</code>主题，太死板而且容易撞衫</li>\n<li>二：我们的博客现在只是运行在本地，我们需要将之放到Github上，并且可以使用网址访问</li>\n</ul>\n<p>我们先来解决<strong>问题二</strong>，我们迫不及待地想通过<code>url</code>来访问我们的站点了!</p>\n<h3 id=\"将代码托管到github上\"><a href=\"#将代码托管到github上\" class=\"headerlink\" title=\"将代码托管到github上\"></a>将代码托管到github上</h3><p>针对国内访问<code>Github</code>网速很慢，我们也可以使用<code>码云</code>来托管代码，大体的配置都是相似的。只是个人觉得<code>Github</code>更正统一点，所以这里使用的是<code>Github</code></p>\n<p>要想将代码托管到<code>Github</code>上，我们需要新建一个项目：</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/2/23/17070bdd1e57eece?w=379&amp;h=242&amp;f=png&amp;s=15109\" alt></p>\n<p>点击<code>New repository</code>按钮以新建项目：</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/2/23/17070be88f40c738?w=1181&amp;h=851&amp;f=png&amp;s=59408\" alt></p>\n<p>填写上仓库名称和描述，然后点击<code>Create repository</code>按钮：</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/2/23/17070bff10028013?w=1329&amp;h=802&amp;f=png&amp;s=69581\" alt></p>\n<p>看到这个页面，就代表仓库真的创建完成了，现在我们跟着红框中的步骤，将本地的源码推送到<code>Github</code>上：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &quot;first commit&quot;</span><br><span class=\"line\">git remote add origin https://github.com/xch1029/myblog.git</span><br><span class=\"line\">git push -u origin master</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/2/23/17070c841b7ef3f1?w=1184&amp;h=731&amp;f=png&amp;s=57195\" alt></p>\n<p>一切顺利的话，再次访问仓库的页面，我们看到了提交的代码，这说明我们本地的源码已经<code>push</code>到了仓库里。</p>\n<blockquote>\n<p>我们的目标是使用<code>url</code>来访问我们的博客，所以我们下一步使用的技术是<code>github-pages</code>，使用<code>github-pages</code>来展示我们的博客。</p>\n</blockquote>\n<h3 id=\"自动部署的github-pages\"><a href=\"#自动部署的github-pages\" class=\"headerlink\" title=\"自动部署的github-pages\"></a>自动部署的github-pages</h3><p>虽然使用的是<code>github-pages</code>，但是这并不意味着我们需要手动打包再手动部署，这一切繁杂的事务都让<code>travis-ci</code>帮我们完成吧。</p>\n<blockquote>\n<p>简单介绍下<code>travis-ci</code>：<code>travis-ci</code>是一个不需要自己搭建的在线持续集成工具，其最大的特点就是能和<code>github</code>无缝衔接，而且是免费使用（针对开源项目）。使用起来也非的常容易，只需要在项目中添加<code>.travis.yml</code>配置文件</p>\n</blockquote>\n<h3 id=\"配置自动化部署\"><a href=\"#配置自动化部署\" class=\"headerlink\" title=\"配置自动化部署\"></a>配置自动化部署</h3><p><img src=\"https://user-gold-cdn.xitu.io/2020/2/23/17070da9d7feecc3?w=1260&amp;h=622&amp;f=png&amp;s=55151\" alt><br>使用<code>Github</code>账号登录<a href=\"https://www.travis-ci.org/\" target=\"_blank\" rel=\"noopener\">travis</a>，然后将我们的博客仓库的开关打开，这是为了告诉<code>travis</code>允许使用项目中的<code>.travis.yml</code>以自动部署。</p>\n<h3 id=\"编写-travis-yml\"><a href=\"#编写-travis-yml\" class=\"headerlink\" title=\"编写.travis.yml\"></a>编写.travis.yml</h3><p>在项目的根目录中添加文件<code>.travis.yml</code><br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">sudo:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">language:</span> <span class=\"string\">node_js</span></span><br><span class=\"line\"><span class=\"attr\">node_js:</span></span><br><span class=\"line\"><span class=\"bullet\">  -</span> <span class=\"number\">12</span> <span class=\"comment\"># 使用12的LTS版本</span></span><br><span class=\"line\"><span class=\"attr\">cache:</span> <span class=\"string\">npm</span></span><br><span class=\"line\"><span class=\"attr\">branches:</span></span><br><span class=\"line\"><span class=\"attr\">  only:</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">master</span> <span class=\"comment\"># 只监听master分支的push</span></span><br><span class=\"line\"><span class=\"attr\">script:</span></span><br><span class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">hexo</span> <span class=\"string\">generate</span> <span class=\"comment\"># 自动化构建的脚本</span></span><br><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\"><span class=\"attr\">  provider:</span> <span class=\"string\">pages</span></span><br><span class=\"line\"><span class=\"attr\">  skip-cleanup:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  github-token:</span> <span class=\"string\">$GITHUB_TOKEN</span></span><br><span class=\"line\"><span class=\"attr\">  keep-history:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  on:</span></span><br><span class=\"line\"><span class=\"attr\">    branch:</span> <span class=\"string\">master</span></span><br><span class=\"line\"><span class=\"attr\">  local-dir:</span> <span class=\"string\">public</span></span><br></pre></td></tr></table></figure></p>\n<p>注意两点：</p>\n<ul>\n<li><p>一：在<code>_config.yml</code>中，第17行的root属性，需要改为和项目名字一样，这是为了保证github-pages的静态资源路径引用正确</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 17行改为：</span><br><span class=\"line\">root: /myblog/</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>二：在<code>.travis.yml</code>中我们使用了变量<code>$GITHUB_TOKEN</code>，这是<code>travis</code>能够操作<code>Github</code>的关键。我们需要在<code>Github</code>中生成一个Token，再复制到<code>travis</code>中:</p>\n</li>\n</ul>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/2/23/17070f53ace8e4ca?w=861&amp;h=298&amp;f=png&amp;s=23595\" alt></p>\n<p>前往Github<a href=\"https://github.com/settings/tokens\" target=\"_blank\" rel=\"noopener\">新建 Personal Access Token</a>，只勾选 <code>repo</code> 的权限并生成一个新的 Token。Token 生成后请复制并保存好。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/2/23/17070fe514c4b8e5?w=1507&amp;h=187&amp;f=png&amp;s=10228\" alt></p>\n<p>回到 Travis CI，前往你的 repository 的设置页面，在 <code>Environment Variables</code> 下新建一个环境变量，Name 为 <code>GITHUB_TOKEN</code>，Value 为刚才你在 GitHub 生成的 Token。确保 <code>DISPLAY VALUE IN BUILD LOG</code> 保持不被勾选 避免你的 Token 泄漏。点击 Add 保存。</p>\n<p><strong>这就是所有内容了！！！</strong>，将我们的代码提交了，看看有没有触发<code>travis</code>的自动构建：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &quot;add travis&quot;</span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h3><p>现在访问地址：<a href=\"https://xch1029.github.io/myblog\" target=\"_blank\" rel=\"noopener\">https://xch1029.github.io/myblog</a>，其中的<code>xch1029</code>替换成你的Github名字。</p>\n<h3 id=\"背后的原理\"><a href=\"#背后的原理\" class=\"headerlink\" title=\"背后的原理\"></a>背后的原理</h3><p>其实，travis新建了一个分支<code>gh-pages</code>以用作展示<code>github-pages</code>，而分支的内容就是我们构建后的静态资源。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/2/23/170710a5a632be9b?w=704&amp;h=543&amp;f=png&amp;s=29694\" alt></p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/2/23/170710a7bfe049b6?w=901&amp;h=306&amp;f=png&amp;s=17418\" alt></p>\n<h3 id=\"后续文章\"><a href=\"#后续文章\" class=\"headerlink\" title=\"后续文章\"></a>后续文章</h3><p>因为篇幅限制（不想将文章写得太长，以免难以阅读），今天就写到这里！因为我们已经可以访问我们的博客了！</p>\n<p>关于博文撰写、主题配置、自定义样式、自动化部署到服务器等文章，会在后续持续产出，请保持关注！</p>\n"},{"title":"2020年，必须拥有自己的博客网站(下)","date":"2020-02-28T09:14:11.000Z","_content":"\n一般地，我们的博客站点放在github-pages上就足矣了，所以上两篇文章中，我们着重介绍了基于travis-ci和Github来自动化部署我们的站点([上](https://juejin.im/post/5e514b2de51d45271849db03)、[中](https://juejin.im/post/5e539e4c51882549564b5623))。`零成本` + `流畅的写作体验` = `口碑爆好`！\n\n然而，我们在愉快的创作之余，也不能忽视：即使是这么完美的方案，依旧存在一些小缺陷：\n- Github站点，国内各大搜索引擎基本未收纳，也就是说你的文章很难被用户搜索到\n- Github在国内的网速很慢，用户很难一直等待加载中的页面\n- 在github-pages上部署的站点，域名很长，很难被用户记住\n\n基于此，我们还有最后的大招，但涉及的知识也挺多，所以不适合新手。至少得用过点linux系统，我们先看下待会要用到的资源和技能：\n- centos服务器一台\n- 装上nginx、Jenkins\n- 域名一个\n\n### web hooks\n我们都知道钩子的概念在前端框架中用的很多，React、Vue的生命周期都是一个一个钩子。`web hooks`和生命周期很像，只不过是换了主语和宾语，这里的主语是github，宾语是Jenkins，用图表示：\n\n![](https://user-gold-cdn.xitu.io/2020/2/27/170870e9404111f7?w=788&h=310&f=png&s=20497)\n\n### 需要安装的Jenkins插件\n- Generic Webhook Trigger Plugin\n- Publish Over SSH\n- \n第一个是为了配置钩子，第二个是为了连接服务器，我们先去`Jenkins-系统配置`中将服务器配置好\n\n![](https://user-gold-cdn.xitu.io/2020/2/27/170875e85ae93820?w=531&h=595&f=png&s=53839)\n\n![](https://user-gold-cdn.xitu.io/2020/2/27/170875ea25179877?w=1632&h=750&f=png&s=31534)\n其中的`Remote Directory`是博客构建后代码放置的位置\n\n### 生成hooks\n#### 在Jenkins的用户管理中生成Api Token\n\n![](https://user-gold-cdn.xitu.io/2020/2/27/170874d991ea6a0a?w=465&h=916&f=png&s=64644)\n\n![](https://user-gold-cdn.xitu.io/2020/2/27/170874dc8833ef8c?w=945&h=201&f=png&s=5925)\n\n#### 为Github的仓库配置web hooks\n\n![](https://user-gold-cdn.xitu.io/2020/2/27/1708752f1bf074cb?w=1505&h=782&f=png&s=54072)\nURL格式为 http://<userName>:<APIToken>@<JenkinsIP>:<端口>/generic-webhook-trigger/invoke\n\n### 配置Jenkins项目\n\n#### 构建触发器\n![](https://user-gold-cdn.xitu.io/2020/2/27/170876031729ebb0?w=1574&h=707&f=png&s=61398)\n#### 选择构建环境\n![](https://user-gold-cdn.xitu.io/2020/2/28/1708760b16ddd52d?w=1508&h=859&f=png&s=58249)\n#### 构建脚本\n![](https://user-gold-cdn.xitu.io/2020/2/28/1708760e333b2f4d?w=1190&h=354&f=png&s=9704)\n#### 构建后操作\n![](https://user-gold-cdn.xitu.io/2020/2/28/170876109373951a?w=1486&h=775&f=png&s=47869)\n\n### 测试\n现在，提交点代码，去Jenkins就能看到相关的构建信息了\n\n![](https://user-gold-cdn.xitu.io/2020/2/28/17087765e0747712?w=1086&h=868&f=png&s=69502)\n\n### Nginx\n下一步就是nginx的配置，这一步相对简单\n```\nserver {\n    listen       80;\n    server_name   wwww.xxxxx.com;\n\n    location / {\n        root /home/blog;\n        index index.html;\n    }\n}\n```\n\n最后reload一下nginx即可\n```\nnginx -s reload\n```\n到这里，就可以通过自己的域名` wwww.xxxxx.com`访问博客了\n\n### 注意\n因为涉及的东西比较多，所以很多都是配了图而缺少文字解释，后面等我有时间，我再慢慢补充，慢慢解释。老铁们要是有问题或者疑问，欢迎留言，我会认真解答的！\n","source":"_posts/write-a-blog-for-yourself3.md","raw":"---\ntitle: 2020年，必须拥有自己的博客网站(下)\ndate: 2020-02-28 17:14:11\ntags: Hexo\n---\n\n一般地，我们的博客站点放在github-pages上就足矣了，所以上两篇文章中，我们着重介绍了基于travis-ci和Github来自动化部署我们的站点([上](https://juejin.im/post/5e514b2de51d45271849db03)、[中](https://juejin.im/post/5e539e4c51882549564b5623))。`零成本` + `流畅的写作体验` = `口碑爆好`！\n\n然而，我们在愉快的创作之余，也不能忽视：即使是这么完美的方案，依旧存在一些小缺陷：\n- Github站点，国内各大搜索引擎基本未收纳，也就是说你的文章很难被用户搜索到\n- Github在国内的网速很慢，用户很难一直等待加载中的页面\n- 在github-pages上部署的站点，域名很长，很难被用户记住\n\n基于此，我们还有最后的大招，但涉及的知识也挺多，所以不适合新手。至少得用过点linux系统，我们先看下待会要用到的资源和技能：\n- centos服务器一台\n- 装上nginx、Jenkins\n- 域名一个\n\n### web hooks\n我们都知道钩子的概念在前端框架中用的很多，React、Vue的生命周期都是一个一个钩子。`web hooks`和生命周期很像，只不过是换了主语和宾语，这里的主语是github，宾语是Jenkins，用图表示：\n\n![](https://user-gold-cdn.xitu.io/2020/2/27/170870e9404111f7?w=788&h=310&f=png&s=20497)\n\n### 需要安装的Jenkins插件\n- Generic Webhook Trigger Plugin\n- Publish Over SSH\n- \n第一个是为了配置钩子，第二个是为了连接服务器，我们先去`Jenkins-系统配置`中将服务器配置好\n\n![](https://user-gold-cdn.xitu.io/2020/2/27/170875e85ae93820?w=531&h=595&f=png&s=53839)\n\n![](https://user-gold-cdn.xitu.io/2020/2/27/170875ea25179877?w=1632&h=750&f=png&s=31534)\n其中的`Remote Directory`是博客构建后代码放置的位置\n\n### 生成hooks\n#### 在Jenkins的用户管理中生成Api Token\n\n![](https://user-gold-cdn.xitu.io/2020/2/27/170874d991ea6a0a?w=465&h=916&f=png&s=64644)\n\n![](https://user-gold-cdn.xitu.io/2020/2/27/170874dc8833ef8c?w=945&h=201&f=png&s=5925)\n\n#### 为Github的仓库配置web hooks\n\n![](https://user-gold-cdn.xitu.io/2020/2/27/1708752f1bf074cb?w=1505&h=782&f=png&s=54072)\nURL格式为 http://<userName>:<APIToken>@<JenkinsIP>:<端口>/generic-webhook-trigger/invoke\n\n### 配置Jenkins项目\n\n#### 构建触发器\n![](https://user-gold-cdn.xitu.io/2020/2/27/170876031729ebb0?w=1574&h=707&f=png&s=61398)\n#### 选择构建环境\n![](https://user-gold-cdn.xitu.io/2020/2/28/1708760b16ddd52d?w=1508&h=859&f=png&s=58249)\n#### 构建脚本\n![](https://user-gold-cdn.xitu.io/2020/2/28/1708760e333b2f4d?w=1190&h=354&f=png&s=9704)\n#### 构建后操作\n![](https://user-gold-cdn.xitu.io/2020/2/28/170876109373951a?w=1486&h=775&f=png&s=47869)\n\n### 测试\n现在，提交点代码，去Jenkins就能看到相关的构建信息了\n\n![](https://user-gold-cdn.xitu.io/2020/2/28/17087765e0747712?w=1086&h=868&f=png&s=69502)\n\n### Nginx\n下一步就是nginx的配置，这一步相对简单\n```\nserver {\n    listen       80;\n    server_name   wwww.xxxxx.com;\n\n    location / {\n        root /home/blog;\n        index index.html;\n    }\n}\n```\n\n最后reload一下nginx即可\n```\nnginx -s reload\n```\n到这里，就可以通过自己的域名` wwww.xxxxx.com`访问博客了\n\n### 注意\n因为涉及的东西比较多，所以很多都是配了图而缺少文字解释，后面等我有时间，我再慢慢补充，慢慢解释。老铁们要是有问题或者疑问，欢迎留言，我会认真解答的！\n","slug":"write-a-blog-for-yourself3","published":1,"updated":"2020-03-10T12:45:00.244Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7q4ux41000o4wnuntpwa6bh","content":"<p>一般地，我们的博客站点放在github-pages上就足矣了，所以上两篇文章中，我们着重介绍了基于travis-ci和Github来自动化部署我们的站点(<a href=\"https://juejin.im/post/5e514b2de51d45271849db03\" target=\"_blank\" rel=\"noopener\">上</a>、<a href=\"https://juejin.im/post/5e539e4c51882549564b5623\" target=\"_blank\" rel=\"noopener\">中</a>)。<code>零成本</code> + <code>流畅的写作体验</code> = <code>口碑爆好</code>！</p>\n<p>然而，我们在愉快的创作之余，也不能忽视：即使是这么完美的方案，依旧存在一些小缺陷：</p>\n<ul>\n<li>Github站点，国内各大搜索引擎基本未收纳，也就是说你的文章很难被用户搜索到</li>\n<li>Github在国内的网速很慢，用户很难一直等待加载中的页面</li>\n<li>在github-pages上部署的站点，域名很长，很难被用户记住</li>\n</ul>\n<p>基于此，我们还有最后的大招，但涉及的知识也挺多，所以不适合新手。至少得用过点linux系统，我们先看下待会要用到的资源和技能：</p>\n<ul>\n<li>centos服务器一台</li>\n<li>装上nginx、Jenkins</li>\n<li>域名一个</li>\n</ul>\n<h3 id=\"web-hooks\"><a href=\"#web-hooks\" class=\"headerlink\" title=\"web hooks\"></a>web hooks</h3><p>我们都知道钩子的概念在前端框架中用的很多，React、Vue的生命周期都是一个一个钩子。<code>web hooks</code>和生命周期很像，只不过是换了主语和宾语，这里的主语是github，宾语是Jenkins，用图表示：</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/2/27/170870e9404111f7?w=788&amp;h=310&amp;f=png&amp;s=20497\" alt></p>\n<h3 id=\"需要安装的Jenkins插件\"><a href=\"#需要安装的Jenkins插件\" class=\"headerlink\" title=\"需要安装的Jenkins插件\"></a>需要安装的Jenkins插件</h3><ul>\n<li>Generic Webhook Trigger Plugin</li>\n<li>Publish Over SSH</li>\n<li>第一个是为了配置钩子，第二个是为了连接服务器，我们先去<code>Jenkins-系统配置</code>中将服务器配置好</li>\n</ul>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/2/27/170875e85ae93820?w=531&amp;h=595&amp;f=png&amp;s=53839\" alt></p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/2/27/170875ea25179877?w=1632&amp;h=750&amp;f=png&amp;s=31534\" alt><br>其中的<code>Remote Directory</code>是博客构建后代码放置的位置</p>\n<h3 id=\"生成hooks\"><a href=\"#生成hooks\" class=\"headerlink\" title=\"生成hooks\"></a>生成hooks</h3><h4 id=\"在Jenkins的用户管理中生成Api-Token\"><a href=\"#在Jenkins的用户管理中生成Api-Token\" class=\"headerlink\" title=\"在Jenkins的用户管理中生成Api Token\"></a>在Jenkins的用户管理中生成Api Token</h4><p><img src=\"https://user-gold-cdn.xitu.io/2020/2/27/170874d991ea6a0a?w=465&amp;h=916&amp;f=png&amp;s=64644\" alt></p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/2/27/170874dc8833ef8c?w=945&amp;h=201&amp;f=png&amp;s=5925\" alt></p>\n<h4 id=\"为Github的仓库配置web-hooks\"><a href=\"#为Github的仓库配置web-hooks\" class=\"headerlink\" title=\"为Github的仓库配置web hooks\"></a>为Github的仓库配置web hooks</h4><p><img src=\"https://user-gold-cdn.xitu.io/2020/2/27/1708752f1bf074cb?w=1505&amp;h=782&amp;f=png&amp;s=54072\" alt><br>URL格式为 http://<username>:<apitoken>@<jenkinsip>:&lt;端口&gt;/generic-webhook-trigger/invoke</jenkinsip></apitoken></username></p>\n<h3 id=\"配置Jenkins项目\"><a href=\"#配置Jenkins项目\" class=\"headerlink\" title=\"配置Jenkins项目\"></a>配置Jenkins项目</h3><h4 id=\"构建触发器\"><a href=\"#构建触发器\" class=\"headerlink\" title=\"构建触发器\"></a>构建触发器</h4><p><img src=\"https://user-gold-cdn.xitu.io/2020/2/27/170876031729ebb0?w=1574&amp;h=707&amp;f=png&amp;s=61398\" alt></p>\n<h4 id=\"选择构建环境\"><a href=\"#选择构建环境\" class=\"headerlink\" title=\"选择构建环境\"></a>选择构建环境</h4><p><img src=\"https://user-gold-cdn.xitu.io/2020/2/28/1708760b16ddd52d?w=1508&amp;h=859&amp;f=png&amp;s=58249\" alt></p>\n<h4 id=\"构建脚本\"><a href=\"#构建脚本\" class=\"headerlink\" title=\"构建脚本\"></a>构建脚本</h4><p><img src=\"https://user-gold-cdn.xitu.io/2020/2/28/1708760e333b2f4d?w=1190&amp;h=354&amp;f=png&amp;s=9704\" alt></p>\n<h4 id=\"构建后操作\"><a href=\"#构建后操作\" class=\"headerlink\" title=\"构建后操作\"></a>构建后操作</h4><p><img src=\"https://user-gold-cdn.xitu.io/2020/2/28/170876109373951a?w=1486&amp;h=775&amp;f=png&amp;s=47869\" alt></p>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><p>现在，提交点代码，去Jenkins就能看到相关的构建信息了</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/2/28/17087765e0747712?w=1086&amp;h=868&amp;f=png&amp;s=69502\" alt></p>\n<h3 id=\"Nginx\"><a href=\"#Nginx\" class=\"headerlink\" title=\"Nginx\"></a>Nginx</h3><p>下一步就是nginx的配置，这一步相对简单<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       80;</span><br><span class=\"line\">    server_name   wwww.xxxxx.com;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        root /home/blog;</span><br><span class=\"line\">        index index.html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>最后reload一下nginx即可<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -s reload</span><br></pre></td></tr></table></figure></p>\n<p>到这里，就可以通过自己的域名<code>wwww.xxxxx.com</code>访问博客了</p>\n<h3 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h3><p>因为涉及的东西比较多，所以很多都是配了图而缺少文字解释，后面等我有时间，我再慢慢补充，慢慢解释。老铁们要是有问题或者疑问，欢迎留言，我会认真解答的！</p>\n","site":{"data":{}},"excerpt":"","more":"<p>一般地，我们的博客站点放在github-pages上就足矣了，所以上两篇文章中，我们着重介绍了基于travis-ci和Github来自动化部署我们的站点(<a href=\"https://juejin.im/post/5e514b2de51d45271849db03\" target=\"_blank\" rel=\"noopener\">上</a>、<a href=\"https://juejin.im/post/5e539e4c51882549564b5623\" target=\"_blank\" rel=\"noopener\">中</a>)。<code>零成本</code> + <code>流畅的写作体验</code> = <code>口碑爆好</code>！</p>\n<p>然而，我们在愉快的创作之余，也不能忽视：即使是这么完美的方案，依旧存在一些小缺陷：</p>\n<ul>\n<li>Github站点，国内各大搜索引擎基本未收纳，也就是说你的文章很难被用户搜索到</li>\n<li>Github在国内的网速很慢，用户很难一直等待加载中的页面</li>\n<li>在github-pages上部署的站点，域名很长，很难被用户记住</li>\n</ul>\n<p>基于此，我们还有最后的大招，但涉及的知识也挺多，所以不适合新手。至少得用过点linux系统，我们先看下待会要用到的资源和技能：</p>\n<ul>\n<li>centos服务器一台</li>\n<li>装上nginx、Jenkins</li>\n<li>域名一个</li>\n</ul>\n<h3 id=\"web-hooks\"><a href=\"#web-hooks\" class=\"headerlink\" title=\"web hooks\"></a>web hooks</h3><p>我们都知道钩子的概念在前端框架中用的很多，React、Vue的生命周期都是一个一个钩子。<code>web hooks</code>和生命周期很像，只不过是换了主语和宾语，这里的主语是github，宾语是Jenkins，用图表示：</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/2/27/170870e9404111f7?w=788&amp;h=310&amp;f=png&amp;s=20497\" alt></p>\n<h3 id=\"需要安装的Jenkins插件\"><a href=\"#需要安装的Jenkins插件\" class=\"headerlink\" title=\"需要安装的Jenkins插件\"></a>需要安装的Jenkins插件</h3><ul>\n<li>Generic Webhook Trigger Plugin</li>\n<li>Publish Over SSH</li>\n<li>第一个是为了配置钩子，第二个是为了连接服务器，我们先去<code>Jenkins-系统配置</code>中将服务器配置好</li>\n</ul>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/2/27/170875e85ae93820?w=531&amp;h=595&amp;f=png&amp;s=53839\" alt></p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/2/27/170875ea25179877?w=1632&amp;h=750&amp;f=png&amp;s=31534\" alt><br>其中的<code>Remote Directory</code>是博客构建后代码放置的位置</p>\n<h3 id=\"生成hooks\"><a href=\"#生成hooks\" class=\"headerlink\" title=\"生成hooks\"></a>生成hooks</h3><h4 id=\"在Jenkins的用户管理中生成Api-Token\"><a href=\"#在Jenkins的用户管理中生成Api-Token\" class=\"headerlink\" title=\"在Jenkins的用户管理中生成Api Token\"></a>在Jenkins的用户管理中生成Api Token</h4><p><img src=\"https://user-gold-cdn.xitu.io/2020/2/27/170874d991ea6a0a?w=465&amp;h=916&amp;f=png&amp;s=64644\" alt></p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/2/27/170874dc8833ef8c?w=945&amp;h=201&amp;f=png&amp;s=5925\" alt></p>\n<h4 id=\"为Github的仓库配置web-hooks\"><a href=\"#为Github的仓库配置web-hooks\" class=\"headerlink\" title=\"为Github的仓库配置web hooks\"></a>为Github的仓库配置web hooks</h4><p><img src=\"https://user-gold-cdn.xitu.io/2020/2/27/1708752f1bf074cb?w=1505&amp;h=782&amp;f=png&amp;s=54072\" alt><br>URL格式为 http://<username>:<apitoken>@<jenkinsip>:&lt;端口&gt;/generic-webhook-trigger/invoke</jenkinsip></apitoken></username></p>\n<h3 id=\"配置Jenkins项目\"><a href=\"#配置Jenkins项目\" class=\"headerlink\" title=\"配置Jenkins项目\"></a>配置Jenkins项目</h3><h4 id=\"构建触发器\"><a href=\"#构建触发器\" class=\"headerlink\" title=\"构建触发器\"></a>构建触发器</h4><p><img src=\"https://user-gold-cdn.xitu.io/2020/2/27/170876031729ebb0?w=1574&amp;h=707&amp;f=png&amp;s=61398\" alt></p>\n<h4 id=\"选择构建环境\"><a href=\"#选择构建环境\" class=\"headerlink\" title=\"选择构建环境\"></a>选择构建环境</h4><p><img src=\"https://user-gold-cdn.xitu.io/2020/2/28/1708760b16ddd52d?w=1508&amp;h=859&amp;f=png&amp;s=58249\" alt></p>\n<h4 id=\"构建脚本\"><a href=\"#构建脚本\" class=\"headerlink\" title=\"构建脚本\"></a>构建脚本</h4><p><img src=\"https://user-gold-cdn.xitu.io/2020/2/28/1708760e333b2f4d?w=1190&amp;h=354&amp;f=png&amp;s=9704\" alt></p>\n<h4 id=\"构建后操作\"><a href=\"#构建后操作\" class=\"headerlink\" title=\"构建后操作\"></a>构建后操作</h4><p><img src=\"https://user-gold-cdn.xitu.io/2020/2/28/170876109373951a?w=1486&amp;h=775&amp;f=png&amp;s=47869\" alt></p>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><p>现在，提交点代码，去Jenkins就能看到相关的构建信息了</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/2/28/17087765e0747712?w=1086&amp;h=868&amp;f=png&amp;s=69502\" alt></p>\n<h3 id=\"Nginx\"><a href=\"#Nginx\" class=\"headerlink\" title=\"Nginx\"></a>Nginx</h3><p>下一步就是nginx的配置，这一步相对简单<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       80;</span><br><span class=\"line\">    server_name   wwww.xxxxx.com;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        root /home/blog;</span><br><span class=\"line\">        index index.html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>最后reload一下nginx即可<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -s reload</span><br></pre></td></tr></table></figure></p>\n<p>到这里，就可以通过自己的域名<code>wwww.xxxxx.com</code>访问博客了</p>\n<h3 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h3><p>因为涉及的东西比较多，所以很多都是配了图而缺少文字解释，后面等我有时间，我再慢慢补充，慢慢解释。老铁们要是有问题或者疑问，欢迎留言，我会认真解答的！</p>\n"},{"title":"2020年，必须拥有自己的博客网站(中)","date":"2020-02-24T04:39:27.000Z","_content":"\n在上篇教程 [2020年，必须拥有自己的博客网站(上)](https://juejin.im/post/5e514b2de51d45271849db03)中，我们使用Hexo开发了一套博客，并成功使用travis-ci将其自动化部署到github-pages，[预览地址](https://xch1029.github.io/myblog/)。\n\n本篇教程作为这个系列的第二篇，主要讲解怎么使用Hexo进行创作以及主题的配置。\n\n官方有个主题集合的页面[https://hexo.io/themes/](https://hexo.io/themes/)，页面上提供了大量的主题以供大家挑选。但是这不能满足所有的口味，所幸Hexo的主题配置并不局限于官方提供的这些，事实上，任何第三方主题都可以应用到你的博客上，甚至可以自定义样式，这就是Hexo在主题上的灵活性。\n\n为了证明这点，我们并不使用来自官方页面中的主题，我们在github上找到`hexo-theme-next`主题，这个主题看起来很清爽：[地址](https://github.com/iissnan/hexo-theme-next)\n\n### 下载主题\n我们所有的主题都被放在根目录`/themes`文件夹下，现在只有一个默认主题`/themes/landscape`。我们现在将`next`主题的源码下载到`themes/next`\n```\n# 执行\ngit clone https://github.com/iissnan/hexo-theme-next.git themes/next\n```\n\n有时候，github的网速很慢，我们也可以直接打包下载，然后在themes/next中解压即可，最终你的themes目录看起来是这样的：\n```\n|-themes\n|--landscape\n|--next\n```\n现在主题的代码已经下载到了项目中，下一步，修改`_config.yml`文件以应用`next`主题，这个文件是`hexo`中所有配置的集合，以后我们会经常和它打交道。\n```\n# _config.yml\n# ...\n# 中文\nlanguage: zh-CN\n# 应用next主题\ntheme: next\n```\n配置好后，本地启动博客：\n```\nhexo serve\n# 或者简写 hexo s\n```\n完美的运行起来了。\n\n### 主题的更新\n后面，这个主题要是发布了新的版本，更新是件很简单的事儿：\n```\ncd themes/next\ngit pull\n```\n\n### 修改更多默认配置\n初始化项目时有些默认的配置项不是我们想要的，我们需要再次修改`_config.yml`文件\n```\n# _config.yml\n# ...\ntitle: 欢迎来到德莱联盟\nsubtitle: '这是你歇脚的地方'\nauthor: 迈克尔\n```\n\n![](https://user-gold-cdn.xitu.io/2020/2/24/1707762d166630c4?w=1920&h=944&f=png&s=45272)\n现在有点样子了\n\n\n![](https://user-gold-cdn.xitu.io/2020/2/24/170776a36206bdb1?w=640&h=133&f=png&s=4964)\n\n页脚的强力驱动和主题我们也可以隐藏了，这些配置属于`next`，所以我们需要修改`/themes/next/_config.yml`文件\n```\n  powered:\n    # Hexo link (Powered by Hexo).\n    enable: false\n\n  theme:\n    # Theme & scheme info link (Theme - NexT.scheme).\n    enable: false\n```\n\n### 开始编写第一篇文章\n让我们开启创作之旅吧，写下第一篇文章。在Hexo中写作使用的是`markdown`，所以在写作之前，我们简单温习下markdown的语法：\n\n![](https://user-gold-cdn.xitu.io/2020/2/24/1707776d5ea7a90e?w=1362&h=682&f=png&s=67550)\n\n运行以下命令生成一篇文章\n```\n# hexo new [layout] <title>\nhexo new welcome-lol\n```\nhexo自动为我们生成了.md文件：`/source/_posts/welcome-lol.md`，我们继续，开始编辑这个文件：\n```\n# welcome-lol.md\n---\ntitle: 欢迎大家一起来玩LOL\ndate: 2020-02-24 21:56:12\ntags: games\n---\n\n### 什么是英雄联盟？\n英雄联盟（League of Legends）是由美国Riot Games开发，腾讯游戏运营的全新英雄对战网游。英雄联盟的主创团队由各著名游戏公司的核心美术、策划、程序人员组成，他们打造了游戏中风格特色各异的英雄，加入更加丰富的物品合成系统、地图玩法、天梯匹配机制，以及独创的“召唤师”技能、符文、天赋组合，让玩家感受不一样的英雄对战网游。\n\n在游戏中，玩家将扮演一位召唤者，并选择你所信任的联盟国进入这个游戏的正义领域，为了控制瓦罗然的权利而奋战。在这个联盟中只有一条规则：胜者就是一切！\n\n### 全新英雄对战网游\n英雄联盟中拥有的海量英雄及皮肤让人印象深刻——这些英雄不仅在外观上风格迥异，甚至个个都有自己独特的性格和脾气，例如：正气凛然的无畏先锋军团领袖—德玛西亚之力盖伦、意志坚强的弗雷尔卓德部族领袖—寒冰射手艾希、乐于钻研的魔法学者—流浪法师瑞兹……除此之外，你还可以在英雄联盟中看到代表不同地域文化特色的角色或皮肤，其中包括中国武术大师、北欧冰雪巨人、日本忍者、古埃及神话角色等。\n\n在游戏中，身为召唤师的玩家在每局游戏中都将召唤一位英雄帮助自己进行战斗。目前已经有许多英雄协助他们达成目标，在英雄联盟中完成各自心中的正义之战！我们也深信，在英雄联盟超过100位英雄中，总有一个是合适你的！\n\n英雄，为你而战！\n\n注：英雄联盟每周有13位免费英雄可供使用\n\n### 初识《英雄联盟》\n首次进入游戏的玩家，系统会提示他选择自己的游戏水平，目前共分为4个等级，分别为\n- 我是新手\n- 我玩过英雄对战游戏\n- 我是高手\n- 我是大湿\n> 我们强烈建议新手玩家选择等级 `我是新手` 通过游戏中的新手教程来了解基础操作。\n\n```\n\n![](https://user-gold-cdn.xitu.io/2020/2/24/1707784edf5b12a2?w=1920&h=944&f=png&s=74938)\n真的是太酷了，hexo为我们做了大量背后的脏活，我们只要集中精力在我们的创作上即可！\n\n\n### 开启更多特性\n可以说，`_config.yml`文件承载着博客的一切，这一步我们加入更多的有趣特性，比如Github链接、Github徽章、关于我页面等：\n\n\n![](https://user-gold-cdn.xitu.io/2020/2/24/170779b5602c481e?w=1920&h=944&f=png&s=31921)\n\n### 提交代码\n最后一步，提交代码至Github，触发travis-ci的自动化构建，再次查看我们的博客地址，已经有了新的变化！！！\n[博客预览地址](https://xch1029.github.io/myblog/)\n\n### 下一篇\n请持续关注这个系列，下一篇：基于Jenkins自动化部署博客到自己的服务器和域名\n\n","source":"_posts/write-a-blog-for-yourself2.md","raw":"---\ntitle: 2020年，必须拥有自己的博客网站(中)\ndate: 2020-02-24 12:39:27\ntags: Hexo\n---\n\n在上篇教程 [2020年，必须拥有自己的博客网站(上)](https://juejin.im/post/5e514b2de51d45271849db03)中，我们使用Hexo开发了一套博客，并成功使用travis-ci将其自动化部署到github-pages，[预览地址](https://xch1029.github.io/myblog/)。\n\n本篇教程作为这个系列的第二篇，主要讲解怎么使用Hexo进行创作以及主题的配置。\n\n官方有个主题集合的页面[https://hexo.io/themes/](https://hexo.io/themes/)，页面上提供了大量的主题以供大家挑选。但是这不能满足所有的口味，所幸Hexo的主题配置并不局限于官方提供的这些，事实上，任何第三方主题都可以应用到你的博客上，甚至可以自定义样式，这就是Hexo在主题上的灵活性。\n\n为了证明这点，我们并不使用来自官方页面中的主题，我们在github上找到`hexo-theme-next`主题，这个主题看起来很清爽：[地址](https://github.com/iissnan/hexo-theme-next)\n\n### 下载主题\n我们所有的主题都被放在根目录`/themes`文件夹下，现在只有一个默认主题`/themes/landscape`。我们现在将`next`主题的源码下载到`themes/next`\n```\n# 执行\ngit clone https://github.com/iissnan/hexo-theme-next.git themes/next\n```\n\n有时候，github的网速很慢，我们也可以直接打包下载，然后在themes/next中解压即可，最终你的themes目录看起来是这样的：\n```\n|-themes\n|--landscape\n|--next\n```\n现在主题的代码已经下载到了项目中，下一步，修改`_config.yml`文件以应用`next`主题，这个文件是`hexo`中所有配置的集合，以后我们会经常和它打交道。\n```\n# _config.yml\n# ...\n# 中文\nlanguage: zh-CN\n# 应用next主题\ntheme: next\n```\n配置好后，本地启动博客：\n```\nhexo serve\n# 或者简写 hexo s\n```\n完美的运行起来了。\n\n### 主题的更新\n后面，这个主题要是发布了新的版本，更新是件很简单的事儿：\n```\ncd themes/next\ngit pull\n```\n\n### 修改更多默认配置\n初始化项目时有些默认的配置项不是我们想要的，我们需要再次修改`_config.yml`文件\n```\n# _config.yml\n# ...\ntitle: 欢迎来到德莱联盟\nsubtitle: '这是你歇脚的地方'\nauthor: 迈克尔\n```\n\n![](https://user-gold-cdn.xitu.io/2020/2/24/1707762d166630c4?w=1920&h=944&f=png&s=45272)\n现在有点样子了\n\n\n![](https://user-gold-cdn.xitu.io/2020/2/24/170776a36206bdb1?w=640&h=133&f=png&s=4964)\n\n页脚的强力驱动和主题我们也可以隐藏了，这些配置属于`next`，所以我们需要修改`/themes/next/_config.yml`文件\n```\n  powered:\n    # Hexo link (Powered by Hexo).\n    enable: false\n\n  theme:\n    # Theme & scheme info link (Theme - NexT.scheme).\n    enable: false\n```\n\n### 开始编写第一篇文章\n让我们开启创作之旅吧，写下第一篇文章。在Hexo中写作使用的是`markdown`，所以在写作之前，我们简单温习下markdown的语法：\n\n![](https://user-gold-cdn.xitu.io/2020/2/24/1707776d5ea7a90e?w=1362&h=682&f=png&s=67550)\n\n运行以下命令生成一篇文章\n```\n# hexo new [layout] <title>\nhexo new welcome-lol\n```\nhexo自动为我们生成了.md文件：`/source/_posts/welcome-lol.md`，我们继续，开始编辑这个文件：\n```\n# welcome-lol.md\n---\ntitle: 欢迎大家一起来玩LOL\ndate: 2020-02-24 21:56:12\ntags: games\n---\n\n### 什么是英雄联盟？\n英雄联盟（League of Legends）是由美国Riot Games开发，腾讯游戏运营的全新英雄对战网游。英雄联盟的主创团队由各著名游戏公司的核心美术、策划、程序人员组成，他们打造了游戏中风格特色各异的英雄，加入更加丰富的物品合成系统、地图玩法、天梯匹配机制，以及独创的“召唤师”技能、符文、天赋组合，让玩家感受不一样的英雄对战网游。\n\n在游戏中，玩家将扮演一位召唤者，并选择你所信任的联盟国进入这个游戏的正义领域，为了控制瓦罗然的权利而奋战。在这个联盟中只有一条规则：胜者就是一切！\n\n### 全新英雄对战网游\n英雄联盟中拥有的海量英雄及皮肤让人印象深刻——这些英雄不仅在外观上风格迥异，甚至个个都有自己独特的性格和脾气，例如：正气凛然的无畏先锋军团领袖—德玛西亚之力盖伦、意志坚强的弗雷尔卓德部族领袖—寒冰射手艾希、乐于钻研的魔法学者—流浪法师瑞兹……除此之外，你还可以在英雄联盟中看到代表不同地域文化特色的角色或皮肤，其中包括中国武术大师、北欧冰雪巨人、日本忍者、古埃及神话角色等。\n\n在游戏中，身为召唤师的玩家在每局游戏中都将召唤一位英雄帮助自己进行战斗。目前已经有许多英雄协助他们达成目标，在英雄联盟中完成各自心中的正义之战！我们也深信，在英雄联盟超过100位英雄中，总有一个是合适你的！\n\n英雄，为你而战！\n\n注：英雄联盟每周有13位免费英雄可供使用\n\n### 初识《英雄联盟》\n首次进入游戏的玩家，系统会提示他选择自己的游戏水平，目前共分为4个等级，分别为\n- 我是新手\n- 我玩过英雄对战游戏\n- 我是高手\n- 我是大湿\n> 我们强烈建议新手玩家选择等级 `我是新手` 通过游戏中的新手教程来了解基础操作。\n\n```\n\n![](https://user-gold-cdn.xitu.io/2020/2/24/1707784edf5b12a2?w=1920&h=944&f=png&s=74938)\n真的是太酷了，hexo为我们做了大量背后的脏活，我们只要集中精力在我们的创作上即可！\n\n\n### 开启更多特性\n可以说，`_config.yml`文件承载着博客的一切，这一步我们加入更多的有趣特性，比如Github链接、Github徽章、关于我页面等：\n\n\n![](https://user-gold-cdn.xitu.io/2020/2/24/170779b5602c481e?w=1920&h=944&f=png&s=31921)\n\n### 提交代码\n最后一步，提交代码至Github，触发travis-ci的自动化构建，再次查看我们的博客地址，已经有了新的变化！！！\n[博客预览地址](https://xch1029.github.io/myblog/)\n\n### 下一篇\n请持续关注这个系列，下一篇：基于Jenkins自动化部署博客到自己的服务器和域名\n\n","slug":"write-a-blog-for-yourself2","published":1,"updated":"2020-03-10T12:45:23.779Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7q4ux42000q4wnu159cln1f","content":"<p>在上篇教程 <a href=\"https://juejin.im/post/5e514b2de51d45271849db03\" target=\"_blank\" rel=\"noopener\">2020年，必须拥有自己的博客网站(上)</a>中，我们使用Hexo开发了一套博客，并成功使用travis-ci将其自动化部署到github-pages，<a href=\"https://xch1029.github.io/myblog/\" target=\"_blank\" rel=\"noopener\">预览地址</a>。</p>\n<p>本篇教程作为这个系列的第二篇，主要讲解怎么使用Hexo进行创作以及主题的配置。</p>\n<p>官方有个主题集合的页面<a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener\">https://hexo.io/themes/</a>，页面上提供了大量的主题以供大家挑选。但是这不能满足所有的口味，所幸Hexo的主题配置并不局限于官方提供的这些，事实上，任何第三方主题都可以应用到你的博客上，甚至可以自定义样式，这就是Hexo在主题上的灵活性。</p>\n<p>为了证明这点，我们并不使用来自官方页面中的主题，我们在github上找到<code>hexo-theme-next</code>主题，这个主题看起来很清爽：<a href=\"https://github.com/iissnan/hexo-theme-next\" target=\"_blank\" rel=\"noopener\">地址</a></p>\n<h3 id=\"下载主题\"><a href=\"#下载主题\" class=\"headerlink\" title=\"下载主题\"></a>下载主题</h3><p>我们所有的主题都被放在根目录<code>/themes</code>文件夹下，现在只有一个默认主题<code>/themes/landscape</code>。我们现在将<code>next</code>主题的源码下载到<code>themes/next</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 执行</span><br><span class=\"line\">git clone https://github.com/iissnan/hexo-theme-next.git themes/next</span><br></pre></td></tr></table></figure></p>\n<p>有时候，github的网速很慢，我们也可以直接打包下载，然后在themes/next中解压即可，最终你的themes目录看起来是这样的：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|-themes</span><br><span class=\"line\">|--landscape</span><br><span class=\"line\">|--next</span><br></pre></td></tr></table></figure></p>\n<p>现在主题的代码已经下载到了项目中，下一步，修改<code>_config.yml</code>文件以应用<code>next</code>主题，这个文件是<code>hexo</code>中所有配置的集合，以后我们会经常和它打交道。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># _config.yml</span><br><span class=\"line\"># ...</span><br><span class=\"line\"># 中文</span><br><span class=\"line\">language: zh-CN</span><br><span class=\"line\"># 应用next主题</span><br><span class=\"line\">theme: next</span><br></pre></td></tr></table></figure></p>\n<p>配置好后，本地启动博客：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo serve</span><br><span class=\"line\"># 或者简写 hexo s</span><br></pre></td></tr></table></figure></p>\n<p>完美的运行起来了。</p>\n<h3 id=\"主题的更新\"><a href=\"#主题的更新\" class=\"headerlink\" title=\"主题的更新\"></a>主题的更新</h3><p>后面，这个主题要是发布了新的版本，更新是件很简单的事儿：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd themes/next</span><br><span class=\"line\">git pull</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"修改更多默认配置\"><a href=\"#修改更多默认配置\" class=\"headerlink\" title=\"修改更多默认配置\"></a>修改更多默认配置</h3><p>初始化项目时有些默认的配置项不是我们想要的，我们需要再次修改<code>_config.yml</code>文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># _config.yml</span><br><span class=\"line\"># ...</span><br><span class=\"line\">title: 欢迎来到德莱联盟</span><br><span class=\"line\">subtitle: &apos;这是你歇脚的地方&apos;</span><br><span class=\"line\">author: 迈克尔</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/2/24/1707762d166630c4?w=1920&amp;h=944&amp;f=png&amp;s=45272\" alt><br>现在有点样子了</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/2/24/170776a36206bdb1?w=640&amp;h=133&amp;f=png&amp;s=4964\" alt></p>\n<p>页脚的强力驱动和主题我们也可以隐藏了，这些配置属于<code>next</code>，所以我们需要修改<code>/themes/next/_config.yml</code>文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">powered:</span><br><span class=\"line\">  # Hexo link (Powered by Hexo).</span><br><span class=\"line\">  enable: false</span><br><span class=\"line\"></span><br><span class=\"line\">theme:</span><br><span class=\"line\">  # Theme &amp; scheme info link (Theme - NexT.scheme).</span><br><span class=\"line\">  enable: false</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"开始编写第一篇文章\"><a href=\"#开始编写第一篇文章\" class=\"headerlink\" title=\"开始编写第一篇文章\"></a>开始编写第一篇文章</h3><p>让我们开启创作之旅吧，写下第一篇文章。在Hexo中写作使用的是<code>markdown</code>，所以在写作之前，我们简单温习下markdown的语法：</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/2/24/1707776d5ea7a90e?w=1362&amp;h=682&amp;f=png&amp;s=67550\" alt></p>\n<p>运行以下命令生成一篇文章<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># hexo new [layout] &lt;title&gt;</span><br><span class=\"line\">hexo new welcome-lol</span><br></pre></td></tr></table></figure></p>\n<p>hexo自动为我们生成了.md文件：<code>/source/_posts/welcome-lol.md</code>，我们继续，开始编辑这个文件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># welcome-lol.md</span><br><span class=\"line\">---</span><br><span class=\"line\">title: 欢迎大家一起来玩LOL</span><br><span class=\"line\">date: 2020-02-24 21:56:12</span><br><span class=\"line\">tags: games</span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\">### 什么是英雄联盟？</span><br><span class=\"line\">英雄联盟（League of Legends）是由美国Riot Games开发，腾讯游戏运营的全新英雄对战网游。英雄联盟的主创团队由各著名游戏公司的核心美术、策划、程序人员组成，他们打造了游戏中风格特色各异的英雄，加入更加丰富的物品合成系统、地图玩法、天梯匹配机制，以及独创的“召唤师”技能、符文、天赋组合，让玩家感受不一样的英雄对战网游。</span><br><span class=\"line\"></span><br><span class=\"line\">在游戏中，玩家将扮演一位召唤者，并选择你所信任的联盟国进入这个游戏的正义领域，为了控制瓦罗然的权利而奋战。在这个联盟中只有一条规则：胜者就是一切！</span><br><span class=\"line\"></span><br><span class=\"line\">### 全新英雄对战网游</span><br><span class=\"line\">英雄联盟中拥有的海量英雄及皮肤让人印象深刻——这些英雄不仅在外观上风格迥异，甚至个个都有自己独特的性格和脾气，例如：正气凛然的无畏先锋军团领袖—德玛西亚之力盖伦、意志坚强的弗雷尔卓德部族领袖—寒冰射手艾希、乐于钻研的魔法学者—流浪法师瑞兹……除此之外，你还可以在英雄联盟中看到代表不同地域文化特色的角色或皮肤，其中包括中国武术大师、北欧冰雪巨人、日本忍者、古埃及神话角色等。</span><br><span class=\"line\"></span><br><span class=\"line\">在游戏中，身为召唤师的玩家在每局游戏中都将召唤一位英雄帮助自己进行战斗。目前已经有许多英雄协助他们达成目标，在英雄联盟中完成各自心中的正义之战！我们也深信，在英雄联盟超过100位英雄中，总有一个是合适你的！</span><br><span class=\"line\"></span><br><span class=\"line\">英雄，为你而战！</span><br><span class=\"line\"></span><br><span class=\"line\">注：英雄联盟每周有13位免费英雄可供使用</span><br><span class=\"line\"></span><br><span class=\"line\">### 初识《英雄联盟》</span><br><span class=\"line\">首次进入游戏的玩家，系统会提示他选择自己的游戏水平，目前共分为4个等级，分别为</span><br><span class=\"line\">- 我是新手</span><br><span class=\"line\">- 我玩过英雄对战游戏</span><br><span class=\"line\">- 我是高手</span><br><span class=\"line\">- 我是大湿</span><br><span class=\"line\">&gt; 我们强烈建议新手玩家选择等级 `我是新手` 通过游戏中的新手教程来了解基础操作。</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/2/24/1707784edf5b12a2?w=1920&amp;h=944&amp;f=png&amp;s=74938\" alt><br>真的是太酷了，hexo为我们做了大量背后的脏活，我们只要集中精力在我们的创作上即可！</p>\n<h3 id=\"开启更多特性\"><a href=\"#开启更多特性\" class=\"headerlink\" title=\"开启更多特性\"></a>开启更多特性</h3><p>可以说，<code>_config.yml</code>文件承载着博客的一切，这一步我们加入更多的有趣特性，比如Github链接、Github徽章、关于我页面等：</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/2/24/170779b5602c481e?w=1920&amp;h=944&amp;f=png&amp;s=31921\" alt></p>\n<h3 id=\"提交代码\"><a href=\"#提交代码\" class=\"headerlink\" title=\"提交代码\"></a>提交代码</h3><p>最后一步，提交代码至Github，触发travis-ci的自动化构建，再次查看我们的博客地址，已经有了新的变化！！！<br><a href=\"https://xch1029.github.io/myblog/\" target=\"_blank\" rel=\"noopener\">博客预览地址</a></p>\n<h3 id=\"下一篇\"><a href=\"#下一篇\" class=\"headerlink\" title=\"下一篇\"></a>下一篇</h3><p>请持续关注这个系列，下一篇：基于Jenkins自动化部署博客到自己的服务器和域名</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在上篇教程 <a href=\"https://juejin.im/post/5e514b2de51d45271849db03\" target=\"_blank\" rel=\"noopener\">2020年，必须拥有自己的博客网站(上)</a>中，我们使用Hexo开发了一套博客，并成功使用travis-ci将其自动化部署到github-pages，<a href=\"https://xch1029.github.io/myblog/\" target=\"_blank\" rel=\"noopener\">预览地址</a>。</p>\n<p>本篇教程作为这个系列的第二篇，主要讲解怎么使用Hexo进行创作以及主题的配置。</p>\n<p>官方有个主题集合的页面<a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener\">https://hexo.io/themes/</a>，页面上提供了大量的主题以供大家挑选。但是这不能满足所有的口味，所幸Hexo的主题配置并不局限于官方提供的这些，事实上，任何第三方主题都可以应用到你的博客上，甚至可以自定义样式，这就是Hexo在主题上的灵活性。</p>\n<p>为了证明这点，我们并不使用来自官方页面中的主题，我们在github上找到<code>hexo-theme-next</code>主题，这个主题看起来很清爽：<a href=\"https://github.com/iissnan/hexo-theme-next\" target=\"_blank\" rel=\"noopener\">地址</a></p>\n<h3 id=\"下载主题\"><a href=\"#下载主题\" class=\"headerlink\" title=\"下载主题\"></a>下载主题</h3><p>我们所有的主题都被放在根目录<code>/themes</code>文件夹下，现在只有一个默认主题<code>/themes/landscape</code>。我们现在将<code>next</code>主题的源码下载到<code>themes/next</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 执行</span><br><span class=\"line\">git clone https://github.com/iissnan/hexo-theme-next.git themes/next</span><br></pre></td></tr></table></figure></p>\n<p>有时候，github的网速很慢，我们也可以直接打包下载，然后在themes/next中解压即可，最终你的themes目录看起来是这样的：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|-themes</span><br><span class=\"line\">|--landscape</span><br><span class=\"line\">|--next</span><br></pre></td></tr></table></figure></p>\n<p>现在主题的代码已经下载到了项目中，下一步，修改<code>_config.yml</code>文件以应用<code>next</code>主题，这个文件是<code>hexo</code>中所有配置的集合，以后我们会经常和它打交道。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># _config.yml</span><br><span class=\"line\"># ...</span><br><span class=\"line\"># 中文</span><br><span class=\"line\">language: zh-CN</span><br><span class=\"line\"># 应用next主题</span><br><span class=\"line\">theme: next</span><br></pre></td></tr></table></figure></p>\n<p>配置好后，本地启动博客：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo serve</span><br><span class=\"line\"># 或者简写 hexo s</span><br></pre></td></tr></table></figure></p>\n<p>完美的运行起来了。</p>\n<h3 id=\"主题的更新\"><a href=\"#主题的更新\" class=\"headerlink\" title=\"主题的更新\"></a>主题的更新</h3><p>后面，这个主题要是发布了新的版本，更新是件很简单的事儿：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd themes/next</span><br><span class=\"line\">git pull</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"修改更多默认配置\"><a href=\"#修改更多默认配置\" class=\"headerlink\" title=\"修改更多默认配置\"></a>修改更多默认配置</h3><p>初始化项目时有些默认的配置项不是我们想要的，我们需要再次修改<code>_config.yml</code>文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># _config.yml</span><br><span class=\"line\"># ...</span><br><span class=\"line\">title: 欢迎来到德莱联盟</span><br><span class=\"line\">subtitle: &apos;这是你歇脚的地方&apos;</span><br><span class=\"line\">author: 迈克尔</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/2/24/1707762d166630c4?w=1920&amp;h=944&amp;f=png&amp;s=45272\" alt><br>现在有点样子了</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/2/24/170776a36206bdb1?w=640&amp;h=133&amp;f=png&amp;s=4964\" alt></p>\n<p>页脚的强力驱动和主题我们也可以隐藏了，这些配置属于<code>next</code>，所以我们需要修改<code>/themes/next/_config.yml</code>文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">powered:</span><br><span class=\"line\">  # Hexo link (Powered by Hexo).</span><br><span class=\"line\">  enable: false</span><br><span class=\"line\"></span><br><span class=\"line\">theme:</span><br><span class=\"line\">  # Theme &amp; scheme info link (Theme - NexT.scheme).</span><br><span class=\"line\">  enable: false</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"开始编写第一篇文章\"><a href=\"#开始编写第一篇文章\" class=\"headerlink\" title=\"开始编写第一篇文章\"></a>开始编写第一篇文章</h3><p>让我们开启创作之旅吧，写下第一篇文章。在Hexo中写作使用的是<code>markdown</code>，所以在写作之前，我们简单温习下markdown的语法：</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/2/24/1707776d5ea7a90e?w=1362&amp;h=682&amp;f=png&amp;s=67550\" alt></p>\n<p>运行以下命令生成一篇文章<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># hexo new [layout] &lt;title&gt;</span><br><span class=\"line\">hexo new welcome-lol</span><br></pre></td></tr></table></figure></p>\n<p>hexo自动为我们生成了.md文件：<code>/source/_posts/welcome-lol.md</code>，我们继续，开始编辑这个文件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># welcome-lol.md</span><br><span class=\"line\">---</span><br><span class=\"line\">title: 欢迎大家一起来玩LOL</span><br><span class=\"line\">date: 2020-02-24 21:56:12</span><br><span class=\"line\">tags: games</span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\">### 什么是英雄联盟？</span><br><span class=\"line\">英雄联盟（League of Legends）是由美国Riot Games开发，腾讯游戏运营的全新英雄对战网游。英雄联盟的主创团队由各著名游戏公司的核心美术、策划、程序人员组成，他们打造了游戏中风格特色各异的英雄，加入更加丰富的物品合成系统、地图玩法、天梯匹配机制，以及独创的“召唤师”技能、符文、天赋组合，让玩家感受不一样的英雄对战网游。</span><br><span class=\"line\"></span><br><span class=\"line\">在游戏中，玩家将扮演一位召唤者，并选择你所信任的联盟国进入这个游戏的正义领域，为了控制瓦罗然的权利而奋战。在这个联盟中只有一条规则：胜者就是一切！</span><br><span class=\"line\"></span><br><span class=\"line\">### 全新英雄对战网游</span><br><span class=\"line\">英雄联盟中拥有的海量英雄及皮肤让人印象深刻——这些英雄不仅在外观上风格迥异，甚至个个都有自己独特的性格和脾气，例如：正气凛然的无畏先锋军团领袖—德玛西亚之力盖伦、意志坚强的弗雷尔卓德部族领袖—寒冰射手艾希、乐于钻研的魔法学者—流浪法师瑞兹……除此之外，你还可以在英雄联盟中看到代表不同地域文化特色的角色或皮肤，其中包括中国武术大师、北欧冰雪巨人、日本忍者、古埃及神话角色等。</span><br><span class=\"line\"></span><br><span class=\"line\">在游戏中，身为召唤师的玩家在每局游戏中都将召唤一位英雄帮助自己进行战斗。目前已经有许多英雄协助他们达成目标，在英雄联盟中完成各自心中的正义之战！我们也深信，在英雄联盟超过100位英雄中，总有一个是合适你的！</span><br><span class=\"line\"></span><br><span class=\"line\">英雄，为你而战！</span><br><span class=\"line\"></span><br><span class=\"line\">注：英雄联盟每周有13位免费英雄可供使用</span><br><span class=\"line\"></span><br><span class=\"line\">### 初识《英雄联盟》</span><br><span class=\"line\">首次进入游戏的玩家，系统会提示他选择自己的游戏水平，目前共分为4个等级，分别为</span><br><span class=\"line\">- 我是新手</span><br><span class=\"line\">- 我玩过英雄对战游戏</span><br><span class=\"line\">- 我是高手</span><br><span class=\"line\">- 我是大湿</span><br><span class=\"line\">&gt; 我们强烈建议新手玩家选择等级 `我是新手` 通过游戏中的新手教程来了解基础操作。</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/2/24/1707784edf5b12a2?w=1920&amp;h=944&amp;f=png&amp;s=74938\" alt><br>真的是太酷了，hexo为我们做了大量背后的脏活，我们只要集中精力在我们的创作上即可！</p>\n<h3 id=\"开启更多特性\"><a href=\"#开启更多特性\" class=\"headerlink\" title=\"开启更多特性\"></a>开启更多特性</h3><p>可以说，<code>_config.yml</code>文件承载着博客的一切，这一步我们加入更多的有趣特性，比如Github链接、Github徽章、关于我页面等：</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/2/24/170779b5602c481e?w=1920&amp;h=944&amp;f=png&amp;s=31921\" alt></p>\n<h3 id=\"提交代码\"><a href=\"#提交代码\" class=\"headerlink\" title=\"提交代码\"></a>提交代码</h3><p>最后一步，提交代码至Github，触发travis-ci的自动化构建，再次查看我们的博客地址，已经有了新的变化！！！<br><a href=\"https://xch1029.github.io/myblog/\" target=\"_blank\" rel=\"noopener\">博客预览地址</a></p>\n<h3 id=\"下一篇\"><a href=\"#下一篇\" class=\"headerlink\" title=\"下一篇\"></a>下一篇</h3><p>请持续关注这个系列，下一篇：基于Jenkins自动化部署博客到自己的服务器和域名</p>\n"},{"title":"操作URL的黑科技","date":"2019-06-14T10:02:06.000Z","_content":"### 前言\n现在有这么个URL：www.baidu.com/s?wd=蔡徐坤&skill=篮球&year=2019 ，怎么才能获取query上的字段呢？这时候正则表达式就派上用场了，效果如图：\n\n![](http://qiniu.tbmao.com/URLSearchParams1.jpg)\n\n杀鸡焉用牛刀呢，今天我们来学习下专门用来处理URL的query的接口：URLSearchParams 。\n\n### 简单使用\n只需要new一个URLSearchParams的实例即可，代码：\n\n``` javascript\nlet url = '?wd=蔡徐坤&skill=篮球&year=2019';\nlet searchParams = new URLSearchParams(url);\n\nfor (let p of searchParams) {\n  console.log(p);\n}\n// [\"wd\", \"蔡徐坤\"]\n// [\"skill\", \"篮球\"]\n// [\"year\", \"2019\"]\n```\n### 获取单个字段\n假如现在我只想获取单个字段的值，该怎么办呢？只需要调用这个实例的get方法即可， 代码：\n\n``` javascript\nsearchParams.get('wd') // \"蔡徐坤\"\nsearchParams.get('skill') // \"篮球\"\nsearchParams.get('year') // \"2019\"\n```\n\n有时候不知道一个字段是否存在，所以想事先校验下。使用实例的has方法进行判断，代码：\n\n``` javascript\nsearchParams.has('wd') // true\nsearchParams.has('age') // false\n```\n\n### 添加字段\n实例提供了append方法来添加字段，这个方法接收两个参数，前者是key，后者是value，代码：\n\n``` javascript\nsearchParams.append('age', 26);\nsearchParams.has('age'); // true\nsearchParams.get('age'); // 26\n```\n\n### 删除字段\n现在不想要year字段了，直接使用delete即可，代码：\n\n``` javascript\nsearchParams.delete('year');\nsearchParams.has('year'); // false\n```\n\n### 设置字段\n有时候想重写一个字段，而不是添加(append)一个字段，这时候需要使用set方法，比如，我们觉得坤哥不仅会篮球，还会唱，跳，rap。代码：\n``` javascript\nsearchParams.set('skill', '篮球 唱 跳 rap');\n```\n\n### 转为字符串\n修改实例后，有时候需要再转为字符串，进行路由跳转等，使用toString方法\n\n``` javascript\nsearchParams.toString(); // \"wd=蔡徐坤&skill=篮球+唱+跳+rap&year=2019&age=26\"\n```\n\n### 一波操作后\n\n![](http://qiniu.tbmao.com/URLSearchParams2.gif)\n\n### 兼容性\n\n现代浏览器基本没有啥大问题，但是IE的支持不是很理想。\n\n![](http://qiniu.tbmao.com/URLSearchParams3.png)\n\n### 外链\n- [MDN参考](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams)\n- [博客地址查看 jser.tech](https://jser.tech/2019/06/14/操作URL的黑科技/)\n- [掘金](https://juejin.im/post/5d038c9051882548ac439933)\n","source":"_posts/操作URL的黑科技.md","raw":"---\ntitle: 操作URL的黑科技\ndate: 2019-06-14 18:02:06\ntags: javascript\n---\n### 前言\n现在有这么个URL：www.baidu.com/s?wd=蔡徐坤&skill=篮球&year=2019 ，怎么才能获取query上的字段呢？这时候正则表达式就派上用场了，效果如图：\n\n![](http://qiniu.tbmao.com/URLSearchParams1.jpg)\n\n杀鸡焉用牛刀呢，今天我们来学习下专门用来处理URL的query的接口：URLSearchParams 。\n\n### 简单使用\n只需要new一个URLSearchParams的实例即可，代码：\n\n``` javascript\nlet url = '?wd=蔡徐坤&skill=篮球&year=2019';\nlet searchParams = new URLSearchParams(url);\n\nfor (let p of searchParams) {\n  console.log(p);\n}\n// [\"wd\", \"蔡徐坤\"]\n// [\"skill\", \"篮球\"]\n// [\"year\", \"2019\"]\n```\n### 获取单个字段\n假如现在我只想获取单个字段的值，该怎么办呢？只需要调用这个实例的get方法即可， 代码：\n\n``` javascript\nsearchParams.get('wd') // \"蔡徐坤\"\nsearchParams.get('skill') // \"篮球\"\nsearchParams.get('year') // \"2019\"\n```\n\n有时候不知道一个字段是否存在，所以想事先校验下。使用实例的has方法进行判断，代码：\n\n``` javascript\nsearchParams.has('wd') // true\nsearchParams.has('age') // false\n```\n\n### 添加字段\n实例提供了append方法来添加字段，这个方法接收两个参数，前者是key，后者是value，代码：\n\n``` javascript\nsearchParams.append('age', 26);\nsearchParams.has('age'); // true\nsearchParams.get('age'); // 26\n```\n\n### 删除字段\n现在不想要year字段了，直接使用delete即可，代码：\n\n``` javascript\nsearchParams.delete('year');\nsearchParams.has('year'); // false\n```\n\n### 设置字段\n有时候想重写一个字段，而不是添加(append)一个字段，这时候需要使用set方法，比如，我们觉得坤哥不仅会篮球，还会唱，跳，rap。代码：\n``` javascript\nsearchParams.set('skill', '篮球 唱 跳 rap');\n```\n\n### 转为字符串\n修改实例后，有时候需要再转为字符串，进行路由跳转等，使用toString方法\n\n``` javascript\nsearchParams.toString(); // \"wd=蔡徐坤&skill=篮球+唱+跳+rap&year=2019&age=26\"\n```\n\n### 一波操作后\n\n![](http://qiniu.tbmao.com/URLSearchParams2.gif)\n\n### 兼容性\n\n现代浏览器基本没有啥大问题，但是IE的支持不是很理想。\n\n![](http://qiniu.tbmao.com/URLSearchParams3.png)\n\n### 外链\n- [MDN参考](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams)\n- [博客地址查看 jser.tech](https://jser.tech/2019/06/14/操作URL的黑科技/)\n- [掘金](https://juejin.im/post/5d038c9051882548ac439933)\n","slug":"操作URL的黑科技","published":1,"updated":"2020-02-19T15:20:54.100Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7q4ux44000r4wnupkgq680q","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>现在有这么个URL：<a href=\"http://www.baidu.com/s?wd=蔡徐坤&amp;skill=篮球&amp;year=2019\" target=\"_blank\" rel=\"noopener\">www.baidu.com/s?wd=蔡徐坤&amp;skill=篮球&amp;year=2019</a> ，怎么才能获取query上的字段呢？这时候正则表达式就派上用场了，效果如图：</p>\n<p><img src=\"http://qiniu.tbmao.com/URLSearchParams1.jpg\" alt></p>\n<p>杀鸡焉用牛刀呢，今天我们来学习下专门用来处理URL的query的接口：URLSearchParams 。</p>\n<h3 id=\"简单使用\"><a href=\"#简单使用\" class=\"headerlink\" title=\"简单使用\"></a>简单使用</h3><p>只需要new一个URLSearchParams的实例即可，代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> url = <span class=\"string\">'?wd=蔡徐坤&amp;skill=篮球&amp;year=2019'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> searchParams = <span class=\"keyword\">new</span> URLSearchParams(url);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> p <span class=\"keyword\">of</span> searchParams) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(p);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// [\"wd\", \"蔡徐坤\"]</span></span><br><span class=\"line\"><span class=\"comment\">// [\"skill\", \"篮球\"]</span></span><br><span class=\"line\"><span class=\"comment\">// [\"year\", \"2019\"]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"获取单个字段\"><a href=\"#获取单个字段\" class=\"headerlink\" title=\"获取单个字段\"></a>获取单个字段</h3><p>假如现在我只想获取单个字段的值，该怎么办呢？只需要调用这个实例的get方法即可， 代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">searchParams.get(<span class=\"string\">'wd'</span>) <span class=\"comment\">// \"蔡徐坤\"</span></span><br><span class=\"line\">searchParams.get(<span class=\"string\">'skill'</span>) <span class=\"comment\">// \"篮球\"</span></span><br><span class=\"line\">searchParams.get(<span class=\"string\">'year'</span>) <span class=\"comment\">// \"2019\"</span></span><br></pre></td></tr></table></figure>\n<p>有时候不知道一个字段是否存在，所以想事先校验下。使用实例的has方法进行判断，代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">searchParams.has(<span class=\"string\">'wd'</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\">searchParams.has(<span class=\"string\">'age'</span>) <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"添加字段\"><a href=\"#添加字段\" class=\"headerlink\" title=\"添加字段\"></a>添加字段</h3><p>实例提供了append方法来添加字段，这个方法接收两个参数，前者是key，后者是value，代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">searchParams.append(<span class=\"string\">'age'</span>, <span class=\"number\">26</span>);</span><br><span class=\"line\">searchParams.has(<span class=\"string\">'age'</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\">searchParams.get(<span class=\"string\">'age'</span>); <span class=\"comment\">// 26</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"删除字段\"><a href=\"#删除字段\" class=\"headerlink\" title=\"删除字段\"></a>删除字段</h3><p>现在不想要year字段了，直接使用delete即可，代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">searchParams.delete(<span class=\"string\">'year'</span>);</span><br><span class=\"line\">searchParams.has(<span class=\"string\">'year'</span>); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"设置字段\"><a href=\"#设置字段\" class=\"headerlink\" title=\"设置字段\"></a>设置字段</h3><p>有时候想重写一个字段，而不是添加(append)一个字段，这时候需要使用set方法，比如，我们觉得坤哥不仅会篮球，还会唱，跳，rap。代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">searchParams.set(<span class=\"string\">'skill'</span>, <span class=\"string\">'篮球 唱 跳 rap'</span>);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"转为字符串\"><a href=\"#转为字符串\" class=\"headerlink\" title=\"转为字符串\"></a>转为字符串</h3><p>修改实例后，有时候需要再转为字符串，进行路由跳转等，使用toString方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">searchParams.toString(); <span class=\"comment\">// \"wd=蔡徐坤&amp;skill=篮球+唱+跳+rap&amp;year=2019&amp;age=26\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"一波操作后\"><a href=\"#一波操作后\" class=\"headerlink\" title=\"一波操作后\"></a>一波操作后</h3><p><img src=\"http://qiniu.tbmao.com/URLSearchParams2.gif\" alt></p>\n<h3 id=\"兼容性\"><a href=\"#兼容性\" class=\"headerlink\" title=\"兼容性\"></a>兼容性</h3><p>现代浏览器基本没有啥大问题，但是IE的支持不是很理想。</p>\n<p><img src=\"http://qiniu.tbmao.com/URLSearchParams3.png\" alt></p>\n<h3 id=\"外链\"><a href=\"#外链\" class=\"headerlink\" title=\"外链\"></a>外链</h3><ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams\" target=\"_blank\" rel=\"noopener\">MDN参考</a></li>\n<li><a href=\"https://jser.tech/2019/06/14/操作URL的黑科技/\" target=\"_blank\" rel=\"noopener\">博客地址查看 jser.tech</a></li>\n<li><a href=\"https://juejin.im/post/5d038c9051882548ac439933\" target=\"_blank\" rel=\"noopener\">掘金</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>现在有这么个URL：<a href=\"http://www.baidu.com/s?wd=蔡徐坤&amp;skill=篮球&amp;year=2019\" target=\"_blank\" rel=\"noopener\">www.baidu.com/s?wd=蔡徐坤&amp;skill=篮球&amp;year=2019</a> ，怎么才能获取query上的字段呢？这时候正则表达式就派上用场了，效果如图：</p>\n<p><img src=\"http://qiniu.tbmao.com/URLSearchParams1.jpg\" alt></p>\n<p>杀鸡焉用牛刀呢，今天我们来学习下专门用来处理URL的query的接口：URLSearchParams 。</p>\n<h3 id=\"简单使用\"><a href=\"#简单使用\" class=\"headerlink\" title=\"简单使用\"></a>简单使用</h3><p>只需要new一个URLSearchParams的实例即可，代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> url = <span class=\"string\">'?wd=蔡徐坤&amp;skill=篮球&amp;year=2019'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> searchParams = <span class=\"keyword\">new</span> URLSearchParams(url);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> p <span class=\"keyword\">of</span> searchParams) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(p);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// [\"wd\", \"蔡徐坤\"]</span></span><br><span class=\"line\"><span class=\"comment\">// [\"skill\", \"篮球\"]</span></span><br><span class=\"line\"><span class=\"comment\">// [\"year\", \"2019\"]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"获取单个字段\"><a href=\"#获取单个字段\" class=\"headerlink\" title=\"获取单个字段\"></a>获取单个字段</h3><p>假如现在我只想获取单个字段的值，该怎么办呢？只需要调用这个实例的get方法即可， 代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">searchParams.get(<span class=\"string\">'wd'</span>) <span class=\"comment\">// \"蔡徐坤\"</span></span><br><span class=\"line\">searchParams.get(<span class=\"string\">'skill'</span>) <span class=\"comment\">// \"篮球\"</span></span><br><span class=\"line\">searchParams.get(<span class=\"string\">'year'</span>) <span class=\"comment\">// \"2019\"</span></span><br></pre></td></tr></table></figure>\n<p>有时候不知道一个字段是否存在，所以想事先校验下。使用实例的has方法进行判断，代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">searchParams.has(<span class=\"string\">'wd'</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\">searchParams.has(<span class=\"string\">'age'</span>) <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"添加字段\"><a href=\"#添加字段\" class=\"headerlink\" title=\"添加字段\"></a>添加字段</h3><p>实例提供了append方法来添加字段，这个方法接收两个参数，前者是key，后者是value，代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">searchParams.append(<span class=\"string\">'age'</span>, <span class=\"number\">26</span>);</span><br><span class=\"line\">searchParams.has(<span class=\"string\">'age'</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\">searchParams.get(<span class=\"string\">'age'</span>); <span class=\"comment\">// 26</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"删除字段\"><a href=\"#删除字段\" class=\"headerlink\" title=\"删除字段\"></a>删除字段</h3><p>现在不想要year字段了，直接使用delete即可，代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">searchParams.delete(<span class=\"string\">'year'</span>);</span><br><span class=\"line\">searchParams.has(<span class=\"string\">'year'</span>); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"设置字段\"><a href=\"#设置字段\" class=\"headerlink\" title=\"设置字段\"></a>设置字段</h3><p>有时候想重写一个字段，而不是添加(append)一个字段，这时候需要使用set方法，比如，我们觉得坤哥不仅会篮球，还会唱，跳，rap。代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">searchParams.set(<span class=\"string\">'skill'</span>, <span class=\"string\">'篮球 唱 跳 rap'</span>);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"转为字符串\"><a href=\"#转为字符串\" class=\"headerlink\" title=\"转为字符串\"></a>转为字符串</h3><p>修改实例后，有时候需要再转为字符串，进行路由跳转等，使用toString方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">searchParams.toString(); <span class=\"comment\">// \"wd=蔡徐坤&amp;skill=篮球+唱+跳+rap&amp;year=2019&amp;age=26\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"一波操作后\"><a href=\"#一波操作后\" class=\"headerlink\" title=\"一波操作后\"></a>一波操作后</h3><p><img src=\"http://qiniu.tbmao.com/URLSearchParams2.gif\" alt></p>\n<h3 id=\"兼容性\"><a href=\"#兼容性\" class=\"headerlink\" title=\"兼容性\"></a>兼容性</h3><p>现代浏览器基本没有啥大问题，但是IE的支持不是很理想。</p>\n<p><img src=\"http://qiniu.tbmao.com/URLSearchParams3.png\" alt></p>\n<h3 id=\"外链\"><a href=\"#外链\" class=\"headerlink\" title=\"外链\"></a>外链</h3><ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams\" target=\"_blank\" rel=\"noopener\">MDN参考</a></li>\n<li><a href=\"https://jser.tech/2019/06/14/操作URL的黑科技/\" target=\"_blank\" rel=\"noopener\">博客地址查看 jser.tech</a></li>\n<li><a href=\"https://juejin.im/post/5d038c9051882548ac439933\" target=\"_blank\" rel=\"noopener\">掘金</a></li>\n</ul>\n"},{"title":"console完全指北","date":"2020-03-13T10:14:11.000Z","_content":"\n一直以来，作为前端工程师，调试bug的时候，用的最多的就是`console.log`，我是中枪了，哈哈。其实，console还有很多不为人知的功能和一些新奇的玩法。比如下图是知乎的控制台打印内容：\n\n![](https://user-gold-cdn.xitu.io/2020/3/13/170d2224b0ff2ad0?w=942&h=352&f=png&s=17190)\n\n逼格一下子就上来了，有没有？\n\n\n### 开始之前，看清对象\n不要误会，这里的对象不是你的女朋友哦，在开始学习console之前，我们打印下console本身，看看它到底长什么样\n```\nconsole.log(console)\n```\n\n![](https://user-gold-cdn.xitu.io/2020/3/13/170d229aef30615e?w=527&h=494&f=png&s=24360)\n\n大概长这样，一个庞然大物，不要担心，接下来，我们来解剖下对象\n\n### 第一个命令：清空\n我们习惯了在调试之前清空下控制台，保持整洁。常见的做法就是点击控制台提供的清空按钮。在这：\n\n![](https://user-gold-cdn.xitu.io/2020/3/13/170d22d6c2b8904e?w=787&h=337&f=png&s=17740)\n\n同时，我们可以调用console对象的clear方法达到同样的效果：\n\n```\nconsole.clear()\n```\n执行后提示`console was cleared`，就代表清空啦\n\n![](https://user-gold-cdn.xitu.io/2020/3/13/170d22f857cfce9f?w=360&h=146&f=png&s=3216)\n\n### 高频指令\n有几个使用频率非常高的指令：\n```\nconsole.log()\nconsle.warn()\nconsole.error()\n```\n#### console.log\n`conosle.log`是我们最常用的指令，没有之一，我以前一直以为控制台只有这么一个功能，哈哈。\n##### 单参数\n```\n// 1.字符串\nconsole.log('在别的游戏里，像我这么帅的一般都是主角哦！')\n// 2.数字\nconsole.log(100)\n// 3.对象\nconsole.log({object: '对象'})\n// 4.数组\nconsole.log(['array', '数组'])\n```\n\n![](https://user-gold-cdn.xitu.io/2020/3/13/170d239aa20bf1be?w=429&h=213&f=png&s=8920)\n\n##### 多参数\n`console.log()`可以接受多个参数：\n```\nconsole.log('Noxians… I hate those guys', '在别的游戏里，像我这么帅的一般都是主角哦！')\nconsole.log(100, 200)\nconsole.log({object: '对象1'}, {object: '对象2'})\nconsole.log(['array', '数组1'], ['array', '数组2'])\n```\n\n![](https://user-gold-cdn.xitu.io/2020/3/13/170d23db82f33079?w=598&h=150&f=png&s=11342)\n\n##### 替换模式\n`console.log`支持字符串替换模式：\n```\nconsole.log('%s很生气，后果很严重！', '俺')\nconsole.log('是的，只要%i，就能让你爽到不能呼吸', 998)\nconsole.log('这是你的对象: %o', {object: '对象'})\n```\n\n![](https://user-gold-cdn.xitu.io/2020/3/13/170d2447bd55c902?w=436&h=114&f=png&s=6887)\n\n##### 样式\n可以为打印出来的文字应用`css`样式，这个功能着实厉害，玩得好可以大秀逼格，先看个简单的例子：\n```\nconsole.log('%c我还以为你从来都不会选我呢', 'color: red; font-size: 30px')\n```\n\n![](https://user-gold-cdn.xitu.io/2020/3/13/170d2ecc9c97210a?w=538&h=67&f=png&s=9100)\n\n还可以配置多处的样式：\n```\nconsole.log('你们知道最强的%c武器%c是什么？没错，就是%c补丁', 'color: blue;', '', 'color: yellow;font-size: 30px')\n```\n\n![](https://user-gold-cdn.xitu.io/2020/3/13/170d2f02b6b228c0?w=805&h=68&f=png&s=5472)\n是不是很香！但是这也有个小问题，样式越写越多，阅读起来很麻烦，接下来看下更高级的用法：\n```\nconsole.log('%c大部分人都会打飞机，这对飞机来说很不公平！', `\n  background: white;\n  border: 3px solid red;\n  border-radius: 10px;\n  color: red;\n  font-size: 50px;\n  margin: 40px;\n  padding: 20px;\n  box-shadow: 0 2px 3px 0 rgba(0,0,0,.05);\n`);\n```\n\n\n![](https://user-gold-cdn.xitu.io/2020/3/13/170d2f7990302658?w=1265&h=344&f=png&s=27500)\n\n这个高级用法惊艳到你了吗？发挥你的想象力，可以打印出各种骚东西的！\n\n这种行内样式写起来可能有点冗长，我们还可以使用变量来维护样式：\n```\nconst clearStyles = '';\nconst largeText = 'font-size: 20px;';\nconst yellowText = 'color: yellow;';\nconst largeRedText = 'font-size: 20px; color: red;';\nconst largeGreenText = 'font-size: 20px; color: green;';\n\nconsole.log(`%c说教无益，%c折断的 %c骨头%c才是更好的%c课本`,\n  largeRedText,\n  clearStyles,\n  largeGreenText,\n  clearStyles,\n  largeText + yellowText\n);\n```\n\n![](https://user-gold-cdn.xitu.io/2020/3/13/170d2ff74ed7e524?w=550&h=222&f=png&s=14589)\n\n#### console.warn\n`console.warn`的警告等级比log高点，有些插件库里会这么用：\n```\nconsole.warn('componentWillReceiveProps已经过时了，请及时迁移，我们将在下个版本移除')\n```\n\n![](https://user-gold-cdn.xitu.io/2020/3/13/170d30806a4d23ce?w=761&h=46&f=png&s=4907)\n\n#### console.error\n`console.error`级别最高，已经阻塞代码了，样式上也更加显眼：\n```\nconsole.error('Uncaught ReferenceError: girlFriend is not defined')\n```\n\n![](https://user-gold-cdn.xitu.io/2020/3/13/170d309a6b53f74a?w=574&h=46&f=png&s=3864)\n\n### 断言 assert\n`console.assert`和`console.error`有点接近，但是assert由判断条件来决定是否打印：\n```\nlet age = 17\nconsole.assert(age > 18, '未成年禁止观看')\n```\n\n![](https://user-gold-cdn.xitu.io/2020/3/13/170d31105f2b3dd9?w=475&h=57&f=png&s=3336)\n\n### 技术 count\n有时候想知道某个函数在某段时间内被调用了多少次，这时候可以使用`console.count`，很简单的语法：\n```\nconsole.count()\n// default: 1\nconsole.count()\n// default: 2\nconsole.count()\n// default: 3\n```\n也可以传入一个参数作为label，替换掉默认的default：\n```\nconsole.count('函数一被调用了')\n// 函数一被调用了: 1\nconsole.count('函数一被调用了')\n// 函数一被调用了: 2\nconsole.count('函数一被调用了')\n// 函数一被调用了: 3\n```\n另外`console.countReset()`可以重置计数，用的频率就更少了，可以忽略\n\n### 成组 group groupEnd\n```\n// 一般使用\nconsole.group()\nconsole.log('欢迎来到')\nconsole.log('德莱联盟')\nconsole.groupEnd()\n// 带标题\nconsole.group('德莱文')\nconsole.log('欢迎来到')\nconsole.log('德莱联盟')\nconsole.groupEnd()\n// 标题带样式\nconsole.group('%c德莱文', 'font-size: 20px;color: blue;')\nconsole.log('欢迎来到')\nconsole.log('德莱联盟')\nconsole.groupEnd()\n```\n\n![](https://user-gold-cdn.xitu.io/2020/3/13/170d329bc1367d3e?w=268&h=196&f=png&s=4808)\n\n### 表格模式 table\n`console.table`会将打印的数组或者对象以表格的形式展示：\n```\nlet name = ['英', '雄', '联', '盟']\nconsole.table(name)\n\nlet heroInfo = {\n    name: '小炮',\n    age: 13,\n    say: '我好想射点儿什么！'\n}\nconsole.table(heroInfo)\n```\n\n![](https://user-gold-cdn.xitu.io/2020/3/13/170d32feae83c20a?w=743&h=260&f=png&s=7485)\n打印出来的数据看起来还是很舒服的，数组的index是0,1,2...，对象的index是自己的keys。\n那么打印`对象数组`是什么展示方式呢：\n```\nlet heroList = [\n    {\n        name: '小炮',\n        age: 13,\n        say: '我好想射点儿什么！'\n    },\n    {\n        name: '金克丝',\n        age: 14,\n        say: '我是个疯子，有医生开的证明'\n    },\n    {\n        name: '卢锡安',\n        age: 15,\n        say: '人终有一死 而有些人则需要一点小小的帮助'\n    }\n]\nconsole.table(heroList)\n```\n\n![](https://user-gold-cdn.xitu.io/2020/3/13/170d33561ad66db9?w=828&h=110&f=png&s=6100)\n\n那么打印`嵌套的对象数组`是什么样子呢：\n```\nlet heroList = [\n    {\n        name: '小炮',\n        age: 13,\n        say: '我好想射点儿什么！',\n        friend: {\n            name: '锤石',\n            age: 10\n        }\n    },\n    {\n        name: '金克丝',\n        age: 14,\n        say: '我是个疯子，有医生开的证明',\n        friend: {\n            name: '光辉',\n            age: 11\n        }\n    },\n    {\n        name: '卢锡安',\n        age: 15,\n        say: '人终有一死 而有些人则需要一点小小的帮助',\n        friend: {\n            name: '琴女',\n            age: 12\n        }\n    }\n]\nconsole.table(heroList)\n```\n\n![](https://user-gold-cdn.xitu.io/2020/3/13/170d3393ce860831?w=825&h=123&f=png&s=6927)\n可以看到，friend字段折叠了，我使用的是Chrome浏览器，friend不能展开\n\n### 计时 time timeLog timeEnd\n通过计时器可以知道自己的代码运行多久的时间：\n```\nconsole.time('计时');\nfor(let i = 0; i < 10; i++) {\n    // 其他代码\n    console.timeLog('计时');\n}\nconsole.timeEnd('计时');\n```\n\n![](https://user-gold-cdn.xitu.io/2020/3/13/170d34245ed2e76f?w=224&h=226&f=png&s=7859)\n\n不同电脑配置，不同运行环境，打印出来的时间会稍有差别，这很正常\n\n### 其他控制台小技巧\n#### 调试 debugger\n有时候懒得打断点，可以试试`debugger`\n\n```\nfunction doSomething() {\n    debugger\n    console.log('英雄联盟不错')\n}\n// 调用\ndoSomething()\n```\n![](https://user-gold-cdn.xitu.io/2020/3/13/170d346a6889fafa?w=859&h=532&f=png&s=25536)\n\n#### 快速选中元素 $0, $1, $2, $3, $4\n怎么才能最快速地选中元素，其实也很简单，在浏览器的`Elements`面板中，鼠标最近点击的DOM元素就是$0，依次类推，还有$1, $2, $3, $4，以百度为例：\n\n![](https://user-gold-cdn.xitu.io/2020/3/13/170d34cceff3ab80?w=1316&h=655&f=png&s=85337)\n\n#### 另一种选中元素利器 `$`\n相信大家都使用过`Jquery`，在`Jquery`中使用`$`来选择元素，浏览器也实现了`$`选择器。还是以百度为例：\n\n![](https://user-gold-cdn.xitu.io/2020/3/13/170d353ea948f801?w=945&h=115&f=png&s=10240)\n\n\n总结\n最让我回味的功能是使用`%c`来写css样式，真是太惊艳了。好些网站都有自己的首页console，就像知乎那样。\n\n### 参考\n[css-tricks](https://css-tricks.com/a-guide-to-console-commands/)\n\n[MDN console 文档](https://developer.mozilla.org/en-US/docs/Web/API/console)\n","source":"_posts/console.md","raw":"---\ntitle: console完全指北\ndate: 2020-03-13 18:14:11\ntags: Javascript\n---\n\n一直以来，作为前端工程师，调试bug的时候，用的最多的就是`console.log`，我是中枪了，哈哈。其实，console还有很多不为人知的功能和一些新奇的玩法。比如下图是知乎的控制台打印内容：\n\n![](https://user-gold-cdn.xitu.io/2020/3/13/170d2224b0ff2ad0?w=942&h=352&f=png&s=17190)\n\n逼格一下子就上来了，有没有？\n\n\n### 开始之前，看清对象\n不要误会，这里的对象不是你的女朋友哦，在开始学习console之前，我们打印下console本身，看看它到底长什么样\n```\nconsole.log(console)\n```\n\n![](https://user-gold-cdn.xitu.io/2020/3/13/170d229aef30615e?w=527&h=494&f=png&s=24360)\n\n大概长这样，一个庞然大物，不要担心，接下来，我们来解剖下对象\n\n### 第一个命令：清空\n我们习惯了在调试之前清空下控制台，保持整洁。常见的做法就是点击控制台提供的清空按钮。在这：\n\n![](https://user-gold-cdn.xitu.io/2020/3/13/170d22d6c2b8904e?w=787&h=337&f=png&s=17740)\n\n同时，我们可以调用console对象的clear方法达到同样的效果：\n\n```\nconsole.clear()\n```\n执行后提示`console was cleared`，就代表清空啦\n\n![](https://user-gold-cdn.xitu.io/2020/3/13/170d22f857cfce9f?w=360&h=146&f=png&s=3216)\n\n### 高频指令\n有几个使用频率非常高的指令：\n```\nconsole.log()\nconsle.warn()\nconsole.error()\n```\n#### console.log\n`conosle.log`是我们最常用的指令，没有之一，我以前一直以为控制台只有这么一个功能，哈哈。\n##### 单参数\n```\n// 1.字符串\nconsole.log('在别的游戏里，像我这么帅的一般都是主角哦！')\n// 2.数字\nconsole.log(100)\n// 3.对象\nconsole.log({object: '对象'})\n// 4.数组\nconsole.log(['array', '数组'])\n```\n\n![](https://user-gold-cdn.xitu.io/2020/3/13/170d239aa20bf1be?w=429&h=213&f=png&s=8920)\n\n##### 多参数\n`console.log()`可以接受多个参数：\n```\nconsole.log('Noxians… I hate those guys', '在别的游戏里，像我这么帅的一般都是主角哦！')\nconsole.log(100, 200)\nconsole.log({object: '对象1'}, {object: '对象2'})\nconsole.log(['array', '数组1'], ['array', '数组2'])\n```\n\n![](https://user-gold-cdn.xitu.io/2020/3/13/170d23db82f33079?w=598&h=150&f=png&s=11342)\n\n##### 替换模式\n`console.log`支持字符串替换模式：\n```\nconsole.log('%s很生气，后果很严重！', '俺')\nconsole.log('是的，只要%i，就能让你爽到不能呼吸', 998)\nconsole.log('这是你的对象: %o', {object: '对象'})\n```\n\n![](https://user-gold-cdn.xitu.io/2020/3/13/170d2447bd55c902?w=436&h=114&f=png&s=6887)\n\n##### 样式\n可以为打印出来的文字应用`css`样式，这个功能着实厉害，玩得好可以大秀逼格，先看个简单的例子：\n```\nconsole.log('%c我还以为你从来都不会选我呢', 'color: red; font-size: 30px')\n```\n\n![](https://user-gold-cdn.xitu.io/2020/3/13/170d2ecc9c97210a?w=538&h=67&f=png&s=9100)\n\n还可以配置多处的样式：\n```\nconsole.log('你们知道最强的%c武器%c是什么？没错，就是%c补丁', 'color: blue;', '', 'color: yellow;font-size: 30px')\n```\n\n![](https://user-gold-cdn.xitu.io/2020/3/13/170d2f02b6b228c0?w=805&h=68&f=png&s=5472)\n是不是很香！但是这也有个小问题，样式越写越多，阅读起来很麻烦，接下来看下更高级的用法：\n```\nconsole.log('%c大部分人都会打飞机，这对飞机来说很不公平！', `\n  background: white;\n  border: 3px solid red;\n  border-radius: 10px;\n  color: red;\n  font-size: 50px;\n  margin: 40px;\n  padding: 20px;\n  box-shadow: 0 2px 3px 0 rgba(0,0,0,.05);\n`);\n```\n\n\n![](https://user-gold-cdn.xitu.io/2020/3/13/170d2f7990302658?w=1265&h=344&f=png&s=27500)\n\n这个高级用法惊艳到你了吗？发挥你的想象力，可以打印出各种骚东西的！\n\n这种行内样式写起来可能有点冗长，我们还可以使用变量来维护样式：\n```\nconst clearStyles = '';\nconst largeText = 'font-size: 20px;';\nconst yellowText = 'color: yellow;';\nconst largeRedText = 'font-size: 20px; color: red;';\nconst largeGreenText = 'font-size: 20px; color: green;';\n\nconsole.log(`%c说教无益，%c折断的 %c骨头%c才是更好的%c课本`,\n  largeRedText,\n  clearStyles,\n  largeGreenText,\n  clearStyles,\n  largeText + yellowText\n);\n```\n\n![](https://user-gold-cdn.xitu.io/2020/3/13/170d2ff74ed7e524?w=550&h=222&f=png&s=14589)\n\n#### console.warn\n`console.warn`的警告等级比log高点，有些插件库里会这么用：\n```\nconsole.warn('componentWillReceiveProps已经过时了，请及时迁移，我们将在下个版本移除')\n```\n\n![](https://user-gold-cdn.xitu.io/2020/3/13/170d30806a4d23ce?w=761&h=46&f=png&s=4907)\n\n#### console.error\n`console.error`级别最高，已经阻塞代码了，样式上也更加显眼：\n```\nconsole.error('Uncaught ReferenceError: girlFriend is not defined')\n```\n\n![](https://user-gold-cdn.xitu.io/2020/3/13/170d309a6b53f74a?w=574&h=46&f=png&s=3864)\n\n### 断言 assert\n`console.assert`和`console.error`有点接近，但是assert由判断条件来决定是否打印：\n```\nlet age = 17\nconsole.assert(age > 18, '未成年禁止观看')\n```\n\n![](https://user-gold-cdn.xitu.io/2020/3/13/170d31105f2b3dd9?w=475&h=57&f=png&s=3336)\n\n### 技术 count\n有时候想知道某个函数在某段时间内被调用了多少次，这时候可以使用`console.count`，很简单的语法：\n```\nconsole.count()\n// default: 1\nconsole.count()\n// default: 2\nconsole.count()\n// default: 3\n```\n也可以传入一个参数作为label，替换掉默认的default：\n```\nconsole.count('函数一被调用了')\n// 函数一被调用了: 1\nconsole.count('函数一被调用了')\n// 函数一被调用了: 2\nconsole.count('函数一被调用了')\n// 函数一被调用了: 3\n```\n另外`console.countReset()`可以重置计数，用的频率就更少了，可以忽略\n\n### 成组 group groupEnd\n```\n// 一般使用\nconsole.group()\nconsole.log('欢迎来到')\nconsole.log('德莱联盟')\nconsole.groupEnd()\n// 带标题\nconsole.group('德莱文')\nconsole.log('欢迎来到')\nconsole.log('德莱联盟')\nconsole.groupEnd()\n// 标题带样式\nconsole.group('%c德莱文', 'font-size: 20px;color: blue;')\nconsole.log('欢迎来到')\nconsole.log('德莱联盟')\nconsole.groupEnd()\n```\n\n![](https://user-gold-cdn.xitu.io/2020/3/13/170d329bc1367d3e?w=268&h=196&f=png&s=4808)\n\n### 表格模式 table\n`console.table`会将打印的数组或者对象以表格的形式展示：\n```\nlet name = ['英', '雄', '联', '盟']\nconsole.table(name)\n\nlet heroInfo = {\n    name: '小炮',\n    age: 13,\n    say: '我好想射点儿什么！'\n}\nconsole.table(heroInfo)\n```\n\n![](https://user-gold-cdn.xitu.io/2020/3/13/170d32feae83c20a?w=743&h=260&f=png&s=7485)\n打印出来的数据看起来还是很舒服的，数组的index是0,1,2...，对象的index是自己的keys。\n那么打印`对象数组`是什么展示方式呢：\n```\nlet heroList = [\n    {\n        name: '小炮',\n        age: 13,\n        say: '我好想射点儿什么！'\n    },\n    {\n        name: '金克丝',\n        age: 14,\n        say: '我是个疯子，有医生开的证明'\n    },\n    {\n        name: '卢锡安',\n        age: 15,\n        say: '人终有一死 而有些人则需要一点小小的帮助'\n    }\n]\nconsole.table(heroList)\n```\n\n![](https://user-gold-cdn.xitu.io/2020/3/13/170d33561ad66db9?w=828&h=110&f=png&s=6100)\n\n那么打印`嵌套的对象数组`是什么样子呢：\n```\nlet heroList = [\n    {\n        name: '小炮',\n        age: 13,\n        say: '我好想射点儿什么！',\n        friend: {\n            name: '锤石',\n            age: 10\n        }\n    },\n    {\n        name: '金克丝',\n        age: 14,\n        say: '我是个疯子，有医生开的证明',\n        friend: {\n            name: '光辉',\n            age: 11\n        }\n    },\n    {\n        name: '卢锡安',\n        age: 15,\n        say: '人终有一死 而有些人则需要一点小小的帮助',\n        friend: {\n            name: '琴女',\n            age: 12\n        }\n    }\n]\nconsole.table(heroList)\n```\n\n![](https://user-gold-cdn.xitu.io/2020/3/13/170d3393ce860831?w=825&h=123&f=png&s=6927)\n可以看到，friend字段折叠了，我使用的是Chrome浏览器，friend不能展开\n\n### 计时 time timeLog timeEnd\n通过计时器可以知道自己的代码运行多久的时间：\n```\nconsole.time('计时');\nfor(let i = 0; i < 10; i++) {\n    // 其他代码\n    console.timeLog('计时');\n}\nconsole.timeEnd('计时');\n```\n\n![](https://user-gold-cdn.xitu.io/2020/3/13/170d34245ed2e76f?w=224&h=226&f=png&s=7859)\n\n不同电脑配置，不同运行环境，打印出来的时间会稍有差别，这很正常\n\n### 其他控制台小技巧\n#### 调试 debugger\n有时候懒得打断点，可以试试`debugger`\n\n```\nfunction doSomething() {\n    debugger\n    console.log('英雄联盟不错')\n}\n// 调用\ndoSomething()\n```\n![](https://user-gold-cdn.xitu.io/2020/3/13/170d346a6889fafa?w=859&h=532&f=png&s=25536)\n\n#### 快速选中元素 $0, $1, $2, $3, $4\n怎么才能最快速地选中元素，其实也很简单，在浏览器的`Elements`面板中，鼠标最近点击的DOM元素就是$0，依次类推，还有$1, $2, $3, $4，以百度为例：\n\n![](https://user-gold-cdn.xitu.io/2020/3/13/170d34cceff3ab80?w=1316&h=655&f=png&s=85337)\n\n#### 另一种选中元素利器 `$`\n相信大家都使用过`Jquery`，在`Jquery`中使用`$`来选择元素，浏览器也实现了`$`选择器。还是以百度为例：\n\n![](https://user-gold-cdn.xitu.io/2020/3/13/170d353ea948f801?w=945&h=115&f=png&s=10240)\n\n\n总结\n最让我回味的功能是使用`%c`来写css样式，真是太惊艳了。好些网站都有自己的首页console，就像知乎那样。\n\n### 参考\n[css-tricks](https://css-tricks.com/a-guide-to-console-commands/)\n\n[MDN console 文档](https://developer.mozilla.org/en-US/docs/Web/API/console)\n","slug":"console","published":1,"updated":"2020-03-13T10:14:46.211Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7q4ux67001e4wnurk5ixuqr","content":"<p>一直以来，作为前端工程师，调试bug的时候，用的最多的就是<code>console.log</code>，我是中枪了，哈哈。其实，console还有很多不为人知的功能和一些新奇的玩法。比如下图是知乎的控制台打印内容：</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/3/13/170d2224b0ff2ad0?w=942&amp;h=352&amp;f=png&amp;s=17190\" alt></p>\n<p>逼格一下子就上来了，有没有？</p>\n<h3 id=\"开始之前，看清对象\"><a href=\"#开始之前，看清对象\" class=\"headerlink\" title=\"开始之前，看清对象\"></a>开始之前，看清对象</h3><p>不要误会，这里的对象不是你的女朋友哦，在开始学习console之前，我们打印下console本身，看看它到底长什么样<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(console)</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/3/13/170d229aef30615e?w=527&amp;h=494&amp;f=png&amp;s=24360\" alt></p>\n<p>大概长这样，一个庞然大物，不要担心，接下来，我们来解剖下对象</p>\n<h3 id=\"第一个命令：清空\"><a href=\"#第一个命令：清空\" class=\"headerlink\" title=\"第一个命令：清空\"></a>第一个命令：清空</h3><p>我们习惯了在调试之前清空下控制台，保持整洁。常见的做法就是点击控制台提供的清空按钮。在这：</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/3/13/170d22d6c2b8904e?w=787&amp;h=337&amp;f=png&amp;s=17740\" alt></p>\n<p>同时，我们可以调用console对象的clear方法达到同样的效果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.clear()</span><br></pre></td></tr></table></figure>\n<p>执行后提示<code>console was cleared</code>，就代表清空啦</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/3/13/170d22f857cfce9f?w=360&amp;h=146&amp;f=png&amp;s=3216\" alt></p>\n<h3 id=\"高频指令\"><a href=\"#高频指令\" class=\"headerlink\" title=\"高频指令\"></a>高频指令</h3><p>有几个使用频率非常高的指令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log()</span><br><span class=\"line\">consle.warn()</span><br><span class=\"line\">console.error()</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"console-log\"><a href=\"#console-log\" class=\"headerlink\" title=\"console.log\"></a>console.log</h4><p><code>conosle.log</code>是我们最常用的指令，没有之一，我以前一直以为控制台只有这么一个功能，哈哈。</p>\n<h5 id=\"单参数\"><a href=\"#单参数\" class=\"headerlink\" title=\"单参数\"></a>单参数</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 1.字符串</span><br><span class=\"line\">console.log(&apos;在别的游戏里，像我这么帅的一般都是主角哦！&apos;)</span><br><span class=\"line\">// 2.数字</span><br><span class=\"line\">console.log(100)</span><br><span class=\"line\">// 3.对象</span><br><span class=\"line\">console.log(&#123;object: &apos;对象&apos;&#125;)</span><br><span class=\"line\">// 4.数组</span><br><span class=\"line\">console.log([&apos;array&apos;, &apos;数组&apos;])</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/3/13/170d239aa20bf1be?w=429&amp;h=213&amp;f=png&amp;s=8920\" alt></p>\n<h5 id=\"多参数\"><a href=\"#多参数\" class=\"headerlink\" title=\"多参数\"></a>多参数</h5><p><code>console.log()</code>可以接受多个参数：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(&apos;Noxians… I hate those guys&apos;, &apos;在别的游戏里，像我这么帅的一般都是主角哦！&apos;)</span><br><span class=\"line\">console.log(100, 200)</span><br><span class=\"line\">console.log(&#123;object: &apos;对象1&apos;&#125;, &#123;object: &apos;对象2&apos;&#125;)</span><br><span class=\"line\">console.log([&apos;array&apos;, &apos;数组1&apos;], [&apos;array&apos;, &apos;数组2&apos;])</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/3/13/170d23db82f33079?w=598&amp;h=150&amp;f=png&amp;s=11342\" alt></p>\n<h5 id=\"替换模式\"><a href=\"#替换模式\" class=\"headerlink\" title=\"替换模式\"></a>替换模式</h5><p><code>console.log</code>支持字符串替换模式：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(&apos;%s很生气，后果很严重！&apos;, &apos;俺&apos;)</span><br><span class=\"line\">console.log(&apos;是的，只要%i，就能让你爽到不能呼吸&apos;, 998)</span><br><span class=\"line\">console.log(&apos;这是你的对象: %o&apos;, &#123;object: &apos;对象&apos;&#125;)</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/3/13/170d2447bd55c902?w=436&amp;h=114&amp;f=png&amp;s=6887\" alt></p>\n<h5 id=\"样式\"><a href=\"#样式\" class=\"headerlink\" title=\"样式\"></a>样式</h5><p>可以为打印出来的文字应用<code>css</code>样式，这个功能着实厉害，玩得好可以大秀逼格，先看个简单的例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(&apos;%c我还以为你从来都不会选我呢&apos;, &apos;color: red; font-size: 30px&apos;)</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/3/13/170d2ecc9c97210a?w=538&amp;h=67&amp;f=png&amp;s=9100\" alt></p>\n<p>还可以配置多处的样式：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(&apos;你们知道最强的%c武器%c是什么？没错，就是%c补丁&apos;, &apos;color: blue;&apos;, &apos;&apos;, &apos;color: yellow;font-size: 30px&apos;)</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/3/13/170d2f02b6b228c0?w=805&amp;h=68&amp;f=png&amp;s=5472\" alt><br>是不是很香！但是这也有个小问题，样式越写越多，阅读起来很麻烦，接下来看下更高级的用法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(&apos;%c大部分人都会打飞机，这对飞机来说很不公平！&apos;, `</span><br><span class=\"line\">  background: white;</span><br><span class=\"line\">  border: 3px solid red;</span><br><span class=\"line\">  border-radius: 10px;</span><br><span class=\"line\">  color: red;</span><br><span class=\"line\">  font-size: 50px;</span><br><span class=\"line\">  margin: 40px;</span><br><span class=\"line\">  padding: 20px;</span><br><span class=\"line\">  box-shadow: 0 2px 3px 0 rgba(0,0,0,.05);</span><br><span class=\"line\">`);</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/3/13/170d2f7990302658?w=1265&amp;h=344&amp;f=png&amp;s=27500\" alt></p>\n<p>这个高级用法惊艳到你了吗？发挥你的想象力，可以打印出各种骚东西的！</p>\n<p>这种行内样式写起来可能有点冗长，我们还可以使用变量来维护样式：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const clearStyles = &apos;&apos;;</span><br><span class=\"line\">const largeText = &apos;font-size: 20px;&apos;;</span><br><span class=\"line\">const yellowText = &apos;color: yellow;&apos;;</span><br><span class=\"line\">const largeRedText = &apos;font-size: 20px; color: red;&apos;;</span><br><span class=\"line\">const largeGreenText = &apos;font-size: 20px; color: green;&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(`%c说教无益，%c折断的 %c骨头%c才是更好的%c课本`,</span><br><span class=\"line\">  largeRedText,</span><br><span class=\"line\">  clearStyles,</span><br><span class=\"line\">  largeGreenText,</span><br><span class=\"line\">  clearStyles,</span><br><span class=\"line\">  largeText + yellowText</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/3/13/170d2ff74ed7e524?w=550&amp;h=222&amp;f=png&amp;s=14589\" alt></p>\n<h4 id=\"console-warn\"><a href=\"#console-warn\" class=\"headerlink\" title=\"console.warn\"></a>console.warn</h4><p><code>console.warn</code>的警告等级比log高点，有些插件库里会这么用：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.warn(&apos;componentWillReceiveProps已经过时了，请及时迁移，我们将在下个版本移除&apos;)</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/3/13/170d30806a4d23ce?w=761&amp;h=46&amp;f=png&amp;s=4907\" alt></p>\n<h4 id=\"console-error\"><a href=\"#console-error\" class=\"headerlink\" title=\"console.error\"></a>console.error</h4><p><code>console.error</code>级别最高，已经阻塞代码了，样式上也更加显眼：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.error(&apos;Uncaught ReferenceError: girlFriend is not defined&apos;)</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/3/13/170d309a6b53f74a?w=574&amp;h=46&amp;f=png&amp;s=3864\" alt></p>\n<h3 id=\"断言-assert\"><a href=\"#断言-assert\" class=\"headerlink\" title=\"断言 assert\"></a>断言 assert</h3><p><code>console.assert</code>和<code>console.error</code>有点接近，但是assert由判断条件来决定是否打印：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let age = 17</span><br><span class=\"line\">console.assert(age &gt; 18, &apos;未成年禁止观看&apos;)</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/3/13/170d31105f2b3dd9?w=475&amp;h=57&amp;f=png&amp;s=3336\" alt></p>\n<h3 id=\"技术-count\"><a href=\"#技术-count\" class=\"headerlink\" title=\"技术 count\"></a>技术 count</h3><p>有时候想知道某个函数在某段时间内被调用了多少次，这时候可以使用<code>console.count</code>，很简单的语法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.count()</span><br><span class=\"line\">// default: 1</span><br><span class=\"line\">console.count()</span><br><span class=\"line\">// default: 2</span><br><span class=\"line\">console.count()</span><br><span class=\"line\">// default: 3</span><br></pre></td></tr></table></figure></p>\n<p>也可以传入一个参数作为label，替换掉默认的default：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.count(&apos;函数一被调用了&apos;)</span><br><span class=\"line\">// 函数一被调用了: 1</span><br><span class=\"line\">console.count(&apos;函数一被调用了&apos;)</span><br><span class=\"line\">// 函数一被调用了: 2</span><br><span class=\"line\">console.count(&apos;函数一被调用了&apos;)</span><br><span class=\"line\">// 函数一被调用了: 3</span><br></pre></td></tr></table></figure></p>\n<p>另外<code>console.countReset()</code>可以重置计数，用的频率就更少了，可以忽略</p>\n<h3 id=\"成组-group-groupEnd\"><a href=\"#成组-group-groupEnd\" class=\"headerlink\" title=\"成组 group groupEnd\"></a>成组 group groupEnd</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 一般使用</span><br><span class=\"line\">console.group()</span><br><span class=\"line\">console.log(&apos;欢迎来到&apos;)</span><br><span class=\"line\">console.log(&apos;德莱联盟&apos;)</span><br><span class=\"line\">console.groupEnd()</span><br><span class=\"line\">// 带标题</span><br><span class=\"line\">console.group(&apos;德莱文&apos;)</span><br><span class=\"line\">console.log(&apos;欢迎来到&apos;)</span><br><span class=\"line\">console.log(&apos;德莱联盟&apos;)</span><br><span class=\"line\">console.groupEnd()</span><br><span class=\"line\">// 标题带样式</span><br><span class=\"line\">console.group(&apos;%c德莱文&apos;, &apos;font-size: 20px;color: blue;&apos;)</span><br><span class=\"line\">console.log(&apos;欢迎来到&apos;)</span><br><span class=\"line\">console.log(&apos;德莱联盟&apos;)</span><br><span class=\"line\">console.groupEnd()</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/3/13/170d329bc1367d3e?w=268&amp;h=196&amp;f=png&amp;s=4808\" alt></p>\n<h3 id=\"表格模式-table\"><a href=\"#表格模式-table\" class=\"headerlink\" title=\"表格模式 table\"></a>表格模式 table</h3><p><code>console.table</code>会将打印的数组或者对象以表格的形式展示：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let name = [&apos;英&apos;, &apos;雄&apos;, &apos;联&apos;, &apos;盟&apos;]</span><br><span class=\"line\">console.table(name)</span><br><span class=\"line\"></span><br><span class=\"line\">let heroInfo = &#123;</span><br><span class=\"line\">    name: &apos;小炮&apos;,</span><br><span class=\"line\">    age: 13,</span><br><span class=\"line\">    say: &apos;我好想射点儿什么！&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.table(heroInfo)</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/3/13/170d32feae83c20a?w=743&amp;h=260&amp;f=png&amp;s=7485\" alt><br>打印出来的数据看起来还是很舒服的，数组的index是0,1,2…，对象的index是自己的keys。<br>那么打印<code>对象数组</code>是什么展示方式呢：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let heroList = [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        name: &apos;小炮&apos;,</span><br><span class=\"line\">        age: 13,</span><br><span class=\"line\">        say: &apos;我好想射点儿什么！&apos;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        name: &apos;金克丝&apos;,</span><br><span class=\"line\">        age: 14,</span><br><span class=\"line\">        say: &apos;我是个疯子，有医生开的证明&apos;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        name: &apos;卢锡安&apos;,</span><br><span class=\"line\">        age: 15,</span><br><span class=\"line\">        say: &apos;人终有一死 而有些人则需要一点小小的帮助&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\">console.table(heroList)</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/3/13/170d33561ad66db9?w=828&amp;h=110&amp;f=png&amp;s=6100\" alt></p>\n<p>那么打印<code>嵌套的对象数组</code>是什么样子呢：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let heroList = [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        name: &apos;小炮&apos;,</span><br><span class=\"line\">        age: 13,</span><br><span class=\"line\">        say: &apos;我好想射点儿什么！&apos;,</span><br><span class=\"line\">        friend: &#123;</span><br><span class=\"line\">            name: &apos;锤石&apos;,</span><br><span class=\"line\">            age: 10</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        name: &apos;金克丝&apos;,</span><br><span class=\"line\">        age: 14,</span><br><span class=\"line\">        say: &apos;我是个疯子，有医生开的证明&apos;,</span><br><span class=\"line\">        friend: &#123;</span><br><span class=\"line\">            name: &apos;光辉&apos;,</span><br><span class=\"line\">            age: 11</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        name: &apos;卢锡安&apos;,</span><br><span class=\"line\">        age: 15,</span><br><span class=\"line\">        say: &apos;人终有一死 而有些人则需要一点小小的帮助&apos;,</span><br><span class=\"line\">        friend: &#123;</span><br><span class=\"line\">            name: &apos;琴女&apos;,</span><br><span class=\"line\">            age: 12</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\">console.table(heroList)</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/3/13/170d3393ce860831?w=825&amp;h=123&amp;f=png&amp;s=6927\" alt><br>可以看到，friend字段折叠了，我使用的是Chrome浏览器，friend不能展开</p>\n<h3 id=\"计时-time-timeLog-timeEnd\"><a href=\"#计时-time-timeLog-timeEnd\" class=\"headerlink\" title=\"计时 time timeLog timeEnd\"></a>计时 time timeLog timeEnd</h3><p>通过计时器可以知道自己的代码运行多久的时间：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.time(&apos;计时&apos;);</span><br><span class=\"line\">for(let i = 0; i &lt; 10; i++) &#123;</span><br><span class=\"line\">    // 其他代码</span><br><span class=\"line\">    console.timeLog(&apos;计时&apos;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.timeEnd(&apos;计时&apos;);</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/3/13/170d34245ed2e76f?w=224&amp;h=226&amp;f=png&amp;s=7859\" alt></p>\n<p>不同电脑配置，不同运行环境，打印出来的时间会稍有差别，这很正常</p>\n<h3 id=\"其他控制台小技巧\"><a href=\"#其他控制台小技巧\" class=\"headerlink\" title=\"其他控制台小技巧\"></a>其他控制台小技巧</h3><h4 id=\"调试-debugger\"><a href=\"#调试-debugger\" class=\"headerlink\" title=\"调试 debugger\"></a>调试 debugger</h4><p>有时候懒得打断点，可以试试<code>debugger</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function doSomething() &#123;</span><br><span class=\"line\">    debugger</span><br><span class=\"line\">    console.log(&apos;英雄联盟不错&apos;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 调用</span><br><span class=\"line\">doSomething()</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/3/13/170d346a6889fafa?w=859&amp;h=532&amp;f=png&amp;s=25536\" alt></p>\n<h4 id=\"快速选中元素-0-1-2-3-4\"><a href=\"#快速选中元素-0-1-2-3-4\" class=\"headerlink\" title=\"快速选中元素 $0, $1, $2, $3, $4\"></a>快速选中元素 $0, $1, $2, $3, $4</h4><p>怎么才能最快速地选中元素，其实也很简单，在浏览器的<code>Elements</code>面板中，鼠标最近点击的DOM元素就是$0，依次类推，还有$1, $2, $3, $4，以百度为例：</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/3/13/170d34cceff3ab80?w=1316&amp;h=655&amp;f=png&amp;s=85337\" alt></p>\n<h4 id=\"另一种选中元素利器\"><a href=\"#另一种选中元素利器\" class=\"headerlink\" title=\"另一种选中元素利器 $\"></a>另一种选中元素利器 <code>$</code></h4><p>相信大家都使用过<code>Jquery</code>，在<code>Jquery</code>中使用<code>$</code>来选择元素，浏览器也实现了<code>$</code>选择器。还是以百度为例：</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/3/13/170d353ea948f801?w=945&amp;h=115&amp;f=png&amp;s=10240\" alt></p>\n<p>总结<br>最让我回味的功能是使用<code>%c</code>来写css样式，真是太惊艳了。好些网站都有自己的首页console，就像知乎那样。</p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"https://css-tricks.com/a-guide-to-console-commands/\" target=\"_blank\" rel=\"noopener\">css-tricks</a></p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/console\" target=\"_blank\" rel=\"noopener\">MDN console 文档</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>一直以来，作为前端工程师，调试bug的时候，用的最多的就是<code>console.log</code>，我是中枪了，哈哈。其实，console还有很多不为人知的功能和一些新奇的玩法。比如下图是知乎的控制台打印内容：</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/3/13/170d2224b0ff2ad0?w=942&amp;h=352&amp;f=png&amp;s=17190\" alt></p>\n<p>逼格一下子就上来了，有没有？</p>\n<h3 id=\"开始之前，看清对象\"><a href=\"#开始之前，看清对象\" class=\"headerlink\" title=\"开始之前，看清对象\"></a>开始之前，看清对象</h3><p>不要误会，这里的对象不是你的女朋友哦，在开始学习console之前，我们打印下console本身，看看它到底长什么样<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(console)</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/3/13/170d229aef30615e?w=527&amp;h=494&amp;f=png&amp;s=24360\" alt></p>\n<p>大概长这样，一个庞然大物，不要担心，接下来，我们来解剖下对象</p>\n<h3 id=\"第一个命令：清空\"><a href=\"#第一个命令：清空\" class=\"headerlink\" title=\"第一个命令：清空\"></a>第一个命令：清空</h3><p>我们习惯了在调试之前清空下控制台，保持整洁。常见的做法就是点击控制台提供的清空按钮。在这：</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/3/13/170d22d6c2b8904e?w=787&amp;h=337&amp;f=png&amp;s=17740\" alt></p>\n<p>同时，我们可以调用console对象的clear方法达到同样的效果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.clear()</span><br></pre></td></tr></table></figure>\n<p>执行后提示<code>console was cleared</code>，就代表清空啦</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/3/13/170d22f857cfce9f?w=360&amp;h=146&amp;f=png&amp;s=3216\" alt></p>\n<h3 id=\"高频指令\"><a href=\"#高频指令\" class=\"headerlink\" title=\"高频指令\"></a>高频指令</h3><p>有几个使用频率非常高的指令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log()</span><br><span class=\"line\">consle.warn()</span><br><span class=\"line\">console.error()</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"console-log\"><a href=\"#console-log\" class=\"headerlink\" title=\"console.log\"></a>console.log</h4><p><code>conosle.log</code>是我们最常用的指令，没有之一，我以前一直以为控制台只有这么一个功能，哈哈。</p>\n<h5 id=\"单参数\"><a href=\"#单参数\" class=\"headerlink\" title=\"单参数\"></a>单参数</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 1.字符串</span><br><span class=\"line\">console.log(&apos;在别的游戏里，像我这么帅的一般都是主角哦！&apos;)</span><br><span class=\"line\">// 2.数字</span><br><span class=\"line\">console.log(100)</span><br><span class=\"line\">// 3.对象</span><br><span class=\"line\">console.log(&#123;object: &apos;对象&apos;&#125;)</span><br><span class=\"line\">// 4.数组</span><br><span class=\"line\">console.log([&apos;array&apos;, &apos;数组&apos;])</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/3/13/170d239aa20bf1be?w=429&amp;h=213&amp;f=png&amp;s=8920\" alt></p>\n<h5 id=\"多参数\"><a href=\"#多参数\" class=\"headerlink\" title=\"多参数\"></a>多参数</h5><p><code>console.log()</code>可以接受多个参数：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(&apos;Noxians… I hate those guys&apos;, &apos;在别的游戏里，像我这么帅的一般都是主角哦！&apos;)</span><br><span class=\"line\">console.log(100, 200)</span><br><span class=\"line\">console.log(&#123;object: &apos;对象1&apos;&#125;, &#123;object: &apos;对象2&apos;&#125;)</span><br><span class=\"line\">console.log([&apos;array&apos;, &apos;数组1&apos;], [&apos;array&apos;, &apos;数组2&apos;])</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/3/13/170d23db82f33079?w=598&amp;h=150&amp;f=png&amp;s=11342\" alt></p>\n<h5 id=\"替换模式\"><a href=\"#替换模式\" class=\"headerlink\" title=\"替换模式\"></a>替换模式</h5><p><code>console.log</code>支持字符串替换模式：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(&apos;%s很生气，后果很严重！&apos;, &apos;俺&apos;)</span><br><span class=\"line\">console.log(&apos;是的，只要%i，就能让你爽到不能呼吸&apos;, 998)</span><br><span class=\"line\">console.log(&apos;这是你的对象: %o&apos;, &#123;object: &apos;对象&apos;&#125;)</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/3/13/170d2447bd55c902?w=436&amp;h=114&amp;f=png&amp;s=6887\" alt></p>\n<h5 id=\"样式\"><a href=\"#样式\" class=\"headerlink\" title=\"样式\"></a>样式</h5><p>可以为打印出来的文字应用<code>css</code>样式，这个功能着实厉害，玩得好可以大秀逼格，先看个简单的例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(&apos;%c我还以为你从来都不会选我呢&apos;, &apos;color: red; font-size: 30px&apos;)</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/3/13/170d2ecc9c97210a?w=538&amp;h=67&amp;f=png&amp;s=9100\" alt></p>\n<p>还可以配置多处的样式：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(&apos;你们知道最强的%c武器%c是什么？没错，就是%c补丁&apos;, &apos;color: blue;&apos;, &apos;&apos;, &apos;color: yellow;font-size: 30px&apos;)</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/3/13/170d2f02b6b228c0?w=805&amp;h=68&amp;f=png&amp;s=5472\" alt><br>是不是很香！但是这也有个小问题，样式越写越多，阅读起来很麻烦，接下来看下更高级的用法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(&apos;%c大部分人都会打飞机，这对飞机来说很不公平！&apos;, `</span><br><span class=\"line\">  background: white;</span><br><span class=\"line\">  border: 3px solid red;</span><br><span class=\"line\">  border-radius: 10px;</span><br><span class=\"line\">  color: red;</span><br><span class=\"line\">  font-size: 50px;</span><br><span class=\"line\">  margin: 40px;</span><br><span class=\"line\">  padding: 20px;</span><br><span class=\"line\">  box-shadow: 0 2px 3px 0 rgba(0,0,0,.05);</span><br><span class=\"line\">`);</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/3/13/170d2f7990302658?w=1265&amp;h=344&amp;f=png&amp;s=27500\" alt></p>\n<p>这个高级用法惊艳到你了吗？发挥你的想象力，可以打印出各种骚东西的！</p>\n<p>这种行内样式写起来可能有点冗长，我们还可以使用变量来维护样式：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const clearStyles = &apos;&apos;;</span><br><span class=\"line\">const largeText = &apos;font-size: 20px;&apos;;</span><br><span class=\"line\">const yellowText = &apos;color: yellow;&apos;;</span><br><span class=\"line\">const largeRedText = &apos;font-size: 20px; color: red;&apos;;</span><br><span class=\"line\">const largeGreenText = &apos;font-size: 20px; color: green;&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(`%c说教无益，%c折断的 %c骨头%c才是更好的%c课本`,</span><br><span class=\"line\">  largeRedText,</span><br><span class=\"line\">  clearStyles,</span><br><span class=\"line\">  largeGreenText,</span><br><span class=\"line\">  clearStyles,</span><br><span class=\"line\">  largeText + yellowText</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/3/13/170d2ff74ed7e524?w=550&amp;h=222&amp;f=png&amp;s=14589\" alt></p>\n<h4 id=\"console-warn\"><a href=\"#console-warn\" class=\"headerlink\" title=\"console.warn\"></a>console.warn</h4><p><code>console.warn</code>的警告等级比log高点，有些插件库里会这么用：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.warn(&apos;componentWillReceiveProps已经过时了，请及时迁移，我们将在下个版本移除&apos;)</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/3/13/170d30806a4d23ce?w=761&amp;h=46&amp;f=png&amp;s=4907\" alt></p>\n<h4 id=\"console-error\"><a href=\"#console-error\" class=\"headerlink\" title=\"console.error\"></a>console.error</h4><p><code>console.error</code>级别最高，已经阻塞代码了，样式上也更加显眼：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.error(&apos;Uncaught ReferenceError: girlFriend is not defined&apos;)</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/3/13/170d309a6b53f74a?w=574&amp;h=46&amp;f=png&amp;s=3864\" alt></p>\n<h3 id=\"断言-assert\"><a href=\"#断言-assert\" class=\"headerlink\" title=\"断言 assert\"></a>断言 assert</h3><p><code>console.assert</code>和<code>console.error</code>有点接近，但是assert由判断条件来决定是否打印：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let age = 17</span><br><span class=\"line\">console.assert(age &gt; 18, &apos;未成年禁止观看&apos;)</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/3/13/170d31105f2b3dd9?w=475&amp;h=57&amp;f=png&amp;s=3336\" alt></p>\n<h3 id=\"技术-count\"><a href=\"#技术-count\" class=\"headerlink\" title=\"技术 count\"></a>技术 count</h3><p>有时候想知道某个函数在某段时间内被调用了多少次，这时候可以使用<code>console.count</code>，很简单的语法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.count()</span><br><span class=\"line\">// default: 1</span><br><span class=\"line\">console.count()</span><br><span class=\"line\">// default: 2</span><br><span class=\"line\">console.count()</span><br><span class=\"line\">// default: 3</span><br></pre></td></tr></table></figure></p>\n<p>也可以传入一个参数作为label，替换掉默认的default：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.count(&apos;函数一被调用了&apos;)</span><br><span class=\"line\">// 函数一被调用了: 1</span><br><span class=\"line\">console.count(&apos;函数一被调用了&apos;)</span><br><span class=\"line\">// 函数一被调用了: 2</span><br><span class=\"line\">console.count(&apos;函数一被调用了&apos;)</span><br><span class=\"line\">// 函数一被调用了: 3</span><br></pre></td></tr></table></figure></p>\n<p>另外<code>console.countReset()</code>可以重置计数，用的频率就更少了，可以忽略</p>\n<h3 id=\"成组-group-groupEnd\"><a href=\"#成组-group-groupEnd\" class=\"headerlink\" title=\"成组 group groupEnd\"></a>成组 group groupEnd</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 一般使用</span><br><span class=\"line\">console.group()</span><br><span class=\"line\">console.log(&apos;欢迎来到&apos;)</span><br><span class=\"line\">console.log(&apos;德莱联盟&apos;)</span><br><span class=\"line\">console.groupEnd()</span><br><span class=\"line\">// 带标题</span><br><span class=\"line\">console.group(&apos;德莱文&apos;)</span><br><span class=\"line\">console.log(&apos;欢迎来到&apos;)</span><br><span class=\"line\">console.log(&apos;德莱联盟&apos;)</span><br><span class=\"line\">console.groupEnd()</span><br><span class=\"line\">// 标题带样式</span><br><span class=\"line\">console.group(&apos;%c德莱文&apos;, &apos;font-size: 20px;color: blue;&apos;)</span><br><span class=\"line\">console.log(&apos;欢迎来到&apos;)</span><br><span class=\"line\">console.log(&apos;德莱联盟&apos;)</span><br><span class=\"line\">console.groupEnd()</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/3/13/170d329bc1367d3e?w=268&amp;h=196&amp;f=png&amp;s=4808\" alt></p>\n<h3 id=\"表格模式-table\"><a href=\"#表格模式-table\" class=\"headerlink\" title=\"表格模式 table\"></a>表格模式 table</h3><p><code>console.table</code>会将打印的数组或者对象以表格的形式展示：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let name = [&apos;英&apos;, &apos;雄&apos;, &apos;联&apos;, &apos;盟&apos;]</span><br><span class=\"line\">console.table(name)</span><br><span class=\"line\"></span><br><span class=\"line\">let heroInfo = &#123;</span><br><span class=\"line\">    name: &apos;小炮&apos;,</span><br><span class=\"line\">    age: 13,</span><br><span class=\"line\">    say: &apos;我好想射点儿什么！&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.table(heroInfo)</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/3/13/170d32feae83c20a?w=743&amp;h=260&amp;f=png&amp;s=7485\" alt><br>打印出来的数据看起来还是很舒服的，数组的index是0,1,2…，对象的index是自己的keys。<br>那么打印<code>对象数组</code>是什么展示方式呢：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let heroList = [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        name: &apos;小炮&apos;,</span><br><span class=\"line\">        age: 13,</span><br><span class=\"line\">        say: &apos;我好想射点儿什么！&apos;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        name: &apos;金克丝&apos;,</span><br><span class=\"line\">        age: 14,</span><br><span class=\"line\">        say: &apos;我是个疯子，有医生开的证明&apos;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        name: &apos;卢锡安&apos;,</span><br><span class=\"line\">        age: 15,</span><br><span class=\"line\">        say: &apos;人终有一死 而有些人则需要一点小小的帮助&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\">console.table(heroList)</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/3/13/170d33561ad66db9?w=828&amp;h=110&amp;f=png&amp;s=6100\" alt></p>\n<p>那么打印<code>嵌套的对象数组</code>是什么样子呢：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let heroList = [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        name: &apos;小炮&apos;,</span><br><span class=\"line\">        age: 13,</span><br><span class=\"line\">        say: &apos;我好想射点儿什么！&apos;,</span><br><span class=\"line\">        friend: &#123;</span><br><span class=\"line\">            name: &apos;锤石&apos;,</span><br><span class=\"line\">            age: 10</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        name: &apos;金克丝&apos;,</span><br><span class=\"line\">        age: 14,</span><br><span class=\"line\">        say: &apos;我是个疯子，有医生开的证明&apos;,</span><br><span class=\"line\">        friend: &#123;</span><br><span class=\"line\">            name: &apos;光辉&apos;,</span><br><span class=\"line\">            age: 11</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        name: &apos;卢锡安&apos;,</span><br><span class=\"line\">        age: 15,</span><br><span class=\"line\">        say: &apos;人终有一死 而有些人则需要一点小小的帮助&apos;,</span><br><span class=\"line\">        friend: &#123;</span><br><span class=\"line\">            name: &apos;琴女&apos;,</span><br><span class=\"line\">            age: 12</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\">console.table(heroList)</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/3/13/170d3393ce860831?w=825&amp;h=123&amp;f=png&amp;s=6927\" alt><br>可以看到，friend字段折叠了，我使用的是Chrome浏览器，friend不能展开</p>\n<h3 id=\"计时-time-timeLog-timeEnd\"><a href=\"#计时-time-timeLog-timeEnd\" class=\"headerlink\" title=\"计时 time timeLog timeEnd\"></a>计时 time timeLog timeEnd</h3><p>通过计时器可以知道自己的代码运行多久的时间：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.time(&apos;计时&apos;);</span><br><span class=\"line\">for(let i = 0; i &lt; 10; i++) &#123;</span><br><span class=\"line\">    // 其他代码</span><br><span class=\"line\">    console.timeLog(&apos;计时&apos;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.timeEnd(&apos;计时&apos;);</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/3/13/170d34245ed2e76f?w=224&amp;h=226&amp;f=png&amp;s=7859\" alt></p>\n<p>不同电脑配置，不同运行环境，打印出来的时间会稍有差别，这很正常</p>\n<h3 id=\"其他控制台小技巧\"><a href=\"#其他控制台小技巧\" class=\"headerlink\" title=\"其他控制台小技巧\"></a>其他控制台小技巧</h3><h4 id=\"调试-debugger\"><a href=\"#调试-debugger\" class=\"headerlink\" title=\"调试 debugger\"></a>调试 debugger</h4><p>有时候懒得打断点，可以试试<code>debugger</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function doSomething() &#123;</span><br><span class=\"line\">    debugger</span><br><span class=\"line\">    console.log(&apos;英雄联盟不错&apos;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 调用</span><br><span class=\"line\">doSomething()</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/3/13/170d346a6889fafa?w=859&amp;h=532&amp;f=png&amp;s=25536\" alt></p>\n<h4 id=\"快速选中元素-0-1-2-3-4\"><a href=\"#快速选中元素-0-1-2-3-4\" class=\"headerlink\" title=\"快速选中元素 $0, $1, $2, $3, $4\"></a>快速选中元素 $0, $1, $2, $3, $4</h4><p>怎么才能最快速地选中元素，其实也很简单，在浏览器的<code>Elements</code>面板中，鼠标最近点击的DOM元素就是$0，依次类推，还有$1, $2, $3, $4，以百度为例：</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/3/13/170d34cceff3ab80?w=1316&amp;h=655&amp;f=png&amp;s=85337\" alt></p>\n<h4 id=\"另一种选中元素利器\"><a href=\"#另一种选中元素利器\" class=\"headerlink\" title=\"另一种选中元素利器 $\"></a>另一种选中元素利器 <code>$</code></h4><p>相信大家都使用过<code>Jquery</code>，在<code>Jquery</code>中使用<code>$</code>来选择元素，浏览器也实现了<code>$</code>选择器。还是以百度为例：</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/3/13/170d353ea948f801?w=945&amp;h=115&amp;f=png&amp;s=10240\" alt></p>\n<p>总结<br>最让我回味的功能是使用<code>%c</code>来写css样式，真是太惊艳了。好些网站都有自己的首页console，就像知乎那样。</p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"https://css-tricks.com/a-guide-to-console-commands/\" target=\"_blank\" rel=\"noopener\">css-tricks</a></p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/console\" target=\"_blank\" rel=\"noopener\">MDN console 文档</a></p>\n"},{"title":"Flutter滚动动画","date":"2019-07-11T03:55:41.000Z","_content":"\n> 现在的Flutter正是如火中天，昨天Google官方正式发布了`Flutter1.7`版本，主要包含了对Android X的支持和Play Store的一些更新，一些新的和增强的组件，以及一些问题的修复。\n\n本篇文章我们一起开发一个炫炫的列表展示，伴随着滚动，背景做一些相应的动画效果。先看下效果图:\n<img src=\"http://qiniu.tbmao.com/blogscreenanimation1.gif\" width=\"300\" alt=\"screenanimation\" />\n\n### 思路\n列表滚动的时候，获取垂直方向的滚动距离，再将这个值转化成角度单位带动齿轮的滚动\n\n### 入口文件\nFlutter的项目都是从`lib/main.dart`开始：\n\n``` dart\nimport 'package:flutter/material.dart';\nimport 'demo-card.dart';\nimport 'items.dart';\nimport 'animated-bg.dart';\n\nvoid main() => runApp(AnimationDemo());\n\nclass AnimationDemo extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      debugShowCheckedModeBanner: false,\n      title: 'Flutter Demo',\n      theme: ThemeData(primarySwatch: Colors.blue),\n      home: MyHomePage(title: '列表滚动'),\n    );\n  }\n}\n\nclass MyHomePage extends StatefulWidget {\n  MyHomePage({Key key, this.title}) : super(key: key);\n  final String title;\n\n  @override\n  _MyHomePageState createState() => _MyHomePageState();\n}\n\nclass _MyHomePageState extends State<MyHomePage> {\n  ScrollController _controller = new ScrollController();\n\n  List<DemoCard> get _cards =>\n      items.map((Item _item) => DemoCard(_item)).toList();\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      backgroundColor: Colors.black,\n      appBar: AppBar(title: Text(widget.title)),\n      body: Stack(\n        alignment: AlignmentDirectional.topStart,\n        children: <Widget>[\n          AnimatedBackground(controller: _controller),\n          Center(\n            child: ListView(controller: _controller, children: _cards),\n          )\n        ],\n      ),\n    );\n  }\n}\n\n```\n在`main.dart`文件中，有几个import进来的文件：\n- `demo-card.dart` 卡片widget，列表就是循环的这个widget\n- `items.dart` 卡片展示的数据放在这个文件中，本项目我们写了点mock数据，真实生产项目的数据更多是从http请求\n- `animated-bg.dart` 背景齿轮的widget\n\n\n这个文件主要使用了一些Flutter的基础widget，有不清楚的同学可以去官网查下使用方法，\n另外，列表渲染的时候需要注意下，我们会使用`ScrollController _controller = new ScrollController();`从而获取垂直方向滚动的距离\n\n### 卡片的mock数据\n为了省事，我们直接将数据放在`lib/items.dart`里，我们模拟了六条数据，main.dart里的listView的children就是使用这六条数据生成的:\n\n``` dart\nimport 'package:flutter/material.dart';\n\nclass Item {\n  String name;\n  MaterialColor color;\n  IconData icon;\n  Item(this.name, this.color, this.icon);\n}\n\nList<Item> items = [\n  Item('壹', Colors.amber, Icons.adjust),\n  Item('贰', Colors.cyan, Icons.airport_shuttle),\n  Item('叁', Colors.indigo, Icons.android),\n  Item('肆', Colors.green, Icons.beach_access),\n  Item('伍', Colors.pink, Icons.attach_file),\n  Item('陸', Colors.blue, Icons.bug_report)\n];\n\n```\n三个字段：\n- name 卡片左边的名字\n- color 卡片的背景颜色\n- icon 卡片右边的图标\n\n### 卡片Widget\n我们在`main.dart`里这么生成列表的children：`items.map((Item _item) => DemoCard(_item)).toList();`对DemoCard传入参数_item，其实就是React或者Vue里面的props。不同之处在于，flutter传入的参数既可以是匿名的也可以是具名的，这里我们用的是匿名传参。看下卡片Widget怎么接收参数：\n``` dart\nimport 'package:flutter/material.dart';\nimport 'items.dart';\n\nclass DemoCard extends StatelessWidget {\n  DemoCard(this.item);\n  final Item item;\n\n  static final Shadow _shadow =\n      Shadow(offset: Offset(2.0, 2.0), color: Colors.black26);\n  final TextStyle _style = TextStyle(color: Colors.white70, shadows: [_shadow]);\n\n  @override\n  Widget build(BuildContext context) {\n    return Card(\n      elevation: 3,\n      shape: RoundedRectangleBorder(\n        side: BorderSide(width: 1, color: Colors.black26),\n        borderRadius: BorderRadius.circular(32),\n      ),\n      color: item.color.withOpacity(.7),\n      child: Container(\n        constraints: BoxConstraints.expand(height: 256),\n        child: RawMaterialButton(\n          onPressed: () {},\n          child: Column(\n            mainAxisAlignment: MainAxisAlignment.spaceAround,\n            crossAxisAlignment: CrossAxisAlignment.stretch,\n            children: <Widget>[\n              Row(\n                mainAxisAlignment: MainAxisAlignment.spaceAround,\n                children: <Widget>[\n                  Text(item.name, style: _style.copyWith(fontSize: 64)),\n                  Icon(item.icon, color: Colors.white70, size: 72),\n                ],\n              )\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}\n\n```\n定义了一个StatelessWidget，对应React或者Vue就是无状态组件，接收参数的方式是在构造器上声明，这种方式和ES6一致：\n```\nDemoCard(this.item);\nfinal Item item;\n```\n使用Card组件可以快速的还原一张卡片样式\n- `elevation`参数控制卡片悬浮高度\n- `shape`参数控制卡片圆角\n- `color`参数控制卡片背景，`item.color.withOpacity(.7)`让背景透明化30%\n\n然后就是使用Column和Row来控制布局的展示\n\n### 背景齿轮的转动\n先看下背景组件的源码，再一一解释：\n``` dart\nimport 'package:flutter/material.dart';\n\nclass AnimatedBackground extends StatefulWidget {\n  AnimatedBackground({Key key, this.controller}) : super(key: key);\n\n  final ScrollController controller;\n\n  @override\n  _AnimatedBackgroundState createState() => _AnimatedBackgroundState();\n}\n\nclass _AnimatedBackgroundState extends State<AnimatedBackground> {\n  get offset => widget.controller.hasClients ? widget.controller.offset : 0;\n\n  @override\n  Widget build(BuildContext context) {\n    return AnimatedBuilder(\n      animation: widget.controller,\n      builder: (BuildContext context, Widget child) {\n        return OverflowBox(\n          maxWidth: double.infinity,\n          alignment: Alignment(4, 3),\n          child: Transform.rotate(\n            angle: offset / -512,\n            child: Icon(Icons.settings, size: 512, color: Colors.white),\n          ),\n        );\n      },\n    );\n  }\n}\n\n```\n这个`controller`是在main.dart里传下来的，它是ListView的controller，我们用`widget.controller.offset`即可拿到垂直方向上的滚动距离。\n列表滚动时我们要不停的刷新齿轮的转动角度，所以我们选用`AnimatedBuilder`组件，组件有两个重要参数:\n- animation 将widget.controller传给animation\n- builder 每次animation改变时，都会重新执行渲染，这就实现了联动效果\n\nOverflowBox组件可以通过alignment(锚点)很好的控制子组件的显示位置，这里我们使用`Alignment(4, 3)`将齿轮定位到屏幕左下方。\n让齿轮真正动起来的是`Transform.rotate`组件，这里有个弧长公式要用到：L=α（弧度）× r(半径)，所以我们这么使用:`angle: offset / -512`\n- 为什么是512呢，因为我们的齿轮的`size: 512`\n- 为什么带有负号呢，这样我们就能实现列表向上滚动时齿轮逆时针转动，列表向下滚动时齿轮顺时针滚动\n\n### 用到的Widget\n篇幅有限，不能一一展开讲解使用到的组件，有问题的同学自行去官网查看用法哦\n- MaterialApp\n- Scaffold\n- AppBar\n- Stack\n- Center\n- ListView\n- Card\n- RawMaterialButton\n- Column\n- Row\n- AnimatedBuilder\n- OverflowBox\n- Transform\n- Icon\n\n### 相关链接\n本篇文章能学到Flutter很多知识，包括：StatelessWidget/StatefulWidget的创建、本地数据的创建和使用、列表的展示和控制、垂直水平布局等等，想看效果的同学可以直接跑源码哦\n- [源码地址](https://github.com/xch1029/scroll-animation)\n- [博客本文地址](https://jser.tech/2019/07/11/flutter-scroll-animation)\n- [掘金本文地址](https://juejin.im/post/5d26e4fff265da1b7c614326)\n\n","source":"_posts/flutter-scroll-animation.md","raw":"---\ntitle: Flutter滚动动画\ndate: 2019-07-11 11:55:41\ntags: flutter\n---\n\n> 现在的Flutter正是如火中天，昨天Google官方正式发布了`Flutter1.7`版本，主要包含了对Android X的支持和Play Store的一些更新，一些新的和增强的组件，以及一些问题的修复。\n\n本篇文章我们一起开发一个炫炫的列表展示，伴随着滚动，背景做一些相应的动画效果。先看下效果图:\n<img src=\"http://qiniu.tbmao.com/blogscreenanimation1.gif\" width=\"300\" alt=\"screenanimation\" />\n\n### 思路\n列表滚动的时候，获取垂直方向的滚动距离，再将这个值转化成角度单位带动齿轮的滚动\n\n### 入口文件\nFlutter的项目都是从`lib/main.dart`开始：\n\n``` dart\nimport 'package:flutter/material.dart';\nimport 'demo-card.dart';\nimport 'items.dart';\nimport 'animated-bg.dart';\n\nvoid main() => runApp(AnimationDemo());\n\nclass AnimationDemo extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      debugShowCheckedModeBanner: false,\n      title: 'Flutter Demo',\n      theme: ThemeData(primarySwatch: Colors.blue),\n      home: MyHomePage(title: '列表滚动'),\n    );\n  }\n}\n\nclass MyHomePage extends StatefulWidget {\n  MyHomePage({Key key, this.title}) : super(key: key);\n  final String title;\n\n  @override\n  _MyHomePageState createState() => _MyHomePageState();\n}\n\nclass _MyHomePageState extends State<MyHomePage> {\n  ScrollController _controller = new ScrollController();\n\n  List<DemoCard> get _cards =>\n      items.map((Item _item) => DemoCard(_item)).toList();\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      backgroundColor: Colors.black,\n      appBar: AppBar(title: Text(widget.title)),\n      body: Stack(\n        alignment: AlignmentDirectional.topStart,\n        children: <Widget>[\n          AnimatedBackground(controller: _controller),\n          Center(\n            child: ListView(controller: _controller, children: _cards),\n          )\n        ],\n      ),\n    );\n  }\n}\n\n```\n在`main.dart`文件中，有几个import进来的文件：\n- `demo-card.dart` 卡片widget，列表就是循环的这个widget\n- `items.dart` 卡片展示的数据放在这个文件中，本项目我们写了点mock数据，真实生产项目的数据更多是从http请求\n- `animated-bg.dart` 背景齿轮的widget\n\n\n这个文件主要使用了一些Flutter的基础widget，有不清楚的同学可以去官网查下使用方法，\n另外，列表渲染的时候需要注意下，我们会使用`ScrollController _controller = new ScrollController();`从而获取垂直方向滚动的距离\n\n### 卡片的mock数据\n为了省事，我们直接将数据放在`lib/items.dart`里，我们模拟了六条数据，main.dart里的listView的children就是使用这六条数据生成的:\n\n``` dart\nimport 'package:flutter/material.dart';\n\nclass Item {\n  String name;\n  MaterialColor color;\n  IconData icon;\n  Item(this.name, this.color, this.icon);\n}\n\nList<Item> items = [\n  Item('壹', Colors.amber, Icons.adjust),\n  Item('贰', Colors.cyan, Icons.airport_shuttle),\n  Item('叁', Colors.indigo, Icons.android),\n  Item('肆', Colors.green, Icons.beach_access),\n  Item('伍', Colors.pink, Icons.attach_file),\n  Item('陸', Colors.blue, Icons.bug_report)\n];\n\n```\n三个字段：\n- name 卡片左边的名字\n- color 卡片的背景颜色\n- icon 卡片右边的图标\n\n### 卡片Widget\n我们在`main.dart`里这么生成列表的children：`items.map((Item _item) => DemoCard(_item)).toList();`对DemoCard传入参数_item，其实就是React或者Vue里面的props。不同之处在于，flutter传入的参数既可以是匿名的也可以是具名的，这里我们用的是匿名传参。看下卡片Widget怎么接收参数：\n``` dart\nimport 'package:flutter/material.dart';\nimport 'items.dart';\n\nclass DemoCard extends StatelessWidget {\n  DemoCard(this.item);\n  final Item item;\n\n  static final Shadow _shadow =\n      Shadow(offset: Offset(2.0, 2.0), color: Colors.black26);\n  final TextStyle _style = TextStyle(color: Colors.white70, shadows: [_shadow]);\n\n  @override\n  Widget build(BuildContext context) {\n    return Card(\n      elevation: 3,\n      shape: RoundedRectangleBorder(\n        side: BorderSide(width: 1, color: Colors.black26),\n        borderRadius: BorderRadius.circular(32),\n      ),\n      color: item.color.withOpacity(.7),\n      child: Container(\n        constraints: BoxConstraints.expand(height: 256),\n        child: RawMaterialButton(\n          onPressed: () {},\n          child: Column(\n            mainAxisAlignment: MainAxisAlignment.spaceAround,\n            crossAxisAlignment: CrossAxisAlignment.stretch,\n            children: <Widget>[\n              Row(\n                mainAxisAlignment: MainAxisAlignment.spaceAround,\n                children: <Widget>[\n                  Text(item.name, style: _style.copyWith(fontSize: 64)),\n                  Icon(item.icon, color: Colors.white70, size: 72),\n                ],\n              )\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}\n\n```\n定义了一个StatelessWidget，对应React或者Vue就是无状态组件，接收参数的方式是在构造器上声明，这种方式和ES6一致：\n```\nDemoCard(this.item);\nfinal Item item;\n```\n使用Card组件可以快速的还原一张卡片样式\n- `elevation`参数控制卡片悬浮高度\n- `shape`参数控制卡片圆角\n- `color`参数控制卡片背景，`item.color.withOpacity(.7)`让背景透明化30%\n\n然后就是使用Column和Row来控制布局的展示\n\n### 背景齿轮的转动\n先看下背景组件的源码，再一一解释：\n``` dart\nimport 'package:flutter/material.dart';\n\nclass AnimatedBackground extends StatefulWidget {\n  AnimatedBackground({Key key, this.controller}) : super(key: key);\n\n  final ScrollController controller;\n\n  @override\n  _AnimatedBackgroundState createState() => _AnimatedBackgroundState();\n}\n\nclass _AnimatedBackgroundState extends State<AnimatedBackground> {\n  get offset => widget.controller.hasClients ? widget.controller.offset : 0;\n\n  @override\n  Widget build(BuildContext context) {\n    return AnimatedBuilder(\n      animation: widget.controller,\n      builder: (BuildContext context, Widget child) {\n        return OverflowBox(\n          maxWidth: double.infinity,\n          alignment: Alignment(4, 3),\n          child: Transform.rotate(\n            angle: offset / -512,\n            child: Icon(Icons.settings, size: 512, color: Colors.white),\n          ),\n        );\n      },\n    );\n  }\n}\n\n```\n这个`controller`是在main.dart里传下来的，它是ListView的controller，我们用`widget.controller.offset`即可拿到垂直方向上的滚动距离。\n列表滚动时我们要不停的刷新齿轮的转动角度，所以我们选用`AnimatedBuilder`组件，组件有两个重要参数:\n- animation 将widget.controller传给animation\n- builder 每次animation改变时，都会重新执行渲染，这就实现了联动效果\n\nOverflowBox组件可以通过alignment(锚点)很好的控制子组件的显示位置，这里我们使用`Alignment(4, 3)`将齿轮定位到屏幕左下方。\n让齿轮真正动起来的是`Transform.rotate`组件，这里有个弧长公式要用到：L=α（弧度）× r(半径)，所以我们这么使用:`angle: offset / -512`\n- 为什么是512呢，因为我们的齿轮的`size: 512`\n- 为什么带有负号呢，这样我们就能实现列表向上滚动时齿轮逆时针转动，列表向下滚动时齿轮顺时针滚动\n\n### 用到的Widget\n篇幅有限，不能一一展开讲解使用到的组件，有问题的同学自行去官网查看用法哦\n- MaterialApp\n- Scaffold\n- AppBar\n- Stack\n- Center\n- ListView\n- Card\n- RawMaterialButton\n- Column\n- Row\n- AnimatedBuilder\n- OverflowBox\n- Transform\n- Icon\n\n### 相关链接\n本篇文章能学到Flutter很多知识，包括：StatelessWidget/StatefulWidget的创建、本地数据的创建和使用、列表的展示和控制、垂直水平布局等等，想看效果的同学可以直接跑源码哦\n- [源码地址](https://github.com/xch1029/scroll-animation)\n- [博客本文地址](https://jser.tech/2019/07/11/flutter-scroll-animation)\n- [掘金本文地址](https://juejin.im/post/5d26e4fff265da1b7c614326)\n\n","slug":"flutter-scroll-animation","published":1,"updated":"2020-02-19T15:20:54.096Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7q4ux69001f4wnu384yx02r","content":"<blockquote>\n<p>现在的Flutter正是如火中天，昨天Google官方正式发布了<code>Flutter1.7</code>版本，主要包含了对Android X的支持和Play Store的一些更新，一些新的和增强的组件，以及一些问题的修复。</p>\n</blockquote>\n<p>本篇文章我们一起开发一个炫炫的列表展示，伴随着滚动，背景做一些相应的动画效果。先看下效果图:<br><img src=\"http://qiniu.tbmao.com/blogscreenanimation1.gif\" width=\"300\" alt=\"screenanimation\"></p>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>列表滚动的时候，获取垂直方向的滚动距离，再将这个值转化成角度单位带动齿轮的滚动</p>\n<h3 id=\"入口文件\"><a href=\"#入口文件\" class=\"headerlink\" title=\"入口文件\"></a>入口文件</h3><p>Flutter的项目都是从<code>lib/main.dart</code>开始：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:flutter/material.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'demo-card.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'items.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'animated-bg.dart'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> main() =&gt; runApp(AnimationDemo());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AnimationDemo</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatelessWidget</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> MaterialApp(</span><br><span class=\"line\">      debugShowCheckedModeBanner: <span class=\"keyword\">false</span>,</span><br><span class=\"line\">      title: <span class=\"string\">'Flutter Demo'</span>,</span><br><span class=\"line\">      theme: ThemeData(primarySwatch: Colors.blue),</span><br><span class=\"line\">      home: MyHomePage(title: <span class=\"string\">'列表滚动'</span>),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyHomePage</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatefulWidget</span> </span>&#123;</span><br><span class=\"line\">  MyHomePage(&#123;Key key, <span class=\"keyword\">this</span>.title&#125;) : <span class=\"keyword\">super</span>(key: key);</span><br><span class=\"line\">  <span class=\"keyword\">final</span> <span class=\"built_in\">String</span> title;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  _MyHomePageState createState() =&gt; _MyHomePageState();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">_MyHomePageState</span> <span class=\"keyword\">extends</span> <span class=\"title\">State</span>&lt;<span class=\"title\">MyHomePage</span>&gt; </span>&#123;</span><br><span class=\"line\">  ScrollController _controller = <span class=\"keyword\">new</span> ScrollController();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">List</span>&lt;DemoCard&gt; <span class=\"keyword\">get</span> _cards =&gt;</span><br><span class=\"line\">      items.map((Item _item) =&gt; DemoCard(_item)).toList();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Scaffold(</span><br><span class=\"line\">      backgroundColor: Colors.black,</span><br><span class=\"line\">      appBar: AppBar(title: Text(widget.title)),</span><br><span class=\"line\">      body: Stack(</span><br><span class=\"line\">        alignment: AlignmentDirectional.topStart,</span><br><span class=\"line\">        children: &lt;Widget&gt;[</span><br><span class=\"line\">          AnimatedBackground(controller: _controller),</span><br><span class=\"line\">          Center(</span><br><span class=\"line\">            child: ListView(controller: _controller, children: _cards),</span><br><span class=\"line\">          )</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在<code>main.dart</code>文件中，有几个import进来的文件：</p>\n<ul>\n<li><code>demo-card.dart</code> 卡片widget，列表就是循环的这个widget</li>\n<li><code>items.dart</code> 卡片展示的数据放在这个文件中，本项目我们写了点mock数据，真实生产项目的数据更多是从http请求</li>\n<li><code>animated-bg.dart</code> 背景齿轮的widget</li>\n</ul>\n<p>这个文件主要使用了一些Flutter的基础widget，有不清楚的同学可以去官网查下使用方法，<br>另外，列表渲染的时候需要注意下，我们会使用<code>ScrollController _controller = new ScrollController();</code>从而获取垂直方向滚动的距离</p>\n<h3 id=\"卡片的mock数据\"><a href=\"#卡片的mock数据\" class=\"headerlink\" title=\"卡片的mock数据\"></a>卡片的mock数据</h3><p>为了省事，我们直接将数据放在<code>lib/items.dart</code>里，我们模拟了六条数据，main.dart里的listView的children就是使用这六条数据生成的:</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:flutter/material.dart'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Item</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">String</span> name;</span><br><span class=\"line\">  MaterialColor color;</span><br><span class=\"line\">  IconData icon;</span><br><span class=\"line\">  Item(<span class=\"keyword\">this</span>.name, <span class=\"keyword\">this</span>.color, <span class=\"keyword\">this</span>.icon);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">List</span>&lt;Item&gt; items = [</span><br><span class=\"line\">  Item(<span class=\"string\">'壹'</span>, Colors.amber, Icons.adjust),</span><br><span class=\"line\">  Item(<span class=\"string\">'贰'</span>, Colors.cyan, Icons.airport_shuttle),</span><br><span class=\"line\">  Item(<span class=\"string\">'叁'</span>, Colors.indigo, Icons.android),</span><br><span class=\"line\">  Item(<span class=\"string\">'肆'</span>, Colors.green, Icons.beach_access),</span><br><span class=\"line\">  Item(<span class=\"string\">'伍'</span>, Colors.pink, Icons.attach_file),</span><br><span class=\"line\">  Item(<span class=\"string\">'陸'</span>, Colors.blue, Icons.bug_report)</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n<p>三个字段：</p>\n<ul>\n<li>name 卡片左边的名字</li>\n<li>color 卡片的背景颜色</li>\n<li>icon 卡片右边的图标</li>\n</ul>\n<h3 id=\"卡片Widget\"><a href=\"#卡片Widget\" class=\"headerlink\" title=\"卡片Widget\"></a>卡片Widget</h3><p>我们在<code>main.dart</code>里这么生成列表的children：<code>items.map((Item _item) =&gt; DemoCard(_item)).toList();</code>对DemoCard传入参数_item，其实就是React或者Vue里面的props。不同之处在于，flutter传入的参数既可以是匿名的也可以是具名的，这里我们用的是匿名传参。看下卡片Widget怎么接收参数：<br><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:flutter/material.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'items.dart'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoCard</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatelessWidget</span> </span>&#123;</span><br><span class=\"line\">  DemoCard(<span class=\"keyword\">this</span>.item);</span><br><span class=\"line\">  <span class=\"keyword\">final</span> Item item;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Shadow _shadow =</span><br><span class=\"line\">      Shadow(offset: Offset(<span class=\"number\">2.0</span>, <span class=\"number\">2.0</span>), color: Colors.black26);</span><br><span class=\"line\">  <span class=\"keyword\">final</span> TextStyle _style = TextStyle(color: Colors.white70, shadows: [_shadow]);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Card(</span><br><span class=\"line\">      elevation: <span class=\"number\">3</span>,</span><br><span class=\"line\">      shape: RoundedRectangleBorder(</span><br><span class=\"line\">        side: BorderSide(width: <span class=\"number\">1</span>, color: Colors.black26),</span><br><span class=\"line\">        borderRadius: BorderRadius.circular(<span class=\"number\">32</span>),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">      color: item.color.withOpacity(<span class=\"number\">.7</span>),</span><br><span class=\"line\">      child: Container(</span><br><span class=\"line\">        constraints: BoxConstraints.expand(height: <span class=\"number\">256</span>),</span><br><span class=\"line\">        child: RawMaterialButton(</span><br><span class=\"line\">          onPressed: () &#123;&#125;,</span><br><span class=\"line\">          child: Column(</span><br><span class=\"line\">            mainAxisAlignment: MainAxisAlignment.spaceAround,</span><br><span class=\"line\">            crossAxisAlignment: CrossAxisAlignment.stretch,</span><br><span class=\"line\">            children: &lt;Widget&gt;[</span><br><span class=\"line\">              Row(</span><br><span class=\"line\">                mainAxisAlignment: MainAxisAlignment.spaceAround,</span><br><span class=\"line\">                children: &lt;Widget&gt;[</span><br><span class=\"line\">                  Text(item.name, style: _style.copyWith(fontSize: <span class=\"number\">64</span>)),</span><br><span class=\"line\">                  Icon(item.icon, color: Colors.white70, size: <span class=\"number\">72</span>),</span><br><span class=\"line\">                ],</span><br><span class=\"line\">              )</span><br><span class=\"line\">            ],</span><br><span class=\"line\">          ),</span><br><span class=\"line\">        ),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>定义了一个StatelessWidget，对应React或者Vue就是无状态组件，接收参数的方式是在构造器上声明，这种方式和ES6一致：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DemoCard(this.item);</span><br><span class=\"line\">final Item item;</span><br></pre></td></tr></table></figure></p>\n<p>使用Card组件可以快速的还原一张卡片样式</p>\n<ul>\n<li><code>elevation</code>参数控制卡片悬浮高度</li>\n<li><code>shape</code>参数控制卡片圆角</li>\n<li><code>color</code>参数控制卡片背景，<code>item.color.withOpacity(.7)</code>让背景透明化30%</li>\n</ul>\n<p>然后就是使用Column和Row来控制布局的展示</p>\n<h3 id=\"背景齿轮的转动\"><a href=\"#背景齿轮的转动\" class=\"headerlink\" title=\"背景齿轮的转动\"></a>背景齿轮的转动</h3><p>先看下背景组件的源码，再一一解释：<br><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:flutter/material.dart'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AnimatedBackground</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatefulWidget</span> </span>&#123;</span><br><span class=\"line\">  AnimatedBackground(&#123;Key key, <span class=\"keyword\">this</span>.controller&#125;) : <span class=\"keyword\">super</span>(key: key);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">final</span> ScrollController controller;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  _AnimatedBackgroundState createState() =&gt; _AnimatedBackgroundState();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">_AnimatedBackgroundState</span> <span class=\"keyword\">extends</span> <span class=\"title\">State</span>&lt;<span class=\"title\">AnimatedBackground</span>&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">get</span> offset =&gt; widget.controller.hasClients ? widget.controller.offset : <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> AnimatedBuilder(</span><br><span class=\"line\">      animation: widget.controller,</span><br><span class=\"line\">      builder: (BuildContext context, Widget child) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> OverflowBox(</span><br><span class=\"line\">          maxWidth: <span class=\"built_in\">double</span>.infinity,</span><br><span class=\"line\">          alignment: Alignment(<span class=\"number\">4</span>, <span class=\"number\">3</span>),</span><br><span class=\"line\">          child: Transform.rotate(</span><br><span class=\"line\">            angle: offset / <span class=\"number\">-512</span>,</span><br><span class=\"line\">            child: Icon(Icons.settings, size: <span class=\"number\">512</span>, color: Colors.white),</span><br><span class=\"line\">          ),</span><br><span class=\"line\">        );</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这个<code>controller</code>是在main.dart里传下来的，它是ListView的controller，我们用<code>widget.controller.offset</code>即可拿到垂直方向上的滚动距离。<br>列表滚动时我们要不停的刷新齿轮的转动角度，所以我们选用<code>AnimatedBuilder</code>组件，组件有两个重要参数:</p>\n<ul>\n<li>animation 将widget.controller传给animation</li>\n<li>builder 每次animation改变时，都会重新执行渲染，这就实现了联动效果</li>\n</ul>\n<p>OverflowBox组件可以通过alignment(锚点)很好的控制子组件的显示位置，这里我们使用<code>Alignment(4, 3)</code>将齿轮定位到屏幕左下方。<br>让齿轮真正动起来的是<code>Transform.rotate</code>组件，这里有个弧长公式要用到：L=α（弧度）× r(半径)，所以我们这么使用:<code>angle: offset / -512</code></p>\n<ul>\n<li>为什么是512呢，因为我们的齿轮的<code>size: 512</code></li>\n<li>为什么带有负号呢，这样我们就能实现列表向上滚动时齿轮逆时针转动，列表向下滚动时齿轮顺时针滚动</li>\n</ul>\n<h3 id=\"用到的Widget\"><a href=\"#用到的Widget\" class=\"headerlink\" title=\"用到的Widget\"></a>用到的Widget</h3><p>篇幅有限，不能一一展开讲解使用到的组件，有问题的同学自行去官网查看用法哦</p>\n<ul>\n<li>MaterialApp</li>\n<li>Scaffold</li>\n<li>AppBar</li>\n<li>Stack</li>\n<li>Center</li>\n<li>ListView</li>\n<li>Card</li>\n<li>RawMaterialButton</li>\n<li>Column</li>\n<li>Row</li>\n<li>AnimatedBuilder</li>\n<li>OverflowBox</li>\n<li>Transform</li>\n<li>Icon</li>\n</ul>\n<h3 id=\"相关链接\"><a href=\"#相关链接\" class=\"headerlink\" title=\"相关链接\"></a>相关链接</h3><p>本篇文章能学到Flutter很多知识，包括：StatelessWidget/StatefulWidget的创建、本地数据的创建和使用、列表的展示和控制、垂直水平布局等等，想看效果的同学可以直接跑源码哦</p>\n<ul>\n<li><a href=\"https://github.com/xch1029/scroll-animation\" target=\"_blank\" rel=\"noopener\">源码地址</a></li>\n<li><a href=\"https://jser.tech/2019/07/11/flutter-scroll-animation\" target=\"_blank\" rel=\"noopener\">博客本文地址</a></li>\n<li><a href=\"https://juejin.im/post/5d26e4fff265da1b7c614326\" target=\"_blank\" rel=\"noopener\">掘金本文地址</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>现在的Flutter正是如火中天，昨天Google官方正式发布了<code>Flutter1.7</code>版本，主要包含了对Android X的支持和Play Store的一些更新，一些新的和增强的组件，以及一些问题的修复。</p>\n</blockquote>\n<p>本篇文章我们一起开发一个炫炫的列表展示，伴随着滚动，背景做一些相应的动画效果。先看下效果图:<br><img src=\"http://qiniu.tbmao.com/blogscreenanimation1.gif\" width=\"300\" alt=\"screenanimation\"></p>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>列表滚动的时候，获取垂直方向的滚动距离，再将这个值转化成角度单位带动齿轮的滚动</p>\n<h3 id=\"入口文件\"><a href=\"#入口文件\" class=\"headerlink\" title=\"入口文件\"></a>入口文件</h3><p>Flutter的项目都是从<code>lib/main.dart</code>开始：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:flutter/material.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'demo-card.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'items.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'animated-bg.dart'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> main() =&gt; runApp(AnimationDemo());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AnimationDemo</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatelessWidget</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> MaterialApp(</span><br><span class=\"line\">      debugShowCheckedModeBanner: <span class=\"keyword\">false</span>,</span><br><span class=\"line\">      title: <span class=\"string\">'Flutter Demo'</span>,</span><br><span class=\"line\">      theme: ThemeData(primarySwatch: Colors.blue),</span><br><span class=\"line\">      home: MyHomePage(title: <span class=\"string\">'列表滚动'</span>),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyHomePage</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatefulWidget</span> </span>&#123;</span><br><span class=\"line\">  MyHomePage(&#123;Key key, <span class=\"keyword\">this</span>.title&#125;) : <span class=\"keyword\">super</span>(key: key);</span><br><span class=\"line\">  <span class=\"keyword\">final</span> <span class=\"built_in\">String</span> title;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  _MyHomePageState createState() =&gt; _MyHomePageState();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">_MyHomePageState</span> <span class=\"keyword\">extends</span> <span class=\"title\">State</span>&lt;<span class=\"title\">MyHomePage</span>&gt; </span>&#123;</span><br><span class=\"line\">  ScrollController _controller = <span class=\"keyword\">new</span> ScrollController();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">List</span>&lt;DemoCard&gt; <span class=\"keyword\">get</span> _cards =&gt;</span><br><span class=\"line\">      items.map((Item _item) =&gt; DemoCard(_item)).toList();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Scaffold(</span><br><span class=\"line\">      backgroundColor: Colors.black,</span><br><span class=\"line\">      appBar: AppBar(title: Text(widget.title)),</span><br><span class=\"line\">      body: Stack(</span><br><span class=\"line\">        alignment: AlignmentDirectional.topStart,</span><br><span class=\"line\">        children: &lt;Widget&gt;[</span><br><span class=\"line\">          AnimatedBackground(controller: _controller),</span><br><span class=\"line\">          Center(</span><br><span class=\"line\">            child: ListView(controller: _controller, children: _cards),</span><br><span class=\"line\">          )</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在<code>main.dart</code>文件中，有几个import进来的文件：</p>\n<ul>\n<li><code>demo-card.dart</code> 卡片widget，列表就是循环的这个widget</li>\n<li><code>items.dart</code> 卡片展示的数据放在这个文件中，本项目我们写了点mock数据，真实生产项目的数据更多是从http请求</li>\n<li><code>animated-bg.dart</code> 背景齿轮的widget</li>\n</ul>\n<p>这个文件主要使用了一些Flutter的基础widget，有不清楚的同学可以去官网查下使用方法，<br>另外，列表渲染的时候需要注意下，我们会使用<code>ScrollController _controller = new ScrollController();</code>从而获取垂直方向滚动的距离</p>\n<h3 id=\"卡片的mock数据\"><a href=\"#卡片的mock数据\" class=\"headerlink\" title=\"卡片的mock数据\"></a>卡片的mock数据</h3><p>为了省事，我们直接将数据放在<code>lib/items.dart</code>里，我们模拟了六条数据，main.dart里的listView的children就是使用这六条数据生成的:</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:flutter/material.dart'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Item</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">String</span> name;</span><br><span class=\"line\">  MaterialColor color;</span><br><span class=\"line\">  IconData icon;</span><br><span class=\"line\">  Item(<span class=\"keyword\">this</span>.name, <span class=\"keyword\">this</span>.color, <span class=\"keyword\">this</span>.icon);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">List</span>&lt;Item&gt; items = [</span><br><span class=\"line\">  Item(<span class=\"string\">'壹'</span>, Colors.amber, Icons.adjust),</span><br><span class=\"line\">  Item(<span class=\"string\">'贰'</span>, Colors.cyan, Icons.airport_shuttle),</span><br><span class=\"line\">  Item(<span class=\"string\">'叁'</span>, Colors.indigo, Icons.android),</span><br><span class=\"line\">  Item(<span class=\"string\">'肆'</span>, Colors.green, Icons.beach_access),</span><br><span class=\"line\">  Item(<span class=\"string\">'伍'</span>, Colors.pink, Icons.attach_file),</span><br><span class=\"line\">  Item(<span class=\"string\">'陸'</span>, Colors.blue, Icons.bug_report)</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n<p>三个字段：</p>\n<ul>\n<li>name 卡片左边的名字</li>\n<li>color 卡片的背景颜色</li>\n<li>icon 卡片右边的图标</li>\n</ul>\n<h3 id=\"卡片Widget\"><a href=\"#卡片Widget\" class=\"headerlink\" title=\"卡片Widget\"></a>卡片Widget</h3><p>我们在<code>main.dart</code>里这么生成列表的children：<code>items.map((Item _item) =&gt; DemoCard(_item)).toList();</code>对DemoCard传入参数_item，其实就是React或者Vue里面的props。不同之处在于，flutter传入的参数既可以是匿名的也可以是具名的，这里我们用的是匿名传参。看下卡片Widget怎么接收参数：<br><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:flutter/material.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'items.dart'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoCard</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatelessWidget</span> </span>&#123;</span><br><span class=\"line\">  DemoCard(<span class=\"keyword\">this</span>.item);</span><br><span class=\"line\">  <span class=\"keyword\">final</span> Item item;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Shadow _shadow =</span><br><span class=\"line\">      Shadow(offset: Offset(<span class=\"number\">2.0</span>, <span class=\"number\">2.0</span>), color: Colors.black26);</span><br><span class=\"line\">  <span class=\"keyword\">final</span> TextStyle _style = TextStyle(color: Colors.white70, shadows: [_shadow]);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Card(</span><br><span class=\"line\">      elevation: <span class=\"number\">3</span>,</span><br><span class=\"line\">      shape: RoundedRectangleBorder(</span><br><span class=\"line\">        side: BorderSide(width: <span class=\"number\">1</span>, color: Colors.black26),</span><br><span class=\"line\">        borderRadius: BorderRadius.circular(<span class=\"number\">32</span>),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">      color: item.color.withOpacity(<span class=\"number\">.7</span>),</span><br><span class=\"line\">      child: Container(</span><br><span class=\"line\">        constraints: BoxConstraints.expand(height: <span class=\"number\">256</span>),</span><br><span class=\"line\">        child: RawMaterialButton(</span><br><span class=\"line\">          onPressed: () &#123;&#125;,</span><br><span class=\"line\">          child: Column(</span><br><span class=\"line\">            mainAxisAlignment: MainAxisAlignment.spaceAround,</span><br><span class=\"line\">            crossAxisAlignment: CrossAxisAlignment.stretch,</span><br><span class=\"line\">            children: &lt;Widget&gt;[</span><br><span class=\"line\">              Row(</span><br><span class=\"line\">                mainAxisAlignment: MainAxisAlignment.spaceAround,</span><br><span class=\"line\">                children: &lt;Widget&gt;[</span><br><span class=\"line\">                  Text(item.name, style: _style.copyWith(fontSize: <span class=\"number\">64</span>)),</span><br><span class=\"line\">                  Icon(item.icon, color: Colors.white70, size: <span class=\"number\">72</span>),</span><br><span class=\"line\">                ],</span><br><span class=\"line\">              )</span><br><span class=\"line\">            ],</span><br><span class=\"line\">          ),</span><br><span class=\"line\">        ),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>定义了一个StatelessWidget，对应React或者Vue就是无状态组件，接收参数的方式是在构造器上声明，这种方式和ES6一致：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DemoCard(this.item);</span><br><span class=\"line\">final Item item;</span><br></pre></td></tr></table></figure></p>\n<p>使用Card组件可以快速的还原一张卡片样式</p>\n<ul>\n<li><code>elevation</code>参数控制卡片悬浮高度</li>\n<li><code>shape</code>参数控制卡片圆角</li>\n<li><code>color</code>参数控制卡片背景，<code>item.color.withOpacity(.7)</code>让背景透明化30%</li>\n</ul>\n<p>然后就是使用Column和Row来控制布局的展示</p>\n<h3 id=\"背景齿轮的转动\"><a href=\"#背景齿轮的转动\" class=\"headerlink\" title=\"背景齿轮的转动\"></a>背景齿轮的转动</h3><p>先看下背景组件的源码，再一一解释：<br><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:flutter/material.dart'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AnimatedBackground</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatefulWidget</span> </span>&#123;</span><br><span class=\"line\">  AnimatedBackground(&#123;Key key, <span class=\"keyword\">this</span>.controller&#125;) : <span class=\"keyword\">super</span>(key: key);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">final</span> ScrollController controller;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  _AnimatedBackgroundState createState() =&gt; _AnimatedBackgroundState();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">_AnimatedBackgroundState</span> <span class=\"keyword\">extends</span> <span class=\"title\">State</span>&lt;<span class=\"title\">AnimatedBackground</span>&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">get</span> offset =&gt; widget.controller.hasClients ? widget.controller.offset : <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> AnimatedBuilder(</span><br><span class=\"line\">      animation: widget.controller,</span><br><span class=\"line\">      builder: (BuildContext context, Widget child) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> OverflowBox(</span><br><span class=\"line\">          maxWidth: <span class=\"built_in\">double</span>.infinity,</span><br><span class=\"line\">          alignment: Alignment(<span class=\"number\">4</span>, <span class=\"number\">3</span>),</span><br><span class=\"line\">          child: Transform.rotate(</span><br><span class=\"line\">            angle: offset / <span class=\"number\">-512</span>,</span><br><span class=\"line\">            child: Icon(Icons.settings, size: <span class=\"number\">512</span>, color: Colors.white),</span><br><span class=\"line\">          ),</span><br><span class=\"line\">        );</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这个<code>controller</code>是在main.dart里传下来的，它是ListView的controller，我们用<code>widget.controller.offset</code>即可拿到垂直方向上的滚动距离。<br>列表滚动时我们要不停的刷新齿轮的转动角度，所以我们选用<code>AnimatedBuilder</code>组件，组件有两个重要参数:</p>\n<ul>\n<li>animation 将widget.controller传给animation</li>\n<li>builder 每次animation改变时，都会重新执行渲染，这就实现了联动效果</li>\n</ul>\n<p>OverflowBox组件可以通过alignment(锚点)很好的控制子组件的显示位置，这里我们使用<code>Alignment(4, 3)</code>将齿轮定位到屏幕左下方。<br>让齿轮真正动起来的是<code>Transform.rotate</code>组件，这里有个弧长公式要用到：L=α（弧度）× r(半径)，所以我们这么使用:<code>angle: offset / -512</code></p>\n<ul>\n<li>为什么是512呢，因为我们的齿轮的<code>size: 512</code></li>\n<li>为什么带有负号呢，这样我们就能实现列表向上滚动时齿轮逆时针转动，列表向下滚动时齿轮顺时针滚动</li>\n</ul>\n<h3 id=\"用到的Widget\"><a href=\"#用到的Widget\" class=\"headerlink\" title=\"用到的Widget\"></a>用到的Widget</h3><p>篇幅有限，不能一一展开讲解使用到的组件，有问题的同学自行去官网查看用法哦</p>\n<ul>\n<li>MaterialApp</li>\n<li>Scaffold</li>\n<li>AppBar</li>\n<li>Stack</li>\n<li>Center</li>\n<li>ListView</li>\n<li>Card</li>\n<li>RawMaterialButton</li>\n<li>Column</li>\n<li>Row</li>\n<li>AnimatedBuilder</li>\n<li>OverflowBox</li>\n<li>Transform</li>\n<li>Icon</li>\n</ul>\n<h3 id=\"相关链接\"><a href=\"#相关链接\" class=\"headerlink\" title=\"相关链接\"></a>相关链接</h3><p>本篇文章能学到Flutter很多知识，包括：StatelessWidget/StatefulWidget的创建、本地数据的创建和使用、列表的展示和控制、垂直水平布局等等，想看效果的同学可以直接跑源码哦</p>\n<ul>\n<li><a href=\"https://github.com/xch1029/scroll-animation\" target=\"_blank\" rel=\"noopener\">源码地址</a></li>\n<li><a href=\"https://jser.tech/2019/07/11/flutter-scroll-animation\" target=\"_blank\" rel=\"noopener\">博客本文地址</a></li>\n<li><a href=\"https://juejin.im/post/5d26e4fff265da1b7c614326\" target=\"_blank\" rel=\"noopener\">掘金本文地址</a></li>\n</ul>\n"},{"title":"Flutter打造一款酷酷的电影App","date":"2019-07-19T15:01:47.000Z","_content":"> 使用Flutter开发一款App是一件非常愉快的事情，其出色的性能、跨多端以及数量众多的原生组件都是我们选择Flutter的理由！今天我们就来使用Flutter开发一款电影类的App，先看下App的截图。\n\n![App截图](http://qiniu.tbmao.com/flutterfluttermovie.jpg)\n\n### 从main.dart开始\n在Flutter里main.dart是应用开始的地方:\n``` dart\nimport 'package:flutter/material.dart';\nimport 'package:movie/utils/router.dart' as router;\n\nvoid main() => runApp(MyApp());\n\nclass MyApp extends StatelessWidget {\n  // This widget is the root of your application.\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      debugShowCheckedModeBanner: false,\n      title: '电影',\n      theme: ThemeData(\n        primarySwatch: Colors.blue,\n      ),\n      onGenerateRoute: router.generateRoute,\n      initialRoute: '/',\n    );\n  }\n}\n```\n一般的，在Flutter中管理路由有两种方式，一种是直接使用`Navigator.of(context).push()`，这种方式比较适合非常简单的应用，随着应用的不断发展，逻辑越来越多，推荐使用具名路由来管理应用，本文也是使用的这种方式。直接将路由挂在`MaterialApp`的`onGenerateRoute`字段上即可，具体的路由定义放在了单独的文件中进行管理`utils/router.dart`:\n``` dart\nimport 'package:flutter/material.dart';\nimport 'package:movie/screens/home.dart';\nimport 'package:movie/screens/detail.dart';\nimport 'package:movie/screens/videoPlayer.dart';\n\nRoute<dynamic> generateRoute(RouteSettings settings) {\n  switch (settings.name) {\n    case '/':\n      return MaterialPageRoute(builder: (context) => Home());\n    case 'detail':\n      var arguments = settings.arguments;\n      return MaterialPageRoute(\n          builder: (context) => MovieDetail(id: arguments));\n    case 'video':\n      var arguments = settings.arguments;\n      return MaterialPageRoute(\n          builder: (context) => VideoPage(url: arguments));\n    default:\n      return MaterialPageRoute(builder: (context) => Home());\n  }\n}\n```\n真是像极了前端的路由定义，先将组件import进来，然后在各自的路由中return即可。\n\n### 首页\n在首页中使用TabBar来展示\"正在热映\"和\"TOP250\":\n``` dart\nimport 'package:flutter/material.dart';\nimport 'package:movie/screens/hot.dart';\n\nclass Home extends StatefulWidget {\n  Home({Key key}) : super(key: key);\n\n  _HomeState createState() => _HomeState();\n}\n\nclass _HomeState extends State<Home> with SingleTickerProviderStateMixin {\n  TabController _tabController;\n\n  @override\n  void initState() {\n    super.initState();\n    _tabController = TabController(vsync: this, initialIndex: 0, length: 2);\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: TabBar(\n          controller: _tabController,\n          tabs: <Widget>[\n            Tab(text: '正在热映'),\n            Tab(text: 'TOP250'),\n          ],\n        ),\n      ),\n      body: TabBarView(\n        controller: _tabController,\n        children: <Widget>[\n          Hot(),\n          Hot(history: true),\n        ],\n      ),\n    );\n  }\n}\n\n```\n两个页面的布局是一样的，只有数据是不同的，所以我们复用这个页面`Hot`,传入`history`参数来代表是否为Top250页面\n\n### 复用的Hot组件\n- 在这个组件中，通过history字段来区分成两个页面。\n- 在页面`initState`的生命周期中，请求数据，再进行相应的展示。\n- 下拉刷新的功能是使用的RefreshIndicator组件，在其`onRefresh`中进行下拉时的逻辑处理。\n- Flutter没有直接提供上拉加载的组件，但是也是很容易实现，通过`ListView`的controller来做判断即可：当前滚动的位置是否到达最大滚动位置`_scrollController.position.pixels == _scrollController.position.maxScrollExtent`\n- 为了获得良好的用户体验，Tab来回切换的时候，我们不希望页面重新渲染，Flutter提供了混入类AutomaticKeepAliveClientMixin，重载`wantKeepAlive`即可，下面是完整的代码:\n``` dart\nimport 'package:flutter/material.dart';\nimport 'package:movie/utils/api.dart' as api;\nimport 'package:movie/widgets/movieItem.dart';\n\nclass Hot extends StatefulWidget {\n  final bool history;\n  Hot({Key key, this.history = false}) : super(key: key);\n\n  _HotState createState() => _HotState();\n}\n\nclass _HotState extends State<Hot> with AutomaticKeepAliveClientMixin {\n  List _movieList = [];\n  int start = 0;\n  int total = 0;\n  ScrollController _scrollController = ScrollController();\n\n  @override\n  void initState() {\n    super.initState();\n    _scrollController.addListener(() {\n      if (_scrollController.position.pixels ==\n          _scrollController.position.maxScrollExtent) {\n        getMore();\n      }\n    });\n    this.query(init: true);\n  }\n\n  query({bool init = false}) async {\n    Map res = await api.getMovieList(\n        history: widget.history, start: init ? 0 : this.start);\n    var start = res['start'];\n    var total = res['total'];\n    var subjects = res['subjects'];\n    setState(() {\n      if (init) {\n        this._movieList = subjects;\n      } else {\n        this._movieList.addAll(subjects);\n      }\n      this.start = start + 10;\n      this.total = total;\n    });\n  }\n\n  Future<Null> _onRefresh() async {\n    await this.query(init: true);\n  }\n\n  getMore() {\n    if (start < total) {\n      query();\n    }\n  }\n\n  @override\n  bool get wantKeepAlive => true;\n\n  @override\n  Widget build(BuildContext context) {\n    super.build(context);\n    return RefreshIndicator(\n      onRefresh: _onRefresh,\n      child: ListView.builder(\n        controller: _scrollController,\n        itemCount: this._movieList.length,\n        itemBuilder: (BuildContext context, int index) =>\n            MovieItem(data: this._movieList[index]),\n      ),\n    );\n  }\n}\n\n```\n\n### 电影的详情页面\n点击单条电影时使用`Navigator.pushNamed(context, 'detail', arguments: data['id']);`即可跳转详情页，在详情页中通过`id`再请求接口获取详情:\n``` dart\nimport 'package:flutter/material.dart';\nimport 'package:movie/widgets/detail/detailTop.dart';\nimport 'package:movie/widgets/detail/rateing.dart';\nimport 'package:movie/widgets/detail/actors.dart';\nimport 'package:movie/widgets/detail/photos.dart';\nimport 'package:movie/widgets/detail/comments.dart';\nimport 'package:movie/utils/api.dart' as api;\n\nclass MovieDetail extends StatefulWidget {\n  final id;\n  MovieDetail({Key key, this.id}) : super(key: key);\n\n  _MovieDetailState createState() => _MovieDetailState();\n}\n\nclass _MovieDetailState extends State<MovieDetail> {\n  var _data = {};\n\n  @override\n  void initState() {\n    super.initState();\n    this.init();\n  }\n\n  init() async {\n    var res = await api.getMovieDetail(widget.id);\n    setState(() {\n      _data = res;\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: _data.isEmpty\n          ? Center(child: CircularProgressIndicator(),)\n          : SafeArea(\n              child: Container(\n                height: MediaQuery.of(context).size.height,\n                width: MediaQuery.of(context).size.width,\n                child: ListView(\n                  scrollDirection: Axis.vertical,\n                  children: <Widget>[\n                    MovieDetailTop(data: _data),\n                    Rate(count: _data['ratings_count'], rating: _data['rating']),\n                    Container(padding: EdgeInsets.all(10),child: Text(_data['summary'])),\n                    Actors(directors: _data['directors'], casts: _data['casts']),\n                    Photos(photos: _data['photos'],),\n                    Comments(comments: _data['popular_comments']),\n                  ],\n                ),\n              ),\n            ),\n    );\n  }\n}\n\n```\n在详情页面中，我们封装了一些组件，这样能让项目更加容易阅读和维护，组件的具体实现就不详细介绍了，都是一些常用的原生组件，这些组件分别是：\n- `widgets/detail/detailTop.dart` 页面顶部的电影概述\n- `widgets/detail/rateing.dart` 评分组件\n- `widgets/detail/actors.dart` 演员表\n- `widgets/detail/photos.dart` 剧照\n- `widgets/detail/comments.dart` 评论组件\n\n### 真实数据来自哪里？\n应用中的数据都是从豆瓣开发者api中拉取的，分别是，正在热映`in_theaters`，top250`top250`和电影详情`subject/id`三个接口,请求这些接口是需要`apikey`的，为了大家能方便请求数据，我将`apikey`上传到了github上，还请大家温柔点，不要将这个`apikey`干爆了。\n\n### 相关链接\n[源码仓库](https://github.com/xch1029/movie)\n[博客地址](http://jser.tech/2019/07/19/flutter-movie)\n[掘金地址](https://juejin.im/post/5d31ea42f265da1bbe5e3ea7)\n","source":"_posts/flutter-movie.md","raw":"---\ntitle: Flutter打造一款酷酷的电影App\ndate: 2019-07-19 23:01:47\ntags: flutter\n---\n> 使用Flutter开发一款App是一件非常愉快的事情，其出色的性能、跨多端以及数量众多的原生组件都是我们选择Flutter的理由！今天我们就来使用Flutter开发一款电影类的App，先看下App的截图。\n\n![App截图](http://qiniu.tbmao.com/flutterfluttermovie.jpg)\n\n### 从main.dart开始\n在Flutter里main.dart是应用开始的地方:\n``` dart\nimport 'package:flutter/material.dart';\nimport 'package:movie/utils/router.dart' as router;\n\nvoid main() => runApp(MyApp());\n\nclass MyApp extends StatelessWidget {\n  // This widget is the root of your application.\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      debugShowCheckedModeBanner: false,\n      title: '电影',\n      theme: ThemeData(\n        primarySwatch: Colors.blue,\n      ),\n      onGenerateRoute: router.generateRoute,\n      initialRoute: '/',\n    );\n  }\n}\n```\n一般的，在Flutter中管理路由有两种方式，一种是直接使用`Navigator.of(context).push()`，这种方式比较适合非常简单的应用，随着应用的不断发展，逻辑越来越多，推荐使用具名路由来管理应用，本文也是使用的这种方式。直接将路由挂在`MaterialApp`的`onGenerateRoute`字段上即可，具体的路由定义放在了单独的文件中进行管理`utils/router.dart`:\n``` dart\nimport 'package:flutter/material.dart';\nimport 'package:movie/screens/home.dart';\nimport 'package:movie/screens/detail.dart';\nimport 'package:movie/screens/videoPlayer.dart';\n\nRoute<dynamic> generateRoute(RouteSettings settings) {\n  switch (settings.name) {\n    case '/':\n      return MaterialPageRoute(builder: (context) => Home());\n    case 'detail':\n      var arguments = settings.arguments;\n      return MaterialPageRoute(\n          builder: (context) => MovieDetail(id: arguments));\n    case 'video':\n      var arguments = settings.arguments;\n      return MaterialPageRoute(\n          builder: (context) => VideoPage(url: arguments));\n    default:\n      return MaterialPageRoute(builder: (context) => Home());\n  }\n}\n```\n真是像极了前端的路由定义，先将组件import进来，然后在各自的路由中return即可。\n\n### 首页\n在首页中使用TabBar来展示\"正在热映\"和\"TOP250\":\n``` dart\nimport 'package:flutter/material.dart';\nimport 'package:movie/screens/hot.dart';\n\nclass Home extends StatefulWidget {\n  Home({Key key}) : super(key: key);\n\n  _HomeState createState() => _HomeState();\n}\n\nclass _HomeState extends State<Home> with SingleTickerProviderStateMixin {\n  TabController _tabController;\n\n  @override\n  void initState() {\n    super.initState();\n    _tabController = TabController(vsync: this, initialIndex: 0, length: 2);\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: TabBar(\n          controller: _tabController,\n          tabs: <Widget>[\n            Tab(text: '正在热映'),\n            Tab(text: 'TOP250'),\n          ],\n        ),\n      ),\n      body: TabBarView(\n        controller: _tabController,\n        children: <Widget>[\n          Hot(),\n          Hot(history: true),\n        ],\n      ),\n    );\n  }\n}\n\n```\n两个页面的布局是一样的，只有数据是不同的，所以我们复用这个页面`Hot`,传入`history`参数来代表是否为Top250页面\n\n### 复用的Hot组件\n- 在这个组件中，通过history字段来区分成两个页面。\n- 在页面`initState`的生命周期中，请求数据，再进行相应的展示。\n- 下拉刷新的功能是使用的RefreshIndicator组件，在其`onRefresh`中进行下拉时的逻辑处理。\n- Flutter没有直接提供上拉加载的组件，但是也是很容易实现，通过`ListView`的controller来做判断即可：当前滚动的位置是否到达最大滚动位置`_scrollController.position.pixels == _scrollController.position.maxScrollExtent`\n- 为了获得良好的用户体验，Tab来回切换的时候，我们不希望页面重新渲染，Flutter提供了混入类AutomaticKeepAliveClientMixin，重载`wantKeepAlive`即可，下面是完整的代码:\n``` dart\nimport 'package:flutter/material.dart';\nimport 'package:movie/utils/api.dart' as api;\nimport 'package:movie/widgets/movieItem.dart';\n\nclass Hot extends StatefulWidget {\n  final bool history;\n  Hot({Key key, this.history = false}) : super(key: key);\n\n  _HotState createState() => _HotState();\n}\n\nclass _HotState extends State<Hot> with AutomaticKeepAliveClientMixin {\n  List _movieList = [];\n  int start = 0;\n  int total = 0;\n  ScrollController _scrollController = ScrollController();\n\n  @override\n  void initState() {\n    super.initState();\n    _scrollController.addListener(() {\n      if (_scrollController.position.pixels ==\n          _scrollController.position.maxScrollExtent) {\n        getMore();\n      }\n    });\n    this.query(init: true);\n  }\n\n  query({bool init = false}) async {\n    Map res = await api.getMovieList(\n        history: widget.history, start: init ? 0 : this.start);\n    var start = res['start'];\n    var total = res['total'];\n    var subjects = res['subjects'];\n    setState(() {\n      if (init) {\n        this._movieList = subjects;\n      } else {\n        this._movieList.addAll(subjects);\n      }\n      this.start = start + 10;\n      this.total = total;\n    });\n  }\n\n  Future<Null> _onRefresh() async {\n    await this.query(init: true);\n  }\n\n  getMore() {\n    if (start < total) {\n      query();\n    }\n  }\n\n  @override\n  bool get wantKeepAlive => true;\n\n  @override\n  Widget build(BuildContext context) {\n    super.build(context);\n    return RefreshIndicator(\n      onRefresh: _onRefresh,\n      child: ListView.builder(\n        controller: _scrollController,\n        itemCount: this._movieList.length,\n        itemBuilder: (BuildContext context, int index) =>\n            MovieItem(data: this._movieList[index]),\n      ),\n    );\n  }\n}\n\n```\n\n### 电影的详情页面\n点击单条电影时使用`Navigator.pushNamed(context, 'detail', arguments: data['id']);`即可跳转详情页，在详情页中通过`id`再请求接口获取详情:\n``` dart\nimport 'package:flutter/material.dart';\nimport 'package:movie/widgets/detail/detailTop.dart';\nimport 'package:movie/widgets/detail/rateing.dart';\nimport 'package:movie/widgets/detail/actors.dart';\nimport 'package:movie/widgets/detail/photos.dart';\nimport 'package:movie/widgets/detail/comments.dart';\nimport 'package:movie/utils/api.dart' as api;\n\nclass MovieDetail extends StatefulWidget {\n  final id;\n  MovieDetail({Key key, this.id}) : super(key: key);\n\n  _MovieDetailState createState() => _MovieDetailState();\n}\n\nclass _MovieDetailState extends State<MovieDetail> {\n  var _data = {};\n\n  @override\n  void initState() {\n    super.initState();\n    this.init();\n  }\n\n  init() async {\n    var res = await api.getMovieDetail(widget.id);\n    setState(() {\n      _data = res;\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: _data.isEmpty\n          ? Center(child: CircularProgressIndicator(),)\n          : SafeArea(\n              child: Container(\n                height: MediaQuery.of(context).size.height,\n                width: MediaQuery.of(context).size.width,\n                child: ListView(\n                  scrollDirection: Axis.vertical,\n                  children: <Widget>[\n                    MovieDetailTop(data: _data),\n                    Rate(count: _data['ratings_count'], rating: _data['rating']),\n                    Container(padding: EdgeInsets.all(10),child: Text(_data['summary'])),\n                    Actors(directors: _data['directors'], casts: _data['casts']),\n                    Photos(photos: _data['photos'],),\n                    Comments(comments: _data['popular_comments']),\n                  ],\n                ),\n              ),\n            ),\n    );\n  }\n}\n\n```\n在详情页面中，我们封装了一些组件，这样能让项目更加容易阅读和维护，组件的具体实现就不详细介绍了，都是一些常用的原生组件，这些组件分别是：\n- `widgets/detail/detailTop.dart` 页面顶部的电影概述\n- `widgets/detail/rateing.dart` 评分组件\n- `widgets/detail/actors.dart` 演员表\n- `widgets/detail/photos.dart` 剧照\n- `widgets/detail/comments.dart` 评论组件\n\n### 真实数据来自哪里？\n应用中的数据都是从豆瓣开发者api中拉取的，分别是，正在热映`in_theaters`，top250`top250`和电影详情`subject/id`三个接口,请求这些接口是需要`apikey`的，为了大家能方便请求数据，我将`apikey`上传到了github上，还请大家温柔点，不要将这个`apikey`干爆了。\n\n### 相关链接\n[源码仓库](https://github.com/xch1029/movie)\n[博客地址](http://jser.tech/2019/07/19/flutter-movie)\n[掘金地址](https://juejin.im/post/5d31ea42f265da1bbe5e3ea7)\n","slug":"flutter-movie","published":1,"updated":"2020-02-19T15:20:54.095Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7q4ux6b001h4wnutmoz9832","content":"<blockquote>\n<p>使用Flutter开发一款App是一件非常愉快的事情，其出色的性能、跨多端以及数量众多的原生组件都是我们选择Flutter的理由！今天我们就来使用Flutter开发一款电影类的App，先看下App的截图。</p>\n</blockquote>\n<p><img src=\"http://qiniu.tbmao.com/flutterfluttermovie.jpg\" alt=\"App截图\"></p>\n<h3 id=\"从main-dart开始\"><a href=\"#从main-dart开始\" class=\"headerlink\" title=\"从main.dart开始\"></a>从main.dart开始</h3><p>在Flutter里main.dart是应用开始的地方:<br><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:flutter/material.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:movie/utils/router.dart'</span> <span class=\"keyword\">as</span> router;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> main() =&gt; runApp(MyApp());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyApp</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatelessWidget</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// This widget is the root of your application.</span></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> MaterialApp(</span><br><span class=\"line\">      debugShowCheckedModeBanner: <span class=\"keyword\">false</span>,</span><br><span class=\"line\">      title: <span class=\"string\">'电影'</span>,</span><br><span class=\"line\">      theme: ThemeData(</span><br><span class=\"line\">        primarySwatch: Colors.blue,</span><br><span class=\"line\">      ),</span><br><span class=\"line\">      onGenerateRoute: router.generateRoute,</span><br><span class=\"line\">      initialRoute: <span class=\"string\">'/'</span>,</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>一般的，在Flutter中管理路由有两种方式，一种是直接使用<code>Navigator.of(context).push()</code>，这种方式比较适合非常简单的应用，随着应用的不断发展，逻辑越来越多，推荐使用具名路由来管理应用，本文也是使用的这种方式。直接将路由挂在<code>MaterialApp</code>的<code>onGenerateRoute</code>字段上即可，具体的路由定义放在了单独的文件中进行管理<code>utils/router.dart</code>:<br><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:flutter/material.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:movie/screens/home.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:movie/screens/detail.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:movie/screens/videoPlayer.dart'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">Route&lt;<span class=\"keyword\">dynamic</span>&gt; generateRoute(RouteSettings settings) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (settings.name) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'/'</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> MaterialPageRoute(builder: (context) =&gt; Home());</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'detail'</span>:</span><br><span class=\"line\">      <span class=\"keyword\">var</span> arguments = settings.arguments;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> MaterialPageRoute(</span><br><span class=\"line\">          builder: (context) =&gt; MovieDetail(id: arguments));</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'video'</span>:</span><br><span class=\"line\">      <span class=\"keyword\">var</span> arguments = settings.arguments;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> MaterialPageRoute(</span><br><span class=\"line\">          builder: (context) =&gt; VideoPage(url: arguments));</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> MaterialPageRoute(builder: (context) =&gt; Home());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>真是像极了前端的路由定义，先将组件import进来，然后在各自的路由中return即可。</p>\n<h3 id=\"首页\"><a href=\"#首页\" class=\"headerlink\" title=\"首页\"></a>首页</h3><p>在首页中使用TabBar来展示”正在热映”和”TOP250”:<br><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:flutter/material.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:movie/screens/hot.dart'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Home</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatefulWidget</span> </span>&#123;</span><br><span class=\"line\">  Home(&#123;Key key&#125;) : <span class=\"keyword\">super</span>(key: key);</span><br><span class=\"line\"></span><br><span class=\"line\">  _HomeState createState() =&gt; _HomeState();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">_HomeState</span> <span class=\"keyword\">extends</span> <span class=\"title\">State</span>&lt;<span class=\"title\">Home</span>&gt; <span class=\"title\">with</span> <span class=\"title\">SingleTickerProviderStateMixin</span> </span>&#123;</span><br><span class=\"line\">  TabController _tabController;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> initState() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.initState();</span><br><span class=\"line\">    _tabController = TabController(vsync: <span class=\"keyword\">this</span>, initialIndex: <span class=\"number\">0</span>, length: <span class=\"number\">2</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Scaffold(</span><br><span class=\"line\">      appBar: AppBar(</span><br><span class=\"line\">        title: TabBar(</span><br><span class=\"line\">          controller: _tabController,</span><br><span class=\"line\">          tabs: &lt;Widget&gt;[</span><br><span class=\"line\">            Tab(text: <span class=\"string\">'正在热映'</span>),</span><br><span class=\"line\">            Tab(text: <span class=\"string\">'TOP250'</span>),</span><br><span class=\"line\">          ],</span><br><span class=\"line\">        ),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">      body: TabBarView(</span><br><span class=\"line\">        controller: _tabController,</span><br><span class=\"line\">        children: &lt;Widget&gt;[</span><br><span class=\"line\">          Hot(),</span><br><span class=\"line\">          Hot(history: <span class=\"keyword\">true</span>),</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>两个页面的布局是一样的，只有数据是不同的，所以我们复用这个页面<code>Hot</code>,传入<code>history</code>参数来代表是否为Top250页面</p>\n<h3 id=\"复用的Hot组件\"><a href=\"#复用的Hot组件\" class=\"headerlink\" title=\"复用的Hot组件\"></a>复用的Hot组件</h3><ul>\n<li>在这个组件中，通过history字段来区分成两个页面。</li>\n<li>在页面<code>initState</code>的生命周期中，请求数据，再进行相应的展示。</li>\n<li>下拉刷新的功能是使用的RefreshIndicator组件，在其<code>onRefresh</code>中进行下拉时的逻辑处理。</li>\n<li>Flutter没有直接提供上拉加载的组件，但是也是很容易实现，通过<code>ListView</code>的controller来做判断即可：当前滚动的位置是否到达最大滚动位置<code>_scrollController.position.pixels == _scrollController.position.maxScrollExtent</code></li>\n<li>为了获得良好的用户体验，Tab来回切换的时候，我们不希望页面重新渲染，Flutter提供了混入类AutomaticKeepAliveClientMixin，重载<code>wantKeepAlive</code>即可，下面是完整的代码:<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:flutter/material.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:movie/utils/api.dart'</span> <span class=\"keyword\">as</span> api;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:movie/widgets/movieItem.dart'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Hot</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatefulWidget</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">final</span> <span class=\"built_in\">bool</span> history;</span><br><span class=\"line\">  Hot(&#123;Key key, <span class=\"keyword\">this</span>.history = <span class=\"keyword\">false</span>&#125;) : <span class=\"keyword\">super</span>(key: key);</span><br><span class=\"line\"></span><br><span class=\"line\">  _HotState createState() =&gt; _HotState();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">_HotState</span> <span class=\"keyword\">extends</span> <span class=\"title\">State</span>&lt;<span class=\"title\">Hot</span>&gt; <span class=\"title\">with</span> <span class=\"title\">AutomaticKeepAliveClientMixin</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">List</span> _movieList = [];</span><br><span class=\"line\">  <span class=\"built_in\">int</span> start = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"built_in\">int</span> total = <span class=\"number\">0</span>;</span><br><span class=\"line\">  ScrollController _scrollController = ScrollController();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> initState() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.initState();</span><br><span class=\"line\">    _scrollController.addListener(() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (_scrollController.position.pixels ==</span><br><span class=\"line\">          _scrollController.position.maxScrollExtent) &#123;</span><br><span class=\"line\">        getMore();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.query(init: <span class=\"keyword\">true</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  query(&#123;<span class=\"built_in\">bool</span> init = <span class=\"keyword\">false</span>&#125;) <span class=\"keyword\">async</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">Map</span> res = <span class=\"keyword\">await</span> api.getMovieList(</span><br><span class=\"line\">        history: widget.history, start: init ? <span class=\"number\">0</span> : <span class=\"keyword\">this</span>.start);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> start = res[<span class=\"string\">'start'</span>];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> total = res[<span class=\"string\">'total'</span>];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> subjects = res[<span class=\"string\">'subjects'</span>];</span><br><span class=\"line\">    setState(() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (init) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._movieList = subjects;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._movieList.addAll(subjects);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.start = start + <span class=\"number\">10</span>;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.total = total;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  Future&lt;<span class=\"built_in\">Null</span>&gt; _onRefresh() <span class=\"keyword\">async</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"keyword\">this</span>.query(init: <span class=\"keyword\">true</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  getMore() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (start &lt; total) &#123;</span><br><span class=\"line\">      query();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  <span class=\"built_in\">bool</span> <span class=\"keyword\">get</span> wantKeepAlive =&gt; <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.build(context);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> RefreshIndicator(</span><br><span class=\"line\">      onRefresh: _onRefresh,</span><br><span class=\"line\">      child: ListView.builder(</span><br><span class=\"line\">        controller: _scrollController,</span><br><span class=\"line\">        itemCount: <span class=\"keyword\">this</span>._movieList.length,</span><br><span class=\"line\">        itemBuilder: (BuildContext context, <span class=\"built_in\">int</span> index) =&gt;</span><br><span class=\"line\">            MovieItem(data: <span class=\"keyword\">this</span>._movieList[index]),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"电影的详情页面\"><a href=\"#电影的详情页面\" class=\"headerlink\" title=\"电影的详情页面\"></a>电影的详情页面</h3><p>点击单条电影时使用<code>Navigator.pushNamed(context, &#39;detail&#39;, arguments: data[&#39;id&#39;]);</code>即可跳转详情页，在详情页中通过<code>id</code>再请求接口获取详情:<br><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:flutter/material.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:movie/widgets/detail/detailTop.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:movie/widgets/detail/rateing.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:movie/widgets/detail/actors.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:movie/widgets/detail/photos.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:movie/widgets/detail/comments.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:movie/utils/api.dart'</span> <span class=\"keyword\">as</span> api;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MovieDetail</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatefulWidget</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">final</span> id;</span><br><span class=\"line\">  MovieDetail(&#123;Key key, <span class=\"keyword\">this</span>.id&#125;) : <span class=\"keyword\">super</span>(key: key);</span><br><span class=\"line\"></span><br><span class=\"line\">  _MovieDetailState createState() =&gt; _MovieDetailState();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">_MovieDetailState</span> <span class=\"keyword\">extends</span> <span class=\"title\">State</span>&lt;<span class=\"title\">MovieDetail</span>&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> _data = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> initState() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.initState();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.init();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  init() <span class=\"keyword\">async</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> res = <span class=\"keyword\">await</span> api.getMovieDetail(widget.id);</span><br><span class=\"line\">    setState(() &#123;</span><br><span class=\"line\">      _data = res;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Scaffold(</span><br><span class=\"line\">      body: _data.isEmpty</span><br><span class=\"line\">          ? Center(child: CircularProgressIndicator(),)</span><br><span class=\"line\">          : SafeArea(</span><br><span class=\"line\">              child: Container(</span><br><span class=\"line\">                height: MediaQuery.of(context).size.height,</span><br><span class=\"line\">                width: MediaQuery.of(context).size.width,</span><br><span class=\"line\">                child: ListView(</span><br><span class=\"line\">                  scrollDirection: Axis.vertical,</span><br><span class=\"line\">                  children: &lt;Widget&gt;[</span><br><span class=\"line\">                    MovieDetailTop(data: _data),</span><br><span class=\"line\">                    Rate(count: _data[<span class=\"string\">'ratings_count'</span>], rating: _data[<span class=\"string\">'rating'</span>]),</span><br><span class=\"line\">                    Container(padding: EdgeInsets.all(<span class=\"number\">10</span>),child: Text(_data[<span class=\"string\">'summary'</span>])),</span><br><span class=\"line\">                    Actors(directors: _data[<span class=\"string\">'directors'</span>], casts: _data[<span class=\"string\">'casts'</span>]),</span><br><span class=\"line\">                    Photos(photos: _data[<span class=\"string\">'photos'</span>],),</span><br><span class=\"line\">                    Comments(comments: _data[<span class=\"string\">'popular_comments'</span>]),</span><br><span class=\"line\">                  ],</span><br><span class=\"line\">                ),</span><br><span class=\"line\">              ),</span><br><span class=\"line\">            ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在详情页面中，我们封装了一些组件，这样能让项目更加容易阅读和维护，组件的具体实现就不详细介绍了，都是一些常用的原生组件，这些组件分别是：</p>\n<ul>\n<li><code>widgets/detail/detailTop.dart</code> 页面顶部的电影概述</li>\n<li><code>widgets/detail/rateing.dart</code> 评分组件</li>\n<li><code>widgets/detail/actors.dart</code> 演员表</li>\n<li><code>widgets/detail/photos.dart</code> 剧照</li>\n<li><code>widgets/detail/comments.dart</code> 评论组件</li>\n</ul>\n<h3 id=\"真实数据来自哪里？\"><a href=\"#真实数据来自哪里？\" class=\"headerlink\" title=\"真实数据来自哪里？\"></a>真实数据来自哪里？</h3><p>应用中的数据都是从豆瓣开发者api中拉取的，分别是，正在热映<code>in_theaters</code>，top250<code>top250</code>和电影详情<code>subject/id</code>三个接口,请求这些接口是需要<code>apikey</code>的，为了大家能方便请求数据，我将<code>apikey</code>上传到了github上，还请大家温柔点，不要将这个<code>apikey</code>干爆了。</p>\n<h3 id=\"相关链接\"><a href=\"#相关链接\" class=\"headerlink\" title=\"相关链接\"></a>相关链接</h3><p><a href=\"https://github.com/xch1029/movie\" target=\"_blank\" rel=\"noopener\">源码仓库</a><br><a href=\"http://jser.tech/2019/07/19/flutter-movie\" target=\"_blank\" rel=\"noopener\">博客地址</a><br><a href=\"https://juejin.im/post/5d31ea42f265da1bbe5e3ea7\" target=\"_blank\" rel=\"noopener\">掘金地址</a></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>使用Flutter开发一款App是一件非常愉快的事情，其出色的性能、跨多端以及数量众多的原生组件都是我们选择Flutter的理由！今天我们就来使用Flutter开发一款电影类的App，先看下App的截图。</p>\n</blockquote>\n<p><img src=\"http://qiniu.tbmao.com/flutterfluttermovie.jpg\" alt=\"App截图\"></p>\n<h3 id=\"从main-dart开始\"><a href=\"#从main-dart开始\" class=\"headerlink\" title=\"从main.dart开始\"></a>从main.dart开始</h3><p>在Flutter里main.dart是应用开始的地方:<br><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:flutter/material.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:movie/utils/router.dart'</span> <span class=\"keyword\">as</span> router;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> main() =&gt; runApp(MyApp());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyApp</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatelessWidget</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// This widget is the root of your application.</span></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> MaterialApp(</span><br><span class=\"line\">      debugShowCheckedModeBanner: <span class=\"keyword\">false</span>,</span><br><span class=\"line\">      title: <span class=\"string\">'电影'</span>,</span><br><span class=\"line\">      theme: ThemeData(</span><br><span class=\"line\">        primarySwatch: Colors.blue,</span><br><span class=\"line\">      ),</span><br><span class=\"line\">      onGenerateRoute: router.generateRoute,</span><br><span class=\"line\">      initialRoute: <span class=\"string\">'/'</span>,</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>一般的，在Flutter中管理路由有两种方式，一种是直接使用<code>Navigator.of(context).push()</code>，这种方式比较适合非常简单的应用，随着应用的不断发展，逻辑越来越多，推荐使用具名路由来管理应用，本文也是使用的这种方式。直接将路由挂在<code>MaterialApp</code>的<code>onGenerateRoute</code>字段上即可，具体的路由定义放在了单独的文件中进行管理<code>utils/router.dart</code>:<br><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:flutter/material.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:movie/screens/home.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:movie/screens/detail.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:movie/screens/videoPlayer.dart'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">Route&lt;<span class=\"keyword\">dynamic</span>&gt; generateRoute(RouteSettings settings) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (settings.name) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'/'</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> MaterialPageRoute(builder: (context) =&gt; Home());</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'detail'</span>:</span><br><span class=\"line\">      <span class=\"keyword\">var</span> arguments = settings.arguments;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> MaterialPageRoute(</span><br><span class=\"line\">          builder: (context) =&gt; MovieDetail(id: arguments));</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'video'</span>:</span><br><span class=\"line\">      <span class=\"keyword\">var</span> arguments = settings.arguments;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> MaterialPageRoute(</span><br><span class=\"line\">          builder: (context) =&gt; VideoPage(url: arguments));</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> MaterialPageRoute(builder: (context) =&gt; Home());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>真是像极了前端的路由定义，先将组件import进来，然后在各自的路由中return即可。</p>\n<h3 id=\"首页\"><a href=\"#首页\" class=\"headerlink\" title=\"首页\"></a>首页</h3><p>在首页中使用TabBar来展示”正在热映”和”TOP250”:<br><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:flutter/material.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:movie/screens/hot.dart'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Home</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatefulWidget</span> </span>&#123;</span><br><span class=\"line\">  Home(&#123;Key key&#125;) : <span class=\"keyword\">super</span>(key: key);</span><br><span class=\"line\"></span><br><span class=\"line\">  _HomeState createState() =&gt; _HomeState();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">_HomeState</span> <span class=\"keyword\">extends</span> <span class=\"title\">State</span>&lt;<span class=\"title\">Home</span>&gt; <span class=\"title\">with</span> <span class=\"title\">SingleTickerProviderStateMixin</span> </span>&#123;</span><br><span class=\"line\">  TabController _tabController;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> initState() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.initState();</span><br><span class=\"line\">    _tabController = TabController(vsync: <span class=\"keyword\">this</span>, initialIndex: <span class=\"number\">0</span>, length: <span class=\"number\">2</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Scaffold(</span><br><span class=\"line\">      appBar: AppBar(</span><br><span class=\"line\">        title: TabBar(</span><br><span class=\"line\">          controller: _tabController,</span><br><span class=\"line\">          tabs: &lt;Widget&gt;[</span><br><span class=\"line\">            Tab(text: <span class=\"string\">'正在热映'</span>),</span><br><span class=\"line\">            Tab(text: <span class=\"string\">'TOP250'</span>),</span><br><span class=\"line\">          ],</span><br><span class=\"line\">        ),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">      body: TabBarView(</span><br><span class=\"line\">        controller: _tabController,</span><br><span class=\"line\">        children: &lt;Widget&gt;[</span><br><span class=\"line\">          Hot(),</span><br><span class=\"line\">          Hot(history: <span class=\"keyword\">true</span>),</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>两个页面的布局是一样的，只有数据是不同的，所以我们复用这个页面<code>Hot</code>,传入<code>history</code>参数来代表是否为Top250页面</p>\n<h3 id=\"复用的Hot组件\"><a href=\"#复用的Hot组件\" class=\"headerlink\" title=\"复用的Hot组件\"></a>复用的Hot组件</h3><ul>\n<li>在这个组件中，通过history字段来区分成两个页面。</li>\n<li>在页面<code>initState</code>的生命周期中，请求数据，再进行相应的展示。</li>\n<li>下拉刷新的功能是使用的RefreshIndicator组件，在其<code>onRefresh</code>中进行下拉时的逻辑处理。</li>\n<li>Flutter没有直接提供上拉加载的组件，但是也是很容易实现，通过<code>ListView</code>的controller来做判断即可：当前滚动的位置是否到达最大滚动位置<code>_scrollController.position.pixels == _scrollController.position.maxScrollExtent</code></li>\n<li>为了获得良好的用户体验，Tab来回切换的时候，我们不希望页面重新渲染，Flutter提供了混入类AutomaticKeepAliveClientMixin，重载<code>wantKeepAlive</code>即可，下面是完整的代码:<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:flutter/material.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:movie/utils/api.dart'</span> <span class=\"keyword\">as</span> api;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:movie/widgets/movieItem.dart'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Hot</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatefulWidget</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">final</span> <span class=\"built_in\">bool</span> history;</span><br><span class=\"line\">  Hot(&#123;Key key, <span class=\"keyword\">this</span>.history = <span class=\"keyword\">false</span>&#125;) : <span class=\"keyword\">super</span>(key: key);</span><br><span class=\"line\"></span><br><span class=\"line\">  _HotState createState() =&gt; _HotState();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">_HotState</span> <span class=\"keyword\">extends</span> <span class=\"title\">State</span>&lt;<span class=\"title\">Hot</span>&gt; <span class=\"title\">with</span> <span class=\"title\">AutomaticKeepAliveClientMixin</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">List</span> _movieList = [];</span><br><span class=\"line\">  <span class=\"built_in\">int</span> start = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"built_in\">int</span> total = <span class=\"number\">0</span>;</span><br><span class=\"line\">  ScrollController _scrollController = ScrollController();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> initState() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.initState();</span><br><span class=\"line\">    _scrollController.addListener(() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (_scrollController.position.pixels ==</span><br><span class=\"line\">          _scrollController.position.maxScrollExtent) &#123;</span><br><span class=\"line\">        getMore();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.query(init: <span class=\"keyword\">true</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  query(&#123;<span class=\"built_in\">bool</span> init = <span class=\"keyword\">false</span>&#125;) <span class=\"keyword\">async</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">Map</span> res = <span class=\"keyword\">await</span> api.getMovieList(</span><br><span class=\"line\">        history: widget.history, start: init ? <span class=\"number\">0</span> : <span class=\"keyword\">this</span>.start);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> start = res[<span class=\"string\">'start'</span>];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> total = res[<span class=\"string\">'total'</span>];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> subjects = res[<span class=\"string\">'subjects'</span>];</span><br><span class=\"line\">    setState(() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (init) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._movieList = subjects;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._movieList.addAll(subjects);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.start = start + <span class=\"number\">10</span>;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.total = total;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  Future&lt;<span class=\"built_in\">Null</span>&gt; _onRefresh() <span class=\"keyword\">async</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"keyword\">this</span>.query(init: <span class=\"keyword\">true</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  getMore() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (start &lt; total) &#123;</span><br><span class=\"line\">      query();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  <span class=\"built_in\">bool</span> <span class=\"keyword\">get</span> wantKeepAlive =&gt; <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.build(context);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> RefreshIndicator(</span><br><span class=\"line\">      onRefresh: _onRefresh,</span><br><span class=\"line\">      child: ListView.builder(</span><br><span class=\"line\">        controller: _scrollController,</span><br><span class=\"line\">        itemCount: <span class=\"keyword\">this</span>._movieList.length,</span><br><span class=\"line\">        itemBuilder: (BuildContext context, <span class=\"built_in\">int</span> index) =&gt;</span><br><span class=\"line\">            MovieItem(data: <span class=\"keyword\">this</span>._movieList[index]),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"电影的详情页面\"><a href=\"#电影的详情页面\" class=\"headerlink\" title=\"电影的详情页面\"></a>电影的详情页面</h3><p>点击单条电影时使用<code>Navigator.pushNamed(context, &#39;detail&#39;, arguments: data[&#39;id&#39;]);</code>即可跳转详情页，在详情页中通过<code>id</code>再请求接口获取详情:<br><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:flutter/material.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:movie/widgets/detail/detailTop.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:movie/widgets/detail/rateing.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:movie/widgets/detail/actors.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:movie/widgets/detail/photos.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:movie/widgets/detail/comments.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:movie/utils/api.dart'</span> <span class=\"keyword\">as</span> api;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MovieDetail</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatefulWidget</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">final</span> id;</span><br><span class=\"line\">  MovieDetail(&#123;Key key, <span class=\"keyword\">this</span>.id&#125;) : <span class=\"keyword\">super</span>(key: key);</span><br><span class=\"line\"></span><br><span class=\"line\">  _MovieDetailState createState() =&gt; _MovieDetailState();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">_MovieDetailState</span> <span class=\"keyword\">extends</span> <span class=\"title\">State</span>&lt;<span class=\"title\">MovieDetail</span>&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> _data = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> initState() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.initState();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.init();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  init() <span class=\"keyword\">async</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> res = <span class=\"keyword\">await</span> api.getMovieDetail(widget.id);</span><br><span class=\"line\">    setState(() &#123;</span><br><span class=\"line\">      _data = res;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Scaffold(</span><br><span class=\"line\">      body: _data.isEmpty</span><br><span class=\"line\">          ? Center(child: CircularProgressIndicator(),)</span><br><span class=\"line\">          : SafeArea(</span><br><span class=\"line\">              child: Container(</span><br><span class=\"line\">                height: MediaQuery.of(context).size.height,</span><br><span class=\"line\">                width: MediaQuery.of(context).size.width,</span><br><span class=\"line\">                child: ListView(</span><br><span class=\"line\">                  scrollDirection: Axis.vertical,</span><br><span class=\"line\">                  children: &lt;Widget&gt;[</span><br><span class=\"line\">                    MovieDetailTop(data: _data),</span><br><span class=\"line\">                    Rate(count: _data[<span class=\"string\">'ratings_count'</span>], rating: _data[<span class=\"string\">'rating'</span>]),</span><br><span class=\"line\">                    Container(padding: EdgeInsets.all(<span class=\"number\">10</span>),child: Text(_data[<span class=\"string\">'summary'</span>])),</span><br><span class=\"line\">                    Actors(directors: _data[<span class=\"string\">'directors'</span>], casts: _data[<span class=\"string\">'casts'</span>]),</span><br><span class=\"line\">                    Photos(photos: _data[<span class=\"string\">'photos'</span>],),</span><br><span class=\"line\">                    Comments(comments: _data[<span class=\"string\">'popular_comments'</span>]),</span><br><span class=\"line\">                  ],</span><br><span class=\"line\">                ),</span><br><span class=\"line\">              ),</span><br><span class=\"line\">            ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在详情页面中，我们封装了一些组件，这样能让项目更加容易阅读和维护，组件的具体实现就不详细介绍了，都是一些常用的原生组件，这些组件分别是：</p>\n<ul>\n<li><code>widgets/detail/detailTop.dart</code> 页面顶部的电影概述</li>\n<li><code>widgets/detail/rateing.dart</code> 评分组件</li>\n<li><code>widgets/detail/actors.dart</code> 演员表</li>\n<li><code>widgets/detail/photos.dart</code> 剧照</li>\n<li><code>widgets/detail/comments.dart</code> 评论组件</li>\n</ul>\n<h3 id=\"真实数据来自哪里？\"><a href=\"#真实数据来自哪里？\" class=\"headerlink\" title=\"真实数据来自哪里？\"></a>真实数据来自哪里？</h3><p>应用中的数据都是从豆瓣开发者api中拉取的，分别是，正在热映<code>in_theaters</code>，top250<code>top250</code>和电影详情<code>subject/id</code>三个接口,请求这些接口是需要<code>apikey</code>的，为了大家能方便请求数据，我将<code>apikey</code>上传到了github上，还请大家温柔点，不要将这个<code>apikey</code>干爆了。</p>\n<h3 id=\"相关链接\"><a href=\"#相关链接\" class=\"headerlink\" title=\"相关链接\"></a>相关链接</h3><p><a href=\"https://github.com/xch1029/movie\" target=\"_blank\" rel=\"noopener\">源码仓库</a><br><a href=\"http://jser.tech/2019/07/19/flutter-movie\" target=\"_blank\" rel=\"noopener\">博客地址</a><br><a href=\"https://juejin.im/post/5d31ea42f265da1bbe5e3ea7\" target=\"_blank\" rel=\"noopener\">掘金地址</a></p>\n"},{"title":"Flutter之英雄联盟","date":"2019-07-28T08:31:06.000Z","_content":"\n![](http://qiniu.tbmao.com/lollolapp.jpg)\n\n要说我最喜欢的游戏，那必须是英雄联盟。太多太多的回忆！今天我们一起使用`Flutter`来开发一款英雄资料卡。上图是APP的部分截图，APP的整体设计看上去还是很清爽的。首页使用Tab展示英雄的六大分类，点击英雄的条目会跳转到英雄的详情页面。\n\n### 目录结构\n```\n- lib\n    - models\n    - utils\n    - views\n    - widgets\n    - main.dart\n```\n我们先从项目的目录结构讲起吧，对APP来个整体上的把握。本APP我们采用的目录结构是很常见的，不仅仅是Flutter开发，现在的前端开发模式也基本相似:\n- `models`来定义数据模型\n- `utils`里放一些公用的函数、接口、路由、常量等\n- `views`里放的是页面级别的组件\n- `widgets`里放的是页面中需要使用的小组件\n- `main.dart` 是APP的启动文件 \n\n### 开始之处\nAPP必定从`main.dart`开始，一些模板化的代码就不提了，有一点需要注意的是，APP状态栏的背景是透明的，这个配置在`main()`函数中：\n``` dart\nimport 'package:flutter/material.dart';\nimport 'package:flutter/services.dart';\n\nvoid main() {\n  runApp(MyApp());\n  if (Platform.isAndroid) {\n    SystemUiOverlayStyle systemUiOverlayStyle =\n        SystemUiOverlayStyle(statusBarColor: Colors.transparent);\n    SystemChrome.setSystemUIOverlayStyle(systemUiOverlayStyle);\n  }\n}\n```\n\n### 首页\nAPP进入首页后开始拉取后端接口的数据，进而展示英雄列表。`TabBar`组件来定义页面上部的Tab切换，`TabBarView`来展示页面下部的列表。本来打算使用拳头开放的接口数据，但是没有提供中文翻译。就去腾讯找了下，腾讯更加封闭，居然没有开发者接口。无赖之举，自己用node写了个接口来提供实时的英雄数据，数据100%来自官网哦。另外本人服务器配置不是很高也不稳定，所以接口只供学习使用哦\n``` dart\nimport 'package:flutter/material.dart';\nimport 'package:lol/views/homeList.dart';\nimport 'package:lol/utils/api.dart' as api;\nimport 'package:lol/utils/constant.dart';\nimport 'package:lol/utils/utils.dart';\n\nclass HomeView extends StatefulWidget {\n  HomeView({Key key}) : super(key: key);\n\n  _HomeViewState createState() => _HomeViewState();\n}\n\nclass _HomeViewState extends State<HomeView> with SingleTickerProviderStateMixin {\n  TabController _tabController;\n  List<dynamic> heroList = [];\n\n  @override\n  void initState() {\n    super.initState();\n    _tabController = TabController(vsync: this, initialIndex: 0, length: 6);\n    init();\n  }\n\n  init() async {\n    Map res = await api.getHeroList();\n    setState(() {\n     heroList = res.values.toList();\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: TabBar(\n          controller: _tabController,\n          tabs: <Widget>[\n            Tab(text: '战士'),\n            Tab(text: '坦克'),\n            Tab(text: '法师'),\n            Tab(text: '刺客'),\n            Tab(text: '辅助'),\n            Tab(text: '射手'),\n          ],\n        ),\n      ),\n      body: TabBarView(\n        controller: _tabController,\n        children: <Widget>[\n          HomeList(data: Utils.filterHeroByTag(heroList, Tags.Fighter)),\n          HomeList(data: Utils.filterHeroByTag(heroList, Tags.Tank)),\n          HomeList(data: Utils.filterHeroByTag(heroList, Tags.Mage)),\n          HomeList(data: Utils.filterHeroByTag(heroList, Tags.Assassin)),\n          HomeList(data: Utils.filterHeroByTag(heroList, Tags.Support)),\n          HomeList(data: Utils.filterHeroByTag(heroList, Tags.Marksman)),\n        ],\n      ),\n    );\n  }\n}\n```\n\n### 首页列表\n首页的六个列表都是一样的，只是数据不同，所以公用一个组件`homeList.dart`即可，切换`Tab`的时候为了不销毁之前的页面需要让组件继承`AutomaticKeepAliveClientMixin`类：\n``` dart\nimport 'package:flutter/material.dart';\nimport 'package:lol/widgets/home/heroItem.dart';\nimport 'package:lol/models/heroSimple.dart';\n\nclass HomeList extends StatefulWidget {\n  final List data;\n  HomeList({Key key, this.data}) : super(key: key);\n\n  _HomeListState createState() => _HomeListState();\n}\n\nclass _HomeListState extends State<HomeList>\n    with AutomaticKeepAliveClientMixin {\n  @override\n  bool get wantKeepAlive => true;\n\n  @override\n  Widget build(BuildContext context) {\n    super.build(context);\n    return Container(\n      padding: EdgeInsets.symmetric(vertical: 5),\n      child: ListView.builder(\n        itemCount: widget.data.length,\n        itemBuilder: (BuildContext context, int index) {\n          return HeroItem(data: HeroSimple.fromJson(widget.data[index]));\n        },\n      ),\n    );\n  }\n}\n```\n### 英雄详情\n点击英雄条目，路由跳转到详情页面`heroDetail.dart`，这个页面中包含了很多小组件，其中的皮肤预览功能使用的是第三方的图片查看库`extended_image`,这个库很强大，而且还是位中国开发者，必须支持。\n``` dart\nimport 'package:flutter/material.dart';\nimport 'package:lol/utils/api.dart' as api;\nimport 'package:lol/models/heroSimple.dart';\nimport 'package:lol/models/heroDetail.dart';\nimport 'package:lol/utils/utils.dart';\nimport 'package:lol/widgets/detail/detailItem.dart';\nimport 'package:lol/widgets/detail/skin.dart';\nimport 'package:lol/widgets/detail/info.dart';\n\nclass HeroDetail extends StatefulWidget {\n  final HeroSimple heroSimple;\n  HeroDetail({Key key, this.heroSimple}) : super(key: key);\n\n  _HeroDetailState createState() => _HeroDetailState();\n}\n\nclass _HeroDetailState extends State<HeroDetail> {\n  HeroDetailModel _heroData; // hero数据\n  bool _loading = false; // 加载状态\n  String _version = ''; // 国服版本\n  String _updated = ''; // 文档更新时间\n\n  @override\n  void initState() {\n    super.initState();\n    init();\n  }\n\n  init() async {\n    setState(() {\n      _loading = true;\n    });\n    Map res = await api.getHeroDetail(widget.heroSimple.id);\n    var data = res['data'];\n    String version = res['version'];\n    String updated = res['updated'];\n    print(version);\n    setState(() {\n      _heroData = HeroDetailModel.fromJson(data);\n      _version = version;\n      _updated = updated;\n      _loading = false;\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: Text(widget.heroSimple.name), elevation: 0),\n      body: _loading\n          ? Center(child: CircularProgressIndicator())\n          : SingleChildScrollView(\n              child: Column(\n                crossAxisAlignment: CrossAxisAlignment.start,\n                children: <Widget>[\n                  DetailItem(\n                    title: '皮肤',\n                    child: Skins(imgList: _heroData.skins),\n                  ),\n                  DetailItem(\n                    title: '类型',\n                    child: Row(\n                        children: _heroData.tags\n                            .map((tag) => Container(\n                                  margin: EdgeInsets.only(right: 10),\n                                  child: CircleAvatar(\n                                    child: Text(\n                                      Utils.heroTagsMap(tag),\n                                      style: TextStyle(color: Colors.white),\n                                    ),\n                                  ),\n                                ))\n                            .toList()),\n                  ),\n                  DetailItem(\n                    title: '属性',\n                    child: HeroInfo(data: _heroData.info),\n                  ),\n                  DetailItem(\n                    title: '使用技巧',\n                    child: Column(\n                      crossAxisAlignment: CrossAxisAlignment.start,\n                      children: _heroData.allytips\n                          .map((tip) => Column(\n                                children: <Widget>[\n                                  Text(tip),\n                                  SizedBox(height: 5)\n                                ],\n                              ))\n                          .toList(),\n                    ),\n                  ),\n                  DetailItem(\n                    title: '对抗技巧',\n                    child: Column(\n                      crossAxisAlignment: CrossAxisAlignment.start,\n                      children: _heroData.enemytips\n                          .map((tip) => Column(\n                                children: <Widget>[\n                                  Text(tip),\n                                  SizedBox(height: 5)\n                                ],\n                              ))\n                          .toList(),\n                    ),\n                  ),\n                  DetailItem(\n                    title: '背景故事',\n                    child: Text(_heroData.lore),\n                  ),\n                  DetailItem(\n                    title: '国服版本',\n                    child: Text(_version),\n                  ),\n                  DetailItem(\n                    title: '更新时间',\n                    child: Text(_updated),\n                  )\n                ],\n              ),\n            ),\n    );\n  }\n}\n```\n\n### 打包APK\n打包APK通常需要三个步骤：\nStep1: 生成签名\nStep2: 对项目进行签名配置\nStep3: 打包\n\n#### Step1: 生成签名\n在打包APK之前需要生成一个签名文件，签名文件是APP的唯一标识：\n```\nkeytool -genkey -v -keystore c:/Users/15897/Desktop/key.jks -keyalg RSA -keysize 2048 -validity 10000 -alias key\n```\n- `c:/Users/15897/Desktop/key.jks`表示文件的生成位置，我直接设置的桌面\n- `-validity 10000`设置的签名的有效时间\n- `-alias key`为签名文件起个别名，我直接设置成key\n\n执行这条命令行后，会有一个交互式的问答：\n```\n输入密钥库口令:\n再次输入新口令:\n您的名字与姓氏是什么?\n  [Unknown]:  hua\n您的组织单位名称是什么?\n  [Unknown]:  xxx\n您的组织名称是什么?\n  [Unknown]:  xxx\n您所在的城市或区域名称是什么?\n  [Unknown]:  xxx\n您所在的省/市/自治区名称是什么?\n  [Unknown]:  xxx\n该单位的双字母国家/地区代码是什么?\n  [Unknown]:  xxx\nCN=hua, OU=xxx, O=xxx, L=xxx, ST=xxx, C=xxx是否正确?\n  [否]:  y\n\n正在为以下对象生成 2,048 位RSA密钥对和自签名证书 (SHA256withRSA) (有效期为 10,000 天):\n         CN=hua, OU=xxx, O=xxx, L=xxx, ST=xxx, C=xxx\n输入 <key> 的密钥口令\n        (如果和密钥库口令相同, 按回车):\n[正在存储c:/Users/15897/Desktop/key.jks]\n```\n#### Step2: 对项目进行签名配置\n在项目中新建文件`<app dir>/android/key.properties`,文件中定义了四个变量，留着给`<app dir>/android/app/build.gradle`调用。\n\n前三个都是上一步用到的几个字段，第四个`storeFile`是签名文件的位置，文件位置是相对于`<app dir>/android/app/build.gradle`来说，所以需要将上一步生成了的`key.jks`复制到`<app dir>/android/app/`下。\n\n警告：文件涉及到密码啥的，所以最好不要上传到版本管理。\n```\n#  Note: Keep the key.properties file private; do not check it into public source control.\nstorePassword=123456\nkeyPassword=123456\nkeyAlias=key\nstoreFile=key.jks\n```\n再修改`<app dir>/android/app/build.gradle`（`这里才是正在的配置`）：\n```\ndef keystoreProperties = new Properties()\ndef keystorePropertiesFile = rootProject.file('key.properties')\nif (keystorePropertiesFile.exists()) {\n    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))\n}\n\nandroid {\n\n```\n\n```\nsigningConfigs {\n    release {\n        keyAlias keystoreProperties['keyAlias']\n        keyPassword keystoreProperties['keyPassword']\n        storeFile file(keystoreProperties['storeFile'])\n        storePassword keystoreProperties['storePassword']\n    }\n}\nbuildTypes {\n    release {\n        signingConfig signingConfigs.release\n    }\n}\n```\n\n#### Step3: 打包\n执行打包命令：\n```\nflutter build apk\n```\n```\nYou are building a fat APK that includes binaries for android-arm, android-arm64.\nIf you are deploying the app to the Play Store, it's recommended to use app bundles or split the APK to reduce the APK size.\n    To generate an app bundle, run:\n        flutter build appbundle --target-platform android-arm,android-arm64\n        Learn more on: https://developer.android.com/guide/app-bundle\n    To split the APKs per ABI, run:\n        flutter build apk --target-platform android-arm,android-arm64 --split-per-abi\n        Learn more on:  https://developer.android.com/studio/build/configure-apk-splits#configure-abi-split\nInitializing gradle...                                              3.6s\nResolving dependencies...                                          26.8s\nCalling mockable JAR artifact transform to create file: C:\\Users\\15897\\.gradle\\caches\\transforms-1\\files-1.1\\android.jar\\e122fbb402658e4e43e8b85a067823c3\\android.jar with input C:\\Users\\15897\\AppData\\Local\\Android\\Sdk\\platforms\\android-28\\android.jar\nRunning Gradle task 'assembleRelease'...\nRunning Gradle task 'assembleRelease'... Done                      84.7s\nBuilt build\\app\\outputs\\apk\\release\\app-release.apk (11.2MB).\n```\n打包完成后，apk文件就在这里`build\\app\\outputs\\apk\\release\\app-release.apk`\n\n#### 打包方面相关链接\n- [Flutter官网APK打包教程](https://flutter.dev/docs/deployment/android)\n- [本项目打包配置代码`对比`](https://github.com/xch1029/LOL/commit/d2094e2f4182da22f9b3f767295b134fee578bf2)\n- [本项目APK下载](http://qiniu.tbmao.com/bloglol2.apk)\n\n\n\n\n### 更多链接\n- [源码](https://github.com/xch1029/LOL)\n- [博客](http://jser.tech/2019/07/28/lol)\n- [掘金](https://juejin.im/post/5d3d733c6fb9a07ecf726d3a)\n","source":"_posts/lol.md","raw":"---\ntitle: Flutter之英雄联盟\ndate: 2019-07-28 16:31:06\ntags: flutter\n---\n\n![](http://qiniu.tbmao.com/lollolapp.jpg)\n\n要说我最喜欢的游戏，那必须是英雄联盟。太多太多的回忆！今天我们一起使用`Flutter`来开发一款英雄资料卡。上图是APP的部分截图，APP的整体设计看上去还是很清爽的。首页使用Tab展示英雄的六大分类，点击英雄的条目会跳转到英雄的详情页面。\n\n### 目录结构\n```\n- lib\n    - models\n    - utils\n    - views\n    - widgets\n    - main.dart\n```\n我们先从项目的目录结构讲起吧，对APP来个整体上的把握。本APP我们采用的目录结构是很常见的，不仅仅是Flutter开发，现在的前端开发模式也基本相似:\n- `models`来定义数据模型\n- `utils`里放一些公用的函数、接口、路由、常量等\n- `views`里放的是页面级别的组件\n- `widgets`里放的是页面中需要使用的小组件\n- `main.dart` 是APP的启动文件 \n\n### 开始之处\nAPP必定从`main.dart`开始，一些模板化的代码就不提了，有一点需要注意的是，APP状态栏的背景是透明的，这个配置在`main()`函数中：\n``` dart\nimport 'package:flutter/material.dart';\nimport 'package:flutter/services.dart';\n\nvoid main() {\n  runApp(MyApp());\n  if (Platform.isAndroid) {\n    SystemUiOverlayStyle systemUiOverlayStyle =\n        SystemUiOverlayStyle(statusBarColor: Colors.transparent);\n    SystemChrome.setSystemUIOverlayStyle(systemUiOverlayStyle);\n  }\n}\n```\n\n### 首页\nAPP进入首页后开始拉取后端接口的数据，进而展示英雄列表。`TabBar`组件来定义页面上部的Tab切换，`TabBarView`来展示页面下部的列表。本来打算使用拳头开放的接口数据，但是没有提供中文翻译。就去腾讯找了下，腾讯更加封闭，居然没有开发者接口。无赖之举，自己用node写了个接口来提供实时的英雄数据，数据100%来自官网哦。另外本人服务器配置不是很高也不稳定，所以接口只供学习使用哦\n``` dart\nimport 'package:flutter/material.dart';\nimport 'package:lol/views/homeList.dart';\nimport 'package:lol/utils/api.dart' as api;\nimport 'package:lol/utils/constant.dart';\nimport 'package:lol/utils/utils.dart';\n\nclass HomeView extends StatefulWidget {\n  HomeView({Key key}) : super(key: key);\n\n  _HomeViewState createState() => _HomeViewState();\n}\n\nclass _HomeViewState extends State<HomeView> with SingleTickerProviderStateMixin {\n  TabController _tabController;\n  List<dynamic> heroList = [];\n\n  @override\n  void initState() {\n    super.initState();\n    _tabController = TabController(vsync: this, initialIndex: 0, length: 6);\n    init();\n  }\n\n  init() async {\n    Map res = await api.getHeroList();\n    setState(() {\n     heroList = res.values.toList();\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: TabBar(\n          controller: _tabController,\n          tabs: <Widget>[\n            Tab(text: '战士'),\n            Tab(text: '坦克'),\n            Tab(text: '法师'),\n            Tab(text: '刺客'),\n            Tab(text: '辅助'),\n            Tab(text: '射手'),\n          ],\n        ),\n      ),\n      body: TabBarView(\n        controller: _tabController,\n        children: <Widget>[\n          HomeList(data: Utils.filterHeroByTag(heroList, Tags.Fighter)),\n          HomeList(data: Utils.filterHeroByTag(heroList, Tags.Tank)),\n          HomeList(data: Utils.filterHeroByTag(heroList, Tags.Mage)),\n          HomeList(data: Utils.filterHeroByTag(heroList, Tags.Assassin)),\n          HomeList(data: Utils.filterHeroByTag(heroList, Tags.Support)),\n          HomeList(data: Utils.filterHeroByTag(heroList, Tags.Marksman)),\n        ],\n      ),\n    );\n  }\n}\n```\n\n### 首页列表\n首页的六个列表都是一样的，只是数据不同，所以公用一个组件`homeList.dart`即可，切换`Tab`的时候为了不销毁之前的页面需要让组件继承`AutomaticKeepAliveClientMixin`类：\n``` dart\nimport 'package:flutter/material.dart';\nimport 'package:lol/widgets/home/heroItem.dart';\nimport 'package:lol/models/heroSimple.dart';\n\nclass HomeList extends StatefulWidget {\n  final List data;\n  HomeList({Key key, this.data}) : super(key: key);\n\n  _HomeListState createState() => _HomeListState();\n}\n\nclass _HomeListState extends State<HomeList>\n    with AutomaticKeepAliveClientMixin {\n  @override\n  bool get wantKeepAlive => true;\n\n  @override\n  Widget build(BuildContext context) {\n    super.build(context);\n    return Container(\n      padding: EdgeInsets.symmetric(vertical: 5),\n      child: ListView.builder(\n        itemCount: widget.data.length,\n        itemBuilder: (BuildContext context, int index) {\n          return HeroItem(data: HeroSimple.fromJson(widget.data[index]));\n        },\n      ),\n    );\n  }\n}\n```\n### 英雄详情\n点击英雄条目，路由跳转到详情页面`heroDetail.dart`，这个页面中包含了很多小组件，其中的皮肤预览功能使用的是第三方的图片查看库`extended_image`,这个库很强大，而且还是位中国开发者，必须支持。\n``` dart\nimport 'package:flutter/material.dart';\nimport 'package:lol/utils/api.dart' as api;\nimport 'package:lol/models/heroSimple.dart';\nimport 'package:lol/models/heroDetail.dart';\nimport 'package:lol/utils/utils.dart';\nimport 'package:lol/widgets/detail/detailItem.dart';\nimport 'package:lol/widgets/detail/skin.dart';\nimport 'package:lol/widgets/detail/info.dart';\n\nclass HeroDetail extends StatefulWidget {\n  final HeroSimple heroSimple;\n  HeroDetail({Key key, this.heroSimple}) : super(key: key);\n\n  _HeroDetailState createState() => _HeroDetailState();\n}\n\nclass _HeroDetailState extends State<HeroDetail> {\n  HeroDetailModel _heroData; // hero数据\n  bool _loading = false; // 加载状态\n  String _version = ''; // 国服版本\n  String _updated = ''; // 文档更新时间\n\n  @override\n  void initState() {\n    super.initState();\n    init();\n  }\n\n  init() async {\n    setState(() {\n      _loading = true;\n    });\n    Map res = await api.getHeroDetail(widget.heroSimple.id);\n    var data = res['data'];\n    String version = res['version'];\n    String updated = res['updated'];\n    print(version);\n    setState(() {\n      _heroData = HeroDetailModel.fromJson(data);\n      _version = version;\n      _updated = updated;\n      _loading = false;\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: Text(widget.heroSimple.name), elevation: 0),\n      body: _loading\n          ? Center(child: CircularProgressIndicator())\n          : SingleChildScrollView(\n              child: Column(\n                crossAxisAlignment: CrossAxisAlignment.start,\n                children: <Widget>[\n                  DetailItem(\n                    title: '皮肤',\n                    child: Skins(imgList: _heroData.skins),\n                  ),\n                  DetailItem(\n                    title: '类型',\n                    child: Row(\n                        children: _heroData.tags\n                            .map((tag) => Container(\n                                  margin: EdgeInsets.only(right: 10),\n                                  child: CircleAvatar(\n                                    child: Text(\n                                      Utils.heroTagsMap(tag),\n                                      style: TextStyle(color: Colors.white),\n                                    ),\n                                  ),\n                                ))\n                            .toList()),\n                  ),\n                  DetailItem(\n                    title: '属性',\n                    child: HeroInfo(data: _heroData.info),\n                  ),\n                  DetailItem(\n                    title: '使用技巧',\n                    child: Column(\n                      crossAxisAlignment: CrossAxisAlignment.start,\n                      children: _heroData.allytips\n                          .map((tip) => Column(\n                                children: <Widget>[\n                                  Text(tip),\n                                  SizedBox(height: 5)\n                                ],\n                              ))\n                          .toList(),\n                    ),\n                  ),\n                  DetailItem(\n                    title: '对抗技巧',\n                    child: Column(\n                      crossAxisAlignment: CrossAxisAlignment.start,\n                      children: _heroData.enemytips\n                          .map((tip) => Column(\n                                children: <Widget>[\n                                  Text(tip),\n                                  SizedBox(height: 5)\n                                ],\n                              ))\n                          .toList(),\n                    ),\n                  ),\n                  DetailItem(\n                    title: '背景故事',\n                    child: Text(_heroData.lore),\n                  ),\n                  DetailItem(\n                    title: '国服版本',\n                    child: Text(_version),\n                  ),\n                  DetailItem(\n                    title: '更新时间',\n                    child: Text(_updated),\n                  )\n                ],\n              ),\n            ),\n    );\n  }\n}\n```\n\n### 打包APK\n打包APK通常需要三个步骤：\nStep1: 生成签名\nStep2: 对项目进行签名配置\nStep3: 打包\n\n#### Step1: 生成签名\n在打包APK之前需要生成一个签名文件，签名文件是APP的唯一标识：\n```\nkeytool -genkey -v -keystore c:/Users/15897/Desktop/key.jks -keyalg RSA -keysize 2048 -validity 10000 -alias key\n```\n- `c:/Users/15897/Desktop/key.jks`表示文件的生成位置，我直接设置的桌面\n- `-validity 10000`设置的签名的有效时间\n- `-alias key`为签名文件起个别名，我直接设置成key\n\n执行这条命令行后，会有一个交互式的问答：\n```\n输入密钥库口令:\n再次输入新口令:\n您的名字与姓氏是什么?\n  [Unknown]:  hua\n您的组织单位名称是什么?\n  [Unknown]:  xxx\n您的组织名称是什么?\n  [Unknown]:  xxx\n您所在的城市或区域名称是什么?\n  [Unknown]:  xxx\n您所在的省/市/自治区名称是什么?\n  [Unknown]:  xxx\n该单位的双字母国家/地区代码是什么?\n  [Unknown]:  xxx\nCN=hua, OU=xxx, O=xxx, L=xxx, ST=xxx, C=xxx是否正确?\n  [否]:  y\n\n正在为以下对象生成 2,048 位RSA密钥对和自签名证书 (SHA256withRSA) (有效期为 10,000 天):\n         CN=hua, OU=xxx, O=xxx, L=xxx, ST=xxx, C=xxx\n输入 <key> 的密钥口令\n        (如果和密钥库口令相同, 按回车):\n[正在存储c:/Users/15897/Desktop/key.jks]\n```\n#### Step2: 对项目进行签名配置\n在项目中新建文件`<app dir>/android/key.properties`,文件中定义了四个变量，留着给`<app dir>/android/app/build.gradle`调用。\n\n前三个都是上一步用到的几个字段，第四个`storeFile`是签名文件的位置，文件位置是相对于`<app dir>/android/app/build.gradle`来说，所以需要将上一步生成了的`key.jks`复制到`<app dir>/android/app/`下。\n\n警告：文件涉及到密码啥的，所以最好不要上传到版本管理。\n```\n#  Note: Keep the key.properties file private; do not check it into public source control.\nstorePassword=123456\nkeyPassword=123456\nkeyAlias=key\nstoreFile=key.jks\n```\n再修改`<app dir>/android/app/build.gradle`（`这里才是正在的配置`）：\n```\ndef keystoreProperties = new Properties()\ndef keystorePropertiesFile = rootProject.file('key.properties')\nif (keystorePropertiesFile.exists()) {\n    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))\n}\n\nandroid {\n\n```\n\n```\nsigningConfigs {\n    release {\n        keyAlias keystoreProperties['keyAlias']\n        keyPassword keystoreProperties['keyPassword']\n        storeFile file(keystoreProperties['storeFile'])\n        storePassword keystoreProperties['storePassword']\n    }\n}\nbuildTypes {\n    release {\n        signingConfig signingConfigs.release\n    }\n}\n```\n\n#### Step3: 打包\n执行打包命令：\n```\nflutter build apk\n```\n```\nYou are building a fat APK that includes binaries for android-arm, android-arm64.\nIf you are deploying the app to the Play Store, it's recommended to use app bundles or split the APK to reduce the APK size.\n    To generate an app bundle, run:\n        flutter build appbundle --target-platform android-arm,android-arm64\n        Learn more on: https://developer.android.com/guide/app-bundle\n    To split the APKs per ABI, run:\n        flutter build apk --target-platform android-arm,android-arm64 --split-per-abi\n        Learn more on:  https://developer.android.com/studio/build/configure-apk-splits#configure-abi-split\nInitializing gradle...                                              3.6s\nResolving dependencies...                                          26.8s\nCalling mockable JAR artifact transform to create file: C:\\Users\\15897\\.gradle\\caches\\transforms-1\\files-1.1\\android.jar\\e122fbb402658e4e43e8b85a067823c3\\android.jar with input C:\\Users\\15897\\AppData\\Local\\Android\\Sdk\\platforms\\android-28\\android.jar\nRunning Gradle task 'assembleRelease'...\nRunning Gradle task 'assembleRelease'... Done                      84.7s\nBuilt build\\app\\outputs\\apk\\release\\app-release.apk (11.2MB).\n```\n打包完成后，apk文件就在这里`build\\app\\outputs\\apk\\release\\app-release.apk`\n\n#### 打包方面相关链接\n- [Flutter官网APK打包教程](https://flutter.dev/docs/deployment/android)\n- [本项目打包配置代码`对比`](https://github.com/xch1029/LOL/commit/d2094e2f4182da22f9b3f767295b134fee578bf2)\n- [本项目APK下载](http://qiniu.tbmao.com/bloglol2.apk)\n\n\n\n\n### 更多链接\n- [源码](https://github.com/xch1029/LOL)\n- [博客](http://jser.tech/2019/07/28/lol)\n- [掘金](https://juejin.im/post/5d3d733c6fb9a07ecf726d3a)\n","slug":"lol","published":1,"updated":"2020-02-19T15:20:54.099Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7q4ux6d001j4wnusdu94txh","content":"<p><img src=\"http://qiniu.tbmao.com/lollolapp.jpg\" alt></p>\n<p>要说我最喜欢的游戏，那必须是英雄联盟。太多太多的回忆！今天我们一起使用<code>Flutter</code>来开发一款英雄资料卡。上图是APP的部分截图，APP的整体设计看上去还是很清爽的。首页使用Tab展示英雄的六大分类，点击英雄的条目会跳转到英雄的详情页面。</p>\n<h3 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- lib</span><br><span class=\"line\">    - models</span><br><span class=\"line\">    - utils</span><br><span class=\"line\">    - views</span><br><span class=\"line\">    - widgets</span><br><span class=\"line\">    - main.dart</span><br></pre></td></tr></table></figure>\n<p>我们先从项目的目录结构讲起吧，对APP来个整体上的把握。本APP我们采用的目录结构是很常见的，不仅仅是Flutter开发，现在的前端开发模式也基本相似:</p>\n<ul>\n<li><code>models</code>来定义数据模型</li>\n<li><code>utils</code>里放一些公用的函数、接口、路由、常量等</li>\n<li><code>views</code>里放的是页面级别的组件</li>\n<li><code>widgets</code>里放的是页面中需要使用的小组件</li>\n<li><code>main.dart</code> 是APP的启动文件 </li>\n</ul>\n<h3 id=\"开始之处\"><a href=\"#开始之处\" class=\"headerlink\" title=\"开始之处\"></a>开始之处</h3><p>APP必定从<code>main.dart</code>开始，一些模板化的代码就不提了，有一点需要注意的是，APP状态栏的背景是透明的，这个配置在<code>main()</code>函数中：<br><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:flutter/material.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:flutter/services.dart'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> main() &#123;</span><br><span class=\"line\">  runApp(MyApp());</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (Platform.isAndroid) &#123;</span><br><span class=\"line\">    SystemUiOverlayStyle systemUiOverlayStyle =</span><br><span class=\"line\">        SystemUiOverlayStyle(statusBarColor: Colors.transparent);</span><br><span class=\"line\">    SystemChrome.setSystemUIOverlayStyle(systemUiOverlayStyle);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"首页\"><a href=\"#首页\" class=\"headerlink\" title=\"首页\"></a>首页</h3><p>APP进入首页后开始拉取后端接口的数据，进而展示英雄列表。<code>TabBar</code>组件来定义页面上部的Tab切换，<code>TabBarView</code>来展示页面下部的列表。本来打算使用拳头开放的接口数据，但是没有提供中文翻译。就去腾讯找了下，腾讯更加封闭，居然没有开发者接口。无赖之举，自己用node写了个接口来提供实时的英雄数据，数据100%来自官网哦。另外本人服务器配置不是很高也不稳定，所以接口只供学习使用哦<br><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:flutter/material.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:lol/views/homeList.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:lol/utils/api.dart'</span> <span class=\"keyword\">as</span> api;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:lol/utils/constant.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:lol/utils/utils.dart'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HomeView</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatefulWidget</span> </span>&#123;</span><br><span class=\"line\">  HomeView(&#123;Key key&#125;) : <span class=\"keyword\">super</span>(key: key);</span><br><span class=\"line\"></span><br><span class=\"line\">  _HomeViewState createState() =&gt; _HomeViewState();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">_HomeViewState</span> <span class=\"keyword\">extends</span> <span class=\"title\">State</span>&lt;<span class=\"title\">HomeView</span>&gt; <span class=\"title\">with</span> <span class=\"title\">SingleTickerProviderStateMixin</span> </span>&#123;</span><br><span class=\"line\">  TabController _tabController;</span><br><span class=\"line\">  <span class=\"built_in\">List</span>&lt;<span class=\"keyword\">dynamic</span>&gt; heroList = [];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> initState() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.initState();</span><br><span class=\"line\">    _tabController = TabController(vsync: <span class=\"keyword\">this</span>, initialIndex: <span class=\"number\">0</span>, length: <span class=\"number\">6</span>);</span><br><span class=\"line\">    init();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  init() <span class=\"keyword\">async</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">Map</span> res = <span class=\"keyword\">await</span> api.getHeroList();</span><br><span class=\"line\">    setState(() &#123;</span><br><span class=\"line\">     heroList = res.values.toList();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Scaffold(</span><br><span class=\"line\">      appBar: AppBar(</span><br><span class=\"line\">        title: TabBar(</span><br><span class=\"line\">          controller: _tabController,</span><br><span class=\"line\">          tabs: &lt;Widget&gt;[</span><br><span class=\"line\">            Tab(text: <span class=\"string\">'战士'</span>),</span><br><span class=\"line\">            Tab(text: <span class=\"string\">'坦克'</span>),</span><br><span class=\"line\">            Tab(text: <span class=\"string\">'法师'</span>),</span><br><span class=\"line\">            Tab(text: <span class=\"string\">'刺客'</span>),</span><br><span class=\"line\">            Tab(text: <span class=\"string\">'辅助'</span>),</span><br><span class=\"line\">            Tab(text: <span class=\"string\">'射手'</span>),</span><br><span class=\"line\">          ],</span><br><span class=\"line\">        ),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">      body: TabBarView(</span><br><span class=\"line\">        controller: _tabController,</span><br><span class=\"line\">        children: &lt;Widget&gt;[</span><br><span class=\"line\">          HomeList(data: Utils.filterHeroByTag(heroList, Tags.Fighter)),</span><br><span class=\"line\">          HomeList(data: Utils.filterHeroByTag(heroList, Tags.Tank)),</span><br><span class=\"line\">          HomeList(data: Utils.filterHeroByTag(heroList, Tags.Mage)),</span><br><span class=\"line\">          HomeList(data: Utils.filterHeroByTag(heroList, Tags.Assassin)),</span><br><span class=\"line\">          HomeList(data: Utils.filterHeroByTag(heroList, Tags.Support)),</span><br><span class=\"line\">          HomeList(data: Utils.filterHeroByTag(heroList, Tags.Marksman)),</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"首页列表\"><a href=\"#首页列表\" class=\"headerlink\" title=\"首页列表\"></a>首页列表</h3><p>首页的六个列表都是一样的，只是数据不同，所以公用一个组件<code>homeList.dart</code>即可，切换<code>Tab</code>的时候为了不销毁之前的页面需要让组件继承<code>AutomaticKeepAliveClientMixin</code>类：<br><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:flutter/material.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:lol/widgets/home/heroItem.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:lol/models/heroSimple.dart'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HomeList</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatefulWidget</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">final</span> <span class=\"built_in\">List</span> data;</span><br><span class=\"line\">  HomeList(&#123;Key key, <span class=\"keyword\">this</span>.data&#125;) : <span class=\"keyword\">super</span>(key: key);</span><br><span class=\"line\"></span><br><span class=\"line\">  _HomeListState createState() =&gt; _HomeListState();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">_HomeListState</span> <span class=\"keyword\">extends</span> <span class=\"title\">State</span>&lt;<span class=\"title\">HomeList</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"title\">with</span> <span class=\"title\">AutomaticKeepAliveClientMixin</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  <span class=\"built_in\">bool</span> <span class=\"keyword\">get</span> wantKeepAlive =&gt; <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.build(context);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Container(</span><br><span class=\"line\">      padding: EdgeInsets.symmetric(vertical: <span class=\"number\">5</span>),</span><br><span class=\"line\">      child: ListView.builder(</span><br><span class=\"line\">        itemCount: widget.data.length,</span><br><span class=\"line\">        itemBuilder: (BuildContext context, <span class=\"built_in\">int</span> index) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> HeroItem(data: HeroSimple.fromJson(widget.data[index]));</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"英雄详情\"><a href=\"#英雄详情\" class=\"headerlink\" title=\"英雄详情\"></a>英雄详情</h3><p>点击英雄条目，路由跳转到详情页面<code>heroDetail.dart</code>，这个页面中包含了很多小组件，其中的皮肤预览功能使用的是第三方的图片查看库<code>extended_image</code>,这个库很强大，而且还是位中国开发者，必须支持。<br><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:flutter/material.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:lol/utils/api.dart'</span> <span class=\"keyword\">as</span> api;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:lol/models/heroSimple.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:lol/models/heroDetail.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:lol/utils/utils.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:lol/widgets/detail/detailItem.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:lol/widgets/detail/skin.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:lol/widgets/detail/info.dart'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HeroDetail</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatefulWidget</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">final</span> HeroSimple heroSimple;</span><br><span class=\"line\">  HeroDetail(&#123;Key key, <span class=\"keyword\">this</span>.heroSimple&#125;) : <span class=\"keyword\">super</span>(key: key);</span><br><span class=\"line\"></span><br><span class=\"line\">  _HeroDetailState createState() =&gt; _HeroDetailState();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">_HeroDetailState</span> <span class=\"keyword\">extends</span> <span class=\"title\">State</span>&lt;<span class=\"title\">HeroDetail</span>&gt; </span>&#123;</span><br><span class=\"line\">  HeroDetailModel _heroData; <span class=\"comment\">// hero数据</span></span><br><span class=\"line\">  <span class=\"built_in\">bool</span> _loading = <span class=\"keyword\">false</span>; <span class=\"comment\">// 加载状态</span></span><br><span class=\"line\">  <span class=\"built_in\">String</span> _version = <span class=\"string\">''</span>; <span class=\"comment\">// 国服版本</span></span><br><span class=\"line\">  <span class=\"built_in\">String</span> _updated = <span class=\"string\">''</span>; <span class=\"comment\">// 文档更新时间</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> initState() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.initState();</span><br><span class=\"line\">    init();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  init() <span class=\"keyword\">async</span> &#123;</span><br><span class=\"line\">    setState(() &#123;</span><br><span class=\"line\">      _loading = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"built_in\">Map</span> res = <span class=\"keyword\">await</span> api.getHeroDetail(widget.heroSimple.id);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> data = res[<span class=\"string\">'data'</span>];</span><br><span class=\"line\">    <span class=\"built_in\">String</span> version = res[<span class=\"string\">'version'</span>];</span><br><span class=\"line\">    <span class=\"built_in\">String</span> updated = res[<span class=\"string\">'updated'</span>];</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(version);</span><br><span class=\"line\">    setState(() &#123;</span><br><span class=\"line\">      _heroData = HeroDetailModel.fromJson(data);</span><br><span class=\"line\">      _version = version;</span><br><span class=\"line\">      _updated = updated;</span><br><span class=\"line\">      _loading = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Scaffold(</span><br><span class=\"line\">      appBar: AppBar(title: Text(widget.heroSimple.name), elevation: <span class=\"number\">0</span>),</span><br><span class=\"line\">      body: _loading</span><br><span class=\"line\">          ? Center(child: CircularProgressIndicator())</span><br><span class=\"line\">          : SingleChildScrollView(</span><br><span class=\"line\">              child: Column(</span><br><span class=\"line\">                crossAxisAlignment: CrossAxisAlignment.start,</span><br><span class=\"line\">                children: &lt;Widget&gt;[</span><br><span class=\"line\">                  DetailItem(</span><br><span class=\"line\">                    title: <span class=\"string\">'皮肤'</span>,</span><br><span class=\"line\">                    child: Skins(imgList: _heroData.skins),</span><br><span class=\"line\">                  ),</span><br><span class=\"line\">                  DetailItem(</span><br><span class=\"line\">                    title: <span class=\"string\">'类型'</span>,</span><br><span class=\"line\">                    child: Row(</span><br><span class=\"line\">                        children: _heroData.tags</span><br><span class=\"line\">                            .map((tag) =&gt; Container(</span><br><span class=\"line\">                                  margin: EdgeInsets.only(right: <span class=\"number\">10</span>),</span><br><span class=\"line\">                                  child: CircleAvatar(</span><br><span class=\"line\">                                    child: Text(</span><br><span class=\"line\">                                      Utils.heroTagsMap(tag),</span><br><span class=\"line\">                                      style: TextStyle(color: Colors.white),</span><br><span class=\"line\">                                    ),</span><br><span class=\"line\">                                  ),</span><br><span class=\"line\">                                ))</span><br><span class=\"line\">                            .toList()),</span><br><span class=\"line\">                  ),</span><br><span class=\"line\">                  DetailItem(</span><br><span class=\"line\">                    title: <span class=\"string\">'属性'</span>,</span><br><span class=\"line\">                    child: HeroInfo(data: _heroData.info),</span><br><span class=\"line\">                  ),</span><br><span class=\"line\">                  DetailItem(</span><br><span class=\"line\">                    title: <span class=\"string\">'使用技巧'</span>,</span><br><span class=\"line\">                    child: Column(</span><br><span class=\"line\">                      crossAxisAlignment: CrossAxisAlignment.start,</span><br><span class=\"line\">                      children: _heroData.allytips</span><br><span class=\"line\">                          .map((tip) =&gt; Column(</span><br><span class=\"line\">                                children: &lt;Widget&gt;[</span><br><span class=\"line\">                                  Text(tip),</span><br><span class=\"line\">                                  SizedBox(height: <span class=\"number\">5</span>)</span><br><span class=\"line\">                                ],</span><br><span class=\"line\">                              ))</span><br><span class=\"line\">                          .toList(),</span><br><span class=\"line\">                    ),</span><br><span class=\"line\">                  ),</span><br><span class=\"line\">                  DetailItem(</span><br><span class=\"line\">                    title: <span class=\"string\">'对抗技巧'</span>,</span><br><span class=\"line\">                    child: Column(</span><br><span class=\"line\">                      crossAxisAlignment: CrossAxisAlignment.start,</span><br><span class=\"line\">                      children: _heroData.enemytips</span><br><span class=\"line\">                          .map((tip) =&gt; Column(</span><br><span class=\"line\">                                children: &lt;Widget&gt;[</span><br><span class=\"line\">                                  Text(tip),</span><br><span class=\"line\">                                  SizedBox(height: <span class=\"number\">5</span>)</span><br><span class=\"line\">                                ],</span><br><span class=\"line\">                              ))</span><br><span class=\"line\">                          .toList(),</span><br><span class=\"line\">                    ),</span><br><span class=\"line\">                  ),</span><br><span class=\"line\">                  DetailItem(</span><br><span class=\"line\">                    title: <span class=\"string\">'背景故事'</span>,</span><br><span class=\"line\">                    child: Text(_heroData.lore),</span><br><span class=\"line\">                  ),</span><br><span class=\"line\">                  DetailItem(</span><br><span class=\"line\">                    title: <span class=\"string\">'国服版本'</span>,</span><br><span class=\"line\">                    child: Text(_version),</span><br><span class=\"line\">                  ),</span><br><span class=\"line\">                  DetailItem(</span><br><span class=\"line\">                    title: <span class=\"string\">'更新时间'</span>,</span><br><span class=\"line\">                    child: Text(_updated),</span><br><span class=\"line\">                  )</span><br><span class=\"line\">                ],</span><br><span class=\"line\">              ),</span><br><span class=\"line\">            ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"打包APK\"><a href=\"#打包APK\" class=\"headerlink\" title=\"打包APK\"></a>打包APK</h3><p>打包APK通常需要三个步骤：<br>Step1: 生成签名<br>Step2: 对项目进行签名配置<br>Step3: 打包</p>\n<h4 id=\"Step1-生成签名\"><a href=\"#Step1-生成签名\" class=\"headerlink\" title=\"Step1: 生成签名\"></a>Step1: 生成签名</h4><p>在打包APK之前需要生成一个签名文件，签名文件是APP的唯一标识：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">keytool -genkey -v -keystore c:/Users/15897/Desktop/key.jks -keyalg RSA -keysize 2048 -validity 10000 -alias key</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><code>c:/Users/15897/Desktop/key.jks</code>表示文件的生成位置，我直接设置的桌面</li>\n<li><code>-validity 10000</code>设置的签名的有效时间</li>\n<li><code>-alias key</code>为签名文件起个别名，我直接设置成key</li>\n</ul>\n<p>执行这条命令行后，会有一个交互式的问答：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入密钥库口令:</span><br><span class=\"line\">再次输入新口令:</span><br><span class=\"line\">您的名字与姓氏是什么?</span><br><span class=\"line\">  [Unknown]:  hua</span><br><span class=\"line\">您的组织单位名称是什么?</span><br><span class=\"line\">  [Unknown]:  xxx</span><br><span class=\"line\">您的组织名称是什么?</span><br><span class=\"line\">  [Unknown]:  xxx</span><br><span class=\"line\">您所在的城市或区域名称是什么?</span><br><span class=\"line\">  [Unknown]:  xxx</span><br><span class=\"line\">您所在的省/市/自治区名称是什么?</span><br><span class=\"line\">  [Unknown]:  xxx</span><br><span class=\"line\">该单位的双字母国家/地区代码是什么?</span><br><span class=\"line\">  [Unknown]:  xxx</span><br><span class=\"line\">CN=hua, OU=xxx, O=xxx, L=xxx, ST=xxx, C=xxx是否正确?</span><br><span class=\"line\">  [否]:  y</span><br><span class=\"line\"></span><br><span class=\"line\">正在为以下对象生成 2,048 位RSA密钥对和自签名证书 (SHA256withRSA) (有效期为 10,000 天):</span><br><span class=\"line\">         CN=hua, OU=xxx, O=xxx, L=xxx, ST=xxx, C=xxx</span><br><span class=\"line\">输入 &lt;key&gt; 的密钥口令</span><br><span class=\"line\">        (如果和密钥库口令相同, 按回车):</span><br><span class=\"line\">[正在存储c:/Users/15897/Desktop/key.jks]</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Step2-对项目进行签名配置\"><a href=\"#Step2-对项目进行签名配置\" class=\"headerlink\" title=\"Step2: 对项目进行签名配置\"></a>Step2: 对项目进行签名配置</h4><p>在项目中新建文件<code>&lt;app dir&gt;/android/key.properties</code>,文件中定义了四个变量，留着给<code>&lt;app dir&gt;/android/app/build.gradle</code>调用。</p>\n<p>前三个都是上一步用到的几个字段，第四个<code>storeFile</code>是签名文件的位置，文件位置是相对于<code>&lt;app dir&gt;/android/app/build.gradle</code>来说，所以需要将上一步生成了的<code>key.jks</code>复制到<code>&lt;app dir&gt;/android/app/</code>下。</p>\n<p>警告：文件涉及到密码啥的，所以最好不要上传到版本管理。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#  Note: Keep the key.properties file private; do not check it into public source control.</span><br><span class=\"line\">storePassword=123456</span><br><span class=\"line\">keyPassword=123456</span><br><span class=\"line\">keyAlias=key</span><br><span class=\"line\">storeFile=key.jks</span><br></pre></td></tr></table></figure></p>\n<p>再修改<code>&lt;app dir&gt;/android/app/build.gradle</code>（<code>这里才是正在的配置</code>）：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def keystoreProperties = new Properties()</span><br><span class=\"line\">def keystorePropertiesFile = rootProject.file(&apos;key.properties&apos;)</span><br><span class=\"line\">if (keystorePropertiesFile.exists()) &#123;</span><br><span class=\"line\">    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">android &#123;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">signingConfigs &#123;</span><br><span class=\"line\">    release &#123;</span><br><span class=\"line\">        keyAlias keystoreProperties[&apos;keyAlias&apos;]</span><br><span class=\"line\">        keyPassword keystoreProperties[&apos;keyPassword&apos;]</span><br><span class=\"line\">        storeFile file(keystoreProperties[&apos;storeFile&apos;])</span><br><span class=\"line\">        storePassword keystoreProperties[&apos;storePassword&apos;]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">buildTypes &#123;</span><br><span class=\"line\">    release &#123;</span><br><span class=\"line\">        signingConfig signingConfigs.release</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Step3-打包\"><a href=\"#Step3-打包\" class=\"headerlink\" title=\"Step3: 打包\"></a>Step3: 打包</h4><p>执行打包命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flutter build apk</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">You are building a fat APK that includes binaries for android-arm, android-arm64.</span><br><span class=\"line\">If you are deploying the app to the Play Store, it&apos;s recommended to use app bundles or split the APK to reduce the APK size.</span><br><span class=\"line\">    To generate an app bundle, run:</span><br><span class=\"line\">        flutter build appbundle --target-platform android-arm,android-arm64</span><br><span class=\"line\">        Learn more on: https://developer.android.com/guide/app-bundle</span><br><span class=\"line\">    To split the APKs per ABI, run:</span><br><span class=\"line\">        flutter build apk --target-platform android-arm,android-arm64 --split-per-abi</span><br><span class=\"line\">        Learn more on:  https://developer.android.com/studio/build/configure-apk-splits#configure-abi-split</span><br><span class=\"line\">Initializing gradle...                                              3.6s</span><br><span class=\"line\">Resolving dependencies...                                          26.8s</span><br><span class=\"line\">Calling mockable JAR artifact transform to create file: C:\\Users\\15897\\.gradle\\caches\\transforms-1\\files-1.1\\android.jar\\e122fbb402658e4e43e8b85a067823c3\\android.jar with input C:\\Users\\15897\\AppData\\Local\\Android\\Sdk\\platforms\\android-28\\android.jar</span><br><span class=\"line\">Running Gradle task &apos;assembleRelease&apos;...</span><br><span class=\"line\">Running Gradle task &apos;assembleRelease&apos;... Done                      84.7s</span><br><span class=\"line\">Built build\\app\\outputs\\apk\\release\\app-release.apk (11.2MB).</span><br></pre></td></tr></table></figure>\n<p>打包完成后，apk文件就在这里<code>build\\app\\outputs\\apk\\release\\app-release.apk</code></p>\n<h4 id=\"打包方面相关链接\"><a href=\"#打包方面相关链接\" class=\"headerlink\" title=\"打包方面相关链接\"></a>打包方面相关链接</h4><ul>\n<li><a href=\"https://flutter.dev/docs/deployment/android\" target=\"_blank\" rel=\"noopener\">Flutter官网APK打包教程</a></li>\n<li><a href=\"https://github.com/xch1029/LOL/commit/d2094e2f4182da22f9b3f767295b134fee578bf2\" target=\"_blank\" rel=\"noopener\">本项目打包配置代码<code>对比</code></a></li>\n<li><a href=\"http://qiniu.tbmao.com/bloglol2.apk\" target=\"_blank\" rel=\"noopener\">本项目APK下载</a></li>\n</ul>\n<h3 id=\"更多链接\"><a href=\"#更多链接\" class=\"headerlink\" title=\"更多链接\"></a>更多链接</h3><ul>\n<li><a href=\"https://github.com/xch1029/LOL\" target=\"_blank\" rel=\"noopener\">源码</a></li>\n<li><a href=\"http://jser.tech/2019/07/28/lol\" target=\"_blank\" rel=\"noopener\">博客</a></li>\n<li><a href=\"https://juejin.im/post/5d3d733c6fb9a07ecf726d3a\" target=\"_blank\" rel=\"noopener\">掘金</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"http://qiniu.tbmao.com/lollolapp.jpg\" alt></p>\n<p>要说我最喜欢的游戏，那必须是英雄联盟。太多太多的回忆！今天我们一起使用<code>Flutter</code>来开发一款英雄资料卡。上图是APP的部分截图，APP的整体设计看上去还是很清爽的。首页使用Tab展示英雄的六大分类，点击英雄的条目会跳转到英雄的详情页面。</p>\n<h3 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- lib</span><br><span class=\"line\">    - models</span><br><span class=\"line\">    - utils</span><br><span class=\"line\">    - views</span><br><span class=\"line\">    - widgets</span><br><span class=\"line\">    - main.dart</span><br></pre></td></tr></table></figure>\n<p>我们先从项目的目录结构讲起吧，对APP来个整体上的把握。本APP我们采用的目录结构是很常见的，不仅仅是Flutter开发，现在的前端开发模式也基本相似:</p>\n<ul>\n<li><code>models</code>来定义数据模型</li>\n<li><code>utils</code>里放一些公用的函数、接口、路由、常量等</li>\n<li><code>views</code>里放的是页面级别的组件</li>\n<li><code>widgets</code>里放的是页面中需要使用的小组件</li>\n<li><code>main.dart</code> 是APP的启动文件 </li>\n</ul>\n<h3 id=\"开始之处\"><a href=\"#开始之处\" class=\"headerlink\" title=\"开始之处\"></a>开始之处</h3><p>APP必定从<code>main.dart</code>开始，一些模板化的代码就不提了，有一点需要注意的是，APP状态栏的背景是透明的，这个配置在<code>main()</code>函数中：<br><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:flutter/material.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:flutter/services.dart'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> main() &#123;</span><br><span class=\"line\">  runApp(MyApp());</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (Platform.isAndroid) &#123;</span><br><span class=\"line\">    SystemUiOverlayStyle systemUiOverlayStyle =</span><br><span class=\"line\">        SystemUiOverlayStyle(statusBarColor: Colors.transparent);</span><br><span class=\"line\">    SystemChrome.setSystemUIOverlayStyle(systemUiOverlayStyle);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"首页\"><a href=\"#首页\" class=\"headerlink\" title=\"首页\"></a>首页</h3><p>APP进入首页后开始拉取后端接口的数据，进而展示英雄列表。<code>TabBar</code>组件来定义页面上部的Tab切换，<code>TabBarView</code>来展示页面下部的列表。本来打算使用拳头开放的接口数据，但是没有提供中文翻译。就去腾讯找了下，腾讯更加封闭，居然没有开发者接口。无赖之举，自己用node写了个接口来提供实时的英雄数据，数据100%来自官网哦。另外本人服务器配置不是很高也不稳定，所以接口只供学习使用哦<br><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:flutter/material.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:lol/views/homeList.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:lol/utils/api.dart'</span> <span class=\"keyword\">as</span> api;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:lol/utils/constant.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:lol/utils/utils.dart'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HomeView</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatefulWidget</span> </span>&#123;</span><br><span class=\"line\">  HomeView(&#123;Key key&#125;) : <span class=\"keyword\">super</span>(key: key);</span><br><span class=\"line\"></span><br><span class=\"line\">  _HomeViewState createState() =&gt; _HomeViewState();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">_HomeViewState</span> <span class=\"keyword\">extends</span> <span class=\"title\">State</span>&lt;<span class=\"title\">HomeView</span>&gt; <span class=\"title\">with</span> <span class=\"title\">SingleTickerProviderStateMixin</span> </span>&#123;</span><br><span class=\"line\">  TabController _tabController;</span><br><span class=\"line\">  <span class=\"built_in\">List</span>&lt;<span class=\"keyword\">dynamic</span>&gt; heroList = [];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> initState() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.initState();</span><br><span class=\"line\">    _tabController = TabController(vsync: <span class=\"keyword\">this</span>, initialIndex: <span class=\"number\">0</span>, length: <span class=\"number\">6</span>);</span><br><span class=\"line\">    init();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  init() <span class=\"keyword\">async</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">Map</span> res = <span class=\"keyword\">await</span> api.getHeroList();</span><br><span class=\"line\">    setState(() &#123;</span><br><span class=\"line\">     heroList = res.values.toList();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Scaffold(</span><br><span class=\"line\">      appBar: AppBar(</span><br><span class=\"line\">        title: TabBar(</span><br><span class=\"line\">          controller: _tabController,</span><br><span class=\"line\">          tabs: &lt;Widget&gt;[</span><br><span class=\"line\">            Tab(text: <span class=\"string\">'战士'</span>),</span><br><span class=\"line\">            Tab(text: <span class=\"string\">'坦克'</span>),</span><br><span class=\"line\">            Tab(text: <span class=\"string\">'法师'</span>),</span><br><span class=\"line\">            Tab(text: <span class=\"string\">'刺客'</span>),</span><br><span class=\"line\">            Tab(text: <span class=\"string\">'辅助'</span>),</span><br><span class=\"line\">            Tab(text: <span class=\"string\">'射手'</span>),</span><br><span class=\"line\">          ],</span><br><span class=\"line\">        ),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">      body: TabBarView(</span><br><span class=\"line\">        controller: _tabController,</span><br><span class=\"line\">        children: &lt;Widget&gt;[</span><br><span class=\"line\">          HomeList(data: Utils.filterHeroByTag(heroList, Tags.Fighter)),</span><br><span class=\"line\">          HomeList(data: Utils.filterHeroByTag(heroList, Tags.Tank)),</span><br><span class=\"line\">          HomeList(data: Utils.filterHeroByTag(heroList, Tags.Mage)),</span><br><span class=\"line\">          HomeList(data: Utils.filterHeroByTag(heroList, Tags.Assassin)),</span><br><span class=\"line\">          HomeList(data: Utils.filterHeroByTag(heroList, Tags.Support)),</span><br><span class=\"line\">          HomeList(data: Utils.filterHeroByTag(heroList, Tags.Marksman)),</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"首页列表\"><a href=\"#首页列表\" class=\"headerlink\" title=\"首页列表\"></a>首页列表</h3><p>首页的六个列表都是一样的，只是数据不同，所以公用一个组件<code>homeList.dart</code>即可，切换<code>Tab</code>的时候为了不销毁之前的页面需要让组件继承<code>AutomaticKeepAliveClientMixin</code>类：<br><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:flutter/material.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:lol/widgets/home/heroItem.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:lol/models/heroSimple.dart'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HomeList</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatefulWidget</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">final</span> <span class=\"built_in\">List</span> data;</span><br><span class=\"line\">  HomeList(&#123;Key key, <span class=\"keyword\">this</span>.data&#125;) : <span class=\"keyword\">super</span>(key: key);</span><br><span class=\"line\"></span><br><span class=\"line\">  _HomeListState createState() =&gt; _HomeListState();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">_HomeListState</span> <span class=\"keyword\">extends</span> <span class=\"title\">State</span>&lt;<span class=\"title\">HomeList</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"title\">with</span> <span class=\"title\">AutomaticKeepAliveClientMixin</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  <span class=\"built_in\">bool</span> <span class=\"keyword\">get</span> wantKeepAlive =&gt; <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.build(context);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Container(</span><br><span class=\"line\">      padding: EdgeInsets.symmetric(vertical: <span class=\"number\">5</span>),</span><br><span class=\"line\">      child: ListView.builder(</span><br><span class=\"line\">        itemCount: widget.data.length,</span><br><span class=\"line\">        itemBuilder: (BuildContext context, <span class=\"built_in\">int</span> index) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> HeroItem(data: HeroSimple.fromJson(widget.data[index]));</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"英雄详情\"><a href=\"#英雄详情\" class=\"headerlink\" title=\"英雄详情\"></a>英雄详情</h3><p>点击英雄条目，路由跳转到详情页面<code>heroDetail.dart</code>，这个页面中包含了很多小组件，其中的皮肤预览功能使用的是第三方的图片查看库<code>extended_image</code>,这个库很强大，而且还是位中国开发者，必须支持。<br><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:flutter/material.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:lol/utils/api.dart'</span> <span class=\"keyword\">as</span> api;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:lol/models/heroSimple.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:lol/models/heroDetail.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:lol/utils/utils.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:lol/widgets/detail/detailItem.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:lol/widgets/detail/skin.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:lol/widgets/detail/info.dart'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HeroDetail</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatefulWidget</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">final</span> HeroSimple heroSimple;</span><br><span class=\"line\">  HeroDetail(&#123;Key key, <span class=\"keyword\">this</span>.heroSimple&#125;) : <span class=\"keyword\">super</span>(key: key);</span><br><span class=\"line\"></span><br><span class=\"line\">  _HeroDetailState createState() =&gt; _HeroDetailState();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">_HeroDetailState</span> <span class=\"keyword\">extends</span> <span class=\"title\">State</span>&lt;<span class=\"title\">HeroDetail</span>&gt; </span>&#123;</span><br><span class=\"line\">  HeroDetailModel _heroData; <span class=\"comment\">// hero数据</span></span><br><span class=\"line\">  <span class=\"built_in\">bool</span> _loading = <span class=\"keyword\">false</span>; <span class=\"comment\">// 加载状态</span></span><br><span class=\"line\">  <span class=\"built_in\">String</span> _version = <span class=\"string\">''</span>; <span class=\"comment\">// 国服版本</span></span><br><span class=\"line\">  <span class=\"built_in\">String</span> _updated = <span class=\"string\">''</span>; <span class=\"comment\">// 文档更新时间</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> initState() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.initState();</span><br><span class=\"line\">    init();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  init() <span class=\"keyword\">async</span> &#123;</span><br><span class=\"line\">    setState(() &#123;</span><br><span class=\"line\">      _loading = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"built_in\">Map</span> res = <span class=\"keyword\">await</span> api.getHeroDetail(widget.heroSimple.id);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> data = res[<span class=\"string\">'data'</span>];</span><br><span class=\"line\">    <span class=\"built_in\">String</span> version = res[<span class=\"string\">'version'</span>];</span><br><span class=\"line\">    <span class=\"built_in\">String</span> updated = res[<span class=\"string\">'updated'</span>];</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(version);</span><br><span class=\"line\">    setState(() &#123;</span><br><span class=\"line\">      _heroData = HeroDetailModel.fromJson(data);</span><br><span class=\"line\">      _version = version;</span><br><span class=\"line\">      _updated = updated;</span><br><span class=\"line\">      _loading = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Scaffold(</span><br><span class=\"line\">      appBar: AppBar(title: Text(widget.heroSimple.name), elevation: <span class=\"number\">0</span>),</span><br><span class=\"line\">      body: _loading</span><br><span class=\"line\">          ? Center(child: CircularProgressIndicator())</span><br><span class=\"line\">          : SingleChildScrollView(</span><br><span class=\"line\">              child: Column(</span><br><span class=\"line\">                crossAxisAlignment: CrossAxisAlignment.start,</span><br><span class=\"line\">                children: &lt;Widget&gt;[</span><br><span class=\"line\">                  DetailItem(</span><br><span class=\"line\">                    title: <span class=\"string\">'皮肤'</span>,</span><br><span class=\"line\">                    child: Skins(imgList: _heroData.skins),</span><br><span class=\"line\">                  ),</span><br><span class=\"line\">                  DetailItem(</span><br><span class=\"line\">                    title: <span class=\"string\">'类型'</span>,</span><br><span class=\"line\">                    child: Row(</span><br><span class=\"line\">                        children: _heroData.tags</span><br><span class=\"line\">                            .map((tag) =&gt; Container(</span><br><span class=\"line\">                                  margin: EdgeInsets.only(right: <span class=\"number\">10</span>),</span><br><span class=\"line\">                                  child: CircleAvatar(</span><br><span class=\"line\">                                    child: Text(</span><br><span class=\"line\">                                      Utils.heroTagsMap(tag),</span><br><span class=\"line\">                                      style: TextStyle(color: Colors.white),</span><br><span class=\"line\">                                    ),</span><br><span class=\"line\">                                  ),</span><br><span class=\"line\">                                ))</span><br><span class=\"line\">                            .toList()),</span><br><span class=\"line\">                  ),</span><br><span class=\"line\">                  DetailItem(</span><br><span class=\"line\">                    title: <span class=\"string\">'属性'</span>,</span><br><span class=\"line\">                    child: HeroInfo(data: _heroData.info),</span><br><span class=\"line\">                  ),</span><br><span class=\"line\">                  DetailItem(</span><br><span class=\"line\">                    title: <span class=\"string\">'使用技巧'</span>,</span><br><span class=\"line\">                    child: Column(</span><br><span class=\"line\">                      crossAxisAlignment: CrossAxisAlignment.start,</span><br><span class=\"line\">                      children: _heroData.allytips</span><br><span class=\"line\">                          .map((tip) =&gt; Column(</span><br><span class=\"line\">                                children: &lt;Widget&gt;[</span><br><span class=\"line\">                                  Text(tip),</span><br><span class=\"line\">                                  SizedBox(height: <span class=\"number\">5</span>)</span><br><span class=\"line\">                                ],</span><br><span class=\"line\">                              ))</span><br><span class=\"line\">                          .toList(),</span><br><span class=\"line\">                    ),</span><br><span class=\"line\">                  ),</span><br><span class=\"line\">                  DetailItem(</span><br><span class=\"line\">                    title: <span class=\"string\">'对抗技巧'</span>,</span><br><span class=\"line\">                    child: Column(</span><br><span class=\"line\">                      crossAxisAlignment: CrossAxisAlignment.start,</span><br><span class=\"line\">                      children: _heroData.enemytips</span><br><span class=\"line\">                          .map((tip) =&gt; Column(</span><br><span class=\"line\">                                children: &lt;Widget&gt;[</span><br><span class=\"line\">                                  Text(tip),</span><br><span class=\"line\">                                  SizedBox(height: <span class=\"number\">5</span>)</span><br><span class=\"line\">                                ],</span><br><span class=\"line\">                              ))</span><br><span class=\"line\">                          .toList(),</span><br><span class=\"line\">                    ),</span><br><span class=\"line\">                  ),</span><br><span class=\"line\">                  DetailItem(</span><br><span class=\"line\">                    title: <span class=\"string\">'背景故事'</span>,</span><br><span class=\"line\">                    child: Text(_heroData.lore),</span><br><span class=\"line\">                  ),</span><br><span class=\"line\">                  DetailItem(</span><br><span class=\"line\">                    title: <span class=\"string\">'国服版本'</span>,</span><br><span class=\"line\">                    child: Text(_version),</span><br><span class=\"line\">                  ),</span><br><span class=\"line\">                  DetailItem(</span><br><span class=\"line\">                    title: <span class=\"string\">'更新时间'</span>,</span><br><span class=\"line\">                    child: Text(_updated),</span><br><span class=\"line\">                  )</span><br><span class=\"line\">                ],</span><br><span class=\"line\">              ),</span><br><span class=\"line\">            ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"打包APK\"><a href=\"#打包APK\" class=\"headerlink\" title=\"打包APK\"></a>打包APK</h3><p>打包APK通常需要三个步骤：<br>Step1: 生成签名<br>Step2: 对项目进行签名配置<br>Step3: 打包</p>\n<h4 id=\"Step1-生成签名\"><a href=\"#Step1-生成签名\" class=\"headerlink\" title=\"Step1: 生成签名\"></a>Step1: 生成签名</h4><p>在打包APK之前需要生成一个签名文件，签名文件是APP的唯一标识：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">keytool -genkey -v -keystore c:/Users/15897/Desktop/key.jks -keyalg RSA -keysize 2048 -validity 10000 -alias key</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><code>c:/Users/15897/Desktop/key.jks</code>表示文件的生成位置，我直接设置的桌面</li>\n<li><code>-validity 10000</code>设置的签名的有效时间</li>\n<li><code>-alias key</code>为签名文件起个别名，我直接设置成key</li>\n</ul>\n<p>执行这条命令行后，会有一个交互式的问答：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入密钥库口令:</span><br><span class=\"line\">再次输入新口令:</span><br><span class=\"line\">您的名字与姓氏是什么?</span><br><span class=\"line\">  [Unknown]:  hua</span><br><span class=\"line\">您的组织单位名称是什么?</span><br><span class=\"line\">  [Unknown]:  xxx</span><br><span class=\"line\">您的组织名称是什么?</span><br><span class=\"line\">  [Unknown]:  xxx</span><br><span class=\"line\">您所在的城市或区域名称是什么?</span><br><span class=\"line\">  [Unknown]:  xxx</span><br><span class=\"line\">您所在的省/市/自治区名称是什么?</span><br><span class=\"line\">  [Unknown]:  xxx</span><br><span class=\"line\">该单位的双字母国家/地区代码是什么?</span><br><span class=\"line\">  [Unknown]:  xxx</span><br><span class=\"line\">CN=hua, OU=xxx, O=xxx, L=xxx, ST=xxx, C=xxx是否正确?</span><br><span class=\"line\">  [否]:  y</span><br><span class=\"line\"></span><br><span class=\"line\">正在为以下对象生成 2,048 位RSA密钥对和自签名证书 (SHA256withRSA) (有效期为 10,000 天):</span><br><span class=\"line\">         CN=hua, OU=xxx, O=xxx, L=xxx, ST=xxx, C=xxx</span><br><span class=\"line\">输入 &lt;key&gt; 的密钥口令</span><br><span class=\"line\">        (如果和密钥库口令相同, 按回车):</span><br><span class=\"line\">[正在存储c:/Users/15897/Desktop/key.jks]</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Step2-对项目进行签名配置\"><a href=\"#Step2-对项目进行签名配置\" class=\"headerlink\" title=\"Step2: 对项目进行签名配置\"></a>Step2: 对项目进行签名配置</h4><p>在项目中新建文件<code>&lt;app dir&gt;/android/key.properties</code>,文件中定义了四个变量，留着给<code>&lt;app dir&gt;/android/app/build.gradle</code>调用。</p>\n<p>前三个都是上一步用到的几个字段，第四个<code>storeFile</code>是签名文件的位置，文件位置是相对于<code>&lt;app dir&gt;/android/app/build.gradle</code>来说，所以需要将上一步生成了的<code>key.jks</code>复制到<code>&lt;app dir&gt;/android/app/</code>下。</p>\n<p>警告：文件涉及到密码啥的，所以最好不要上传到版本管理。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#  Note: Keep the key.properties file private; do not check it into public source control.</span><br><span class=\"line\">storePassword=123456</span><br><span class=\"line\">keyPassword=123456</span><br><span class=\"line\">keyAlias=key</span><br><span class=\"line\">storeFile=key.jks</span><br></pre></td></tr></table></figure></p>\n<p>再修改<code>&lt;app dir&gt;/android/app/build.gradle</code>（<code>这里才是正在的配置</code>）：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def keystoreProperties = new Properties()</span><br><span class=\"line\">def keystorePropertiesFile = rootProject.file(&apos;key.properties&apos;)</span><br><span class=\"line\">if (keystorePropertiesFile.exists()) &#123;</span><br><span class=\"line\">    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">android &#123;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">signingConfigs &#123;</span><br><span class=\"line\">    release &#123;</span><br><span class=\"line\">        keyAlias keystoreProperties[&apos;keyAlias&apos;]</span><br><span class=\"line\">        keyPassword keystoreProperties[&apos;keyPassword&apos;]</span><br><span class=\"line\">        storeFile file(keystoreProperties[&apos;storeFile&apos;])</span><br><span class=\"line\">        storePassword keystoreProperties[&apos;storePassword&apos;]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">buildTypes &#123;</span><br><span class=\"line\">    release &#123;</span><br><span class=\"line\">        signingConfig signingConfigs.release</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Step3-打包\"><a href=\"#Step3-打包\" class=\"headerlink\" title=\"Step3: 打包\"></a>Step3: 打包</h4><p>执行打包命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flutter build apk</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">You are building a fat APK that includes binaries for android-arm, android-arm64.</span><br><span class=\"line\">If you are deploying the app to the Play Store, it&apos;s recommended to use app bundles or split the APK to reduce the APK size.</span><br><span class=\"line\">    To generate an app bundle, run:</span><br><span class=\"line\">        flutter build appbundle --target-platform android-arm,android-arm64</span><br><span class=\"line\">        Learn more on: https://developer.android.com/guide/app-bundle</span><br><span class=\"line\">    To split the APKs per ABI, run:</span><br><span class=\"line\">        flutter build apk --target-platform android-arm,android-arm64 --split-per-abi</span><br><span class=\"line\">        Learn more on:  https://developer.android.com/studio/build/configure-apk-splits#configure-abi-split</span><br><span class=\"line\">Initializing gradle...                                              3.6s</span><br><span class=\"line\">Resolving dependencies...                                          26.8s</span><br><span class=\"line\">Calling mockable JAR artifact transform to create file: C:\\Users\\15897\\.gradle\\caches\\transforms-1\\files-1.1\\android.jar\\e122fbb402658e4e43e8b85a067823c3\\android.jar with input C:\\Users\\15897\\AppData\\Local\\Android\\Sdk\\platforms\\android-28\\android.jar</span><br><span class=\"line\">Running Gradle task &apos;assembleRelease&apos;...</span><br><span class=\"line\">Running Gradle task &apos;assembleRelease&apos;... Done                      84.7s</span><br><span class=\"line\">Built build\\app\\outputs\\apk\\release\\app-release.apk (11.2MB).</span><br></pre></td></tr></table></figure>\n<p>打包完成后，apk文件就在这里<code>build\\app\\outputs\\apk\\release\\app-release.apk</code></p>\n<h4 id=\"打包方面相关链接\"><a href=\"#打包方面相关链接\" class=\"headerlink\" title=\"打包方面相关链接\"></a>打包方面相关链接</h4><ul>\n<li><a href=\"https://flutter.dev/docs/deployment/android\" target=\"_blank\" rel=\"noopener\">Flutter官网APK打包教程</a></li>\n<li><a href=\"https://github.com/xch1029/LOL/commit/d2094e2f4182da22f9b3f767295b134fee578bf2\" target=\"_blank\" rel=\"noopener\">本项目打包配置代码<code>对比</code></a></li>\n<li><a href=\"http://qiniu.tbmao.com/bloglol2.apk\" target=\"_blank\" rel=\"noopener\">本项目APK下载</a></li>\n</ul>\n<h3 id=\"更多链接\"><a href=\"#更多链接\" class=\"headerlink\" title=\"更多链接\"></a>更多链接</h3><ul>\n<li><a href=\"https://github.com/xch1029/LOL\" target=\"_blank\" rel=\"noopener\">源码</a></li>\n<li><a href=\"http://jser.tech/2019/07/28/lol\" target=\"_blank\" rel=\"noopener\">博客</a></li>\n<li><a href=\"https://juejin.im/post/5d3d733c6fb9a07ecf726d3a\" target=\"_blank\" rel=\"noopener\">掘金</a></li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ck7q4ux2l00004wnuh5hkv2kx","category_id":"ck7q4ux2z00044wnu66d1ao7q","_id":"ck7q4ux3m000c4wnu8evolmkt"}],"PostTag":[{"post_id":"ck7q4ux2l00004wnuh5hkv2kx","tag_id":"ck7q4ux3300054wnustuvu40u","_id":"ck7q4ux3q000f4wnukmfkl4qy"},{"post_id":"ck7q4ux2l00004wnuh5hkv2kx","tag_id":"ck7q4ux3b00094wnu2ovcua0k","_id":"ck7q4ux3v000h4wnup2d82os2"},{"post_id":"ck7q4ux2u00024wnu8db0lmgs","tag_id":"ck7q4ux3m000d4wnu18f5jcz6","_id":"ck7q4ux3y000k4wnub11ytatw"},{"post_id":"ck7q4ux3s000g4wnu1axv7qqt","tag_id":"ck7q4ux3m000d4wnu18f5jcz6","_id":"ck7q4ux40000m4wnu2cs0qc45"},{"post_id":"ck7q4ux3500064wnuq84otwr7","tag_id":"ck7q4ux3w000i4wnumvmdo3l0","_id":"ck7q4ux42000p4wnuuvoi22m0"},{"post_id":"ck7q4ux44000r4wnupkgq680q","tag_id":"ck7q4ux3m000d4wnu18f5jcz6","_id":"ck7q4ux46000t4wnuza8k13tw"},{"post_id":"ck7q4ux3800074wnu2qo9iisb","tag_id":"ck7q4ux40000n4wnuicqq3oyj","_id":"ck7q4ux47000w4wnu2ail2jy7"},{"post_id":"ck7q4ux3800074wnu2qo9iisb","tag_id":"ck7q4ux45000s4wnu4zgxqj47","_id":"ck7q4ux48000x4wnuj7zgmajj"},{"post_id":"ck7q4ux3800074wnu2qo9iisb","tag_id":"ck7q4ux46000u4wnuavfhifvz","_id":"ck7q4ux49000z4wnuypll3htx"},{"post_id":"ck7q4ux3a00084wnuwlgbcn6x","tag_id":"ck7q4ux47000v4wnu2vwwbkcm","_id":"ck7q4ux4a00114wnuwa165x1t"},{"post_id":"ck7q4ux3a00084wnuwlgbcn6x","tag_id":"ck7q4ux48000y4wnun7paqnqd","_id":"ck7q4ux4b00124wnuhh8tugsb"},{"post_id":"ck7q4ux3d000a4wnu2xx9auou","tag_id":"ck7q4ux4a00104wnu1bz5eh7s","_id":"ck7q4ux4c00144wnuzx3g0cve"},{"post_id":"ck7q4ux3o000e4wnupgq7ltst","tag_id":"ck7q4ux4b00134wnu61mqt5he","_id":"ck7q4ux4d00164wnuo0pdl7au"},{"post_id":"ck7q4ux3x000j4wnu3i7mgcn2","tag_id":"ck7q4ux4c00154wnuxtl2km4r","_id":"ck7q4ux4g00184wnuw06zq68u"},{"post_id":"ck7q4ux3z000l4wnuvj2b89jh","tag_id":"ck7q4ux4f00174wnujjo1hka6","_id":"ck7q4ux4j001a4wnu2gnb8gls"},{"post_id":"ck7q4ux41000o4wnuntpwa6bh","tag_id":"ck7q4ux4f00174wnujjo1hka6","_id":"ck7q4ux4l001c4wnuaake8g31"},{"post_id":"ck7q4ux42000q4wnu159cln1f","tag_id":"ck7q4ux4f00174wnujjo1hka6","_id":"ck7q4ux4m001d4wnu1z83rg7d"},{"post_id":"ck7q4ux67001e4wnurk5ixuqr","tag_id":"ck7q4ux4b00134wnu61mqt5he","_id":"ck7q4ux6b001g4wnudqtmpe94"},{"post_id":"ck7q4ux69001f4wnu384yx02r","tag_id":"ck7q4ux47000v4wnu2vwwbkcm","_id":"ck7q4ux6c001i4wnumdcrtxl3"},{"post_id":"ck7q4ux6b001h4wnutmoz9832","tag_id":"ck7q4ux47000v4wnu2vwwbkcm","_id":"ck7q4ux6f001k4wnux9ql5odm"},{"post_id":"ck7q4ux6d001j4wnusdu94txh","tag_id":"ck7q4ux47000v4wnu2vwwbkcm","_id":"ck7q4ux6g001l4wnulq0lxzae"}],"Tag":[{"name":"react","_id":"ck7q4ux3300054wnustuvu40u"},{"name":"ant-design","_id":"ck7q4ux3b00094wnu2ovcua0k"},{"name":"javascript","_id":"ck7q4ux3m000d4wnu18f5jcz6"},{"name":"工具","_id":"ck7q4ux3w000i4wnumvmdo3l0"},{"name":"插件","_id":"ck7q4ux40000n4wnuicqq3oyj"},{"name":"浏览器","_id":"ck7q4ux45000s4wnu4zgxqj47"},{"name":"Chrome","_id":"ck7q4ux46000u4wnuavfhifvz"},{"name":"flutter","_id":"ck7q4ux47000v4wnu2vwwbkcm"},{"name":"UI","_id":"ck7q4ux48000y4wnun7paqnqd"},{"name":"git","_id":"ck7q4ux4a00104wnu1bz5eh7s"},{"name":"Javascript","_id":"ck7q4ux4b00134wnu61mqt5he"},{"name":"Vue","_id":"ck7q4ux4c00154wnuxtl2km4r"},{"name":"Hexo","_id":"ck7q4ux4f00174wnujjo1hka6"}]}}